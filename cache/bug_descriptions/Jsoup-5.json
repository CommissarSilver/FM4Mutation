{
    "bug_id": 5,
    "bug_type": "SH SF",
    "buggy_lines": "            tq.consume();",
    "code": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n        if (key.length() != 0)\n            return Attribute.createFromEncoded(key, value);\n        else {\n            tq.consume();\n                \n            return null;\n        }\n    }",
    "fixed_code": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n        if (key.length() != 0)\n            return Attribute.createFromEncoded(key, value);\n        else {\n            if (value.length() == 0) // no key, no val; unknown char, keep popping so not get stuck\n                tq.advance();\n                \n            return null;\n        }\n    }",
    "fixed_lines": "            if (value.length() == 0) // no key, no val; unknown char, keep popping so not get stuck\n                tq.advance();",
    "masked_code": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n        if (key.length() != 0)\n            return Attribute.createFromEncoded(key, value);\n        else {\n>>> [ INFILL ] <<<\n                \n            return null;\n        }\n    }",
    "project": "Jsoup",
    "test_error_message": "java.lang.StringIndexOutOfBoundsException: String index out of range: 14",
    "test_framework": "defects4j",
    "test_line": "        Document doc = Jsoup.parse(html);",
    "test_name": "parsesQuiteRoughAttributes",
    "test_suite": "org.jsoup.parser.ParserTest",
    "time_buggy": "2011-07-02 21:11:58 +1000",
    "time_fixed": "2011-07-02 21:11:58 +1000",
    "bug_description": "Bug ID: 5\nProject: Jsoup\nBug Type: SH SF (Check related to String and File Handling)\n\n1. Description: \nThe bug is about `StringIndexOutOfBoundsException` error, which generally occurs when you try to access a character with a valid index number (larger than or equal to zero and less than the size of the String) from a String, but the entered index number is not valid. In this specific scenario, a `String index out of range: 14` error occurs, indicating the string being referenced does not have that many characters. This causes the code to break and the program to crash.\n\n2. Location:\nThe bug is located in the method `parseAttribute()` of the Jsoup project. More specifically, the error occurs at line `tq.consume();`. \n\n3. Cause:\nThis is the result of invoking the `consume()` method from 'tq' object. The method is trying to consume more characters than actually exist in the string, hence it is trying to access a character that does not exist, resulting in `StringIndexOutOfBoundsException`.\n\n4. Impact:\nThe bug causes the program to throw an unhandled exception and crashes the application. This makes the software unreliable and decreases user trust in the system.\n\n5. Fix:\nTo fix this bug, an additional condition is added before invoking the `consume()` method. The fixed code checks if the length of the value is zero, only then the `advance()` method of 'tq' object is invoked. The condition ensures that we're not trying to access characters beyond the length of the string, and thus prevents the exception from being thrown.\n\n6. Test:\nThe fix should be tested by running the similar code that caused the initial exception. If the exception is no longer raised the bug is considered fixed. The fix should also be reviwed by peers to ensure that it does not introduce new bugs or side effects.\n\nThis step-by-step detailed description will help developers identify, explain and potentially generate artificial java bugs that are similar in nature. It can be helpful to test the robustness of the bug detection tools or to improve the skills of junior developers."
}