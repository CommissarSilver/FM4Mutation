{
    "bug_id": 84,
    "bug_type": "SH SF",
    "buggy_lines": "                Element el = ",
    "code": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                String prefix = updateNamespaces(sourceEl);\n                String namespace = namespacesStack.peek().get(prefix);\n                String tagName = sourceEl.tagName();\n\n                Element el = \n                    doc.createElementNS(namespace, tagName);\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }",
    "fixed_code": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                String prefix = updateNamespaces(sourceEl);\n                String namespace = namespacesStack.peek().get(prefix);\n                String tagName = sourceEl.tagName();\n\n                Element el = namespace == null && tagName.contains(\":\") ?\n                    doc.createElementNS(\"\", tagName) : // doesn't have a real namespace defined\n                    doc.createElementNS(namespace, tagName);\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }",
    "fixed_lines": "                Element el = namespace == null && tagName.contains(\":\") ?\n                    doc.createElementNS(\"\", tagName) : // doesn't have a real namespace defined",
    "masked_code": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                String prefix = updateNamespaces(sourceEl);\n                String namespace = namespacesStack.peek().get(prefix);\n                String tagName = sourceEl.tagName();\n\n>>> [ INFILL ] <<<\n                    doc.createElementNS(namespace, tagName);\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }",
    "project": "Jsoup",
    "test_error_message": "org.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.",
    "test_framework": "defects4j",
    "test_line": "        Document w3Doc = new W3CDom().fromJsoup(doc);",
    "test_name": "treatsUndeclaredNamespaceAsLocalName",
    "test_suite": "org.jsoup.helper.W3CDomTest",
    "time_buggy": "2018-04-29 15:25:23 -0700",
    "time_fixed": "2018-04-29 16:16:12 -0700",
    "bug_description": "Bug ID: 84\nProject: Jsoup\nBug Type: Semantic Error - Syntax Failure (SH SF)\n\n1) Introduction:\nIn the Jsoup project, a bug [ID: 84] was identified, causing an issue in the code. Specifically, this is a semantic error where the researcher reported a 'Namespace Error'. This type of error happens when an attempt is made to create or change an object such as an XML or document element in a way which is incorrect concerning applicable namespaces.\n\n2) Location of the Bug:\nThe bug is found in the following lines of code: \n```\nElement el = doc.createElementNS(namespace, tagName);\n```\nThis means that the error is located at the point where an element is being created with a namespace.\n\n3) What is the Bug:\nThe bug causes a Test Error Message: \n```\norg.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.\n```\nThis error occurs because the code attempts to create a document element with a namespace that does not exist or is invalid.\n\n4) Solution:\nThe solution implemented to fix the bug is noted in the fixed code as follows:\n```\nElement el = namespace == null && tagName.contains(\":\") ?\n                    doc.createElementNS(\"\", tagName) : // doesn't have a real namespace defined\n                    doc.createElementNS(namespace, tagName);\n```    \n\nHere, an added condition checks whether the namespace is null and if the tagName contains a \":\"\n\n5) Steps to Reproduce Bug for Artificial Generation:\n- Create an XML or document element using the createElementNS() function without ensuring that the namespace exists or is valid.\n- Introduce the anomalous line of code into the project and observe that a DOMException: NAMESPACE_ERR is returned.\n  \n6) Steps to Fix Bug:\n- To fix the bug, modify the code to check if the namespace is null and if the tagName contains a \":\" before creating the element.\n- If the namespace is null and tagName includes a \":\", the element is created without a real namespace defined.\n- If a namespace exists, the element is created with this actual namespace."
}