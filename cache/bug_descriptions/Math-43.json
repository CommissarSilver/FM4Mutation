{
    "bug_id": 43,
    "bug_type": "SF",
    "buggy_lines": "        if (!(meanImpl instanceof Mean)) {\n        if (!(varianceImpl instanceof Variance)) {\n        if (!(geoMeanImpl instanceof GeometricMean)) {",
    "code": "    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }",
    "fixed_code": "    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (meanImpl != mean) {\n            meanImpl.increment(value);\n        }\n        if (varianceImpl != variance) {\n            varianceImpl.increment(value);\n        }\n        if (geoMeanImpl != geoMean) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }",
    "fixed_lines": "        if (meanImpl != mean) {\n        if (varianceImpl != variance) {\n        if (geoMeanImpl != geoMean) {",
    "masked_code": "    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n            meanImpl.increment(value);\n        }\n            varianceImpl.increment(value);\n        }\n>>> [ INFILL ] <<<\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>",
    "test_framework": "defects4j",
    "test_line": "        Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); ",
    "test_name": "testOverrideMeanWithMathClass",
    "test_suite": "org.apache.commons.math.stat.descriptive.SummaryStatisticsTest",
    "time_buggy": "2011-11-27 04:07:06 +0000",
    "time_fixed": "2011-11-27 05:20:09 +0000",
    "bug_description": "Bug Title: Incorrect Condition Checks Causing Miscalculation in Mathematical Variables\n\nBug ID: 43\nProject: Math\nBug Type: SF (Software Fault)\n\nDescription:\n\nThe bug arises in the `addValue(double value)` method of the Math Project.\n\nIt is found in three-line code section where the checks for 'meanImpl', 'varianceImpl', and 'geoMeanImpl' are implemented. In each instance, the 'instanceof' check is used to determine if these objects are of the types 'Mean', 'Variance', and 'GeometricMean' respectively. If the check returns false, then the 'value' is incremented for these instances.\n\nError Message: \nThe test error message thrown is as follows: `junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>`. This suggests that the expected output value was 2.5, but Not a Number (NaN) was received. It appears that a numerical value was expected; but due to the bug, a numeric value couldn't be calculated, resulting in NaN.\n\nThe source of the bug lies in the conditional checks. The conditions `(!(meanImpl instanceof Mean))`, `(!(varianceImpl instanceof Variance))`, and `(!(geoMeanImpl instanceof GeometricMean))` incorrectly checks whether the instances are of mentioned types instead of comparing objects.\n\nSteps to Reproduce:\nThe bug occurs when the `addValue(double value)` method is called with a double input 'value'. When the code proceeds to the checks `(!(meanImpl instanceof Mean))`, `(!(varianceImpl instanceof Variance))`, and `(!(geoMeanImpl instanceof GeometricMean))`, and if these checks produce incorrect results, the following 'value' incrementation for these instances does not execute as expected.\n\nFixed Solution:\nIn the fixed code, the conditional checks are altered appropriately. Instead of checking if the instances 'meanImpl', 'varianceImpl', and 'geoMeanImpl' are of the types 'Mean', 'Variance', and 'GeometricMean' respectively, the checks are performed to see if these instances are not equal to 'mean', 'variance', and 'geoMean' respectively. If the conditions are met, the 'value' is incremented successfully for these respective instances.\n\nThis bug specifically requires knowledge of Java 'instanceof' operator and correct understanding of conditional checks for object references in context."
}