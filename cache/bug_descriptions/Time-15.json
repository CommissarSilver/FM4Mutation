{
    "bug_id": 15,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "fixed_code": "    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "fixed_lines": "                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }",
    "masked_code": "    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n>>> [ INFILL ] <<<\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "project": "Time",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "            fail();",
    "test_name": "testSafeMultiplyLongInt",
    "test_suite": "org.joda.time.field.TestFieldUtils",
    "time_buggy": "2012-04-30 12:18:02 +0100",
    "time_fixed": "2012-04-30 12:27:18 +0100",
    "bug_description": "Bug Description:\n\nBug ID: 15\nProject: Time\nBug Type: Semantic/Hardware Failure (SH SF)\n\nDescription:\nThe bug arises from the functionality implemented for multiplication using long integers in the Time project. The code snippet provided is a function, safeMultiply(long val1, int val2), designed to safely multiply long integer values. It is designed to handle cases where the multiplication exceeds the range of long integer values and throws an ArithmeticException in these cases. The exception also provides a message specifying the values causing the overflow. \n\nError:\nThe bug is that the function incorrectly handles the scenario where val1 equals Long.MIN_VALUE and val2 is -1. In Java, Long.MIN_VALUE equals -9223372036854775808, which is one less than the absolute value of Long.MAX_VALUE that equals 9223372036854775807. So when val1 equals to Long.MIN_VALUE and val2 equals -1, the multiplication result exceeds the range of long integer values causing an overflow.\n\nSteps to Reproduce:\nInvoke the safeMultiply() method with val1 as Long.MIN_VALUE and val2 as -1. The test assertion will fail and raise a junit.framework.AssertionFailedError error message.\n\nSolution:\nThe solution provided in the Fixed Code handles the case when val1 equals Long.MIN_VALUE and val2 is -1. Before returning -val1, it checks if val1 equals to Long.MIN_VALUE and if true, it throws an ArithmeticException.\n\nImpact:\nWithout the introduced check in the Fixed Code, the function can return results that exceed the long integer range for specific input values, leading to potential incorrect operations based on the returned results.\n\nRecommendations:\nAll developers dealing with long integer multiplication operations in Java should be aware of this potential overflow scenario, especially when dealing with the Long.MIN_VALUE. Exception handling is highly recommended in these cases to keep the return value within the range of long integer values and to avoid unexpected behavior."
}