{
    "bug_id": 24,
    "bug_type": "SH SF",
    "buggy_lines": "            throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n                                            \"- no room for the description\");",
    "code": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n            throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n                                            \"- no room for the description\");\n        }\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "fixed_code": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n            nextLineTabStop = width - 1;\n        }\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "fixed_lines": "            nextLineTabStop = width - 1;",
    "masked_code": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n>>> [ INFILL ] <<<\n        }\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "project": "Cli",
    "test_error_message": "java.lang.IllegalStateException: Total width is less than the width of the argument and indent - no room for the description",
    "test_framework": "defects4j",
    "test_line": "        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");",
    "test_name": "testLongLineChunkingIndentIgnored",
    "test_suite": "org.apache.commons.cli.bug.BugCLI162Test",
    "time_buggy": "2009-02-27 09:18:38 +0000",
    "time_fixed": "2009-02-27 09:34:11 +0000",
    "bug_description": "Bug ID: 24\nProject: Cli\nBug type: SH SF\n\nDescription:\nThis bug is an instance of a 'java.lang.IllegalStateException' that is caused during the 'renderWrappedText' function in the Cli project. This issue arises when the total width is less than the width of the argument and the indent, leaving no room for the description.\n\nSteps to Replicate:\n1. Invoke the 'renderWrappedText' function with the width value less than the value of 'nextLineTabStop'.\n2. During the code execution, the point is reached where the system checks if 'nextLineTabStop' is greater than or equal to the width. If the condition is true, the java.lang.IllegalStateException is thrown.\n\nBuggy Code:\nThe function 'renderWrappedText' throws an IllegalStateException if 'nextLineTabStop' becomes greater than or equal to the width.\n\n    if (nextLineTabStop >= width)\n     {\n       throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n                                        \"- no room for the description\");\n     }\n\nFollowing this error, an exception is thrown, terminating the code execution at that point with an error message \"Total width is less than the width of the argument and indent - no room for the description\".\n\nFixed Code:\nModifying the code to automatically adjust the 'nextLineTabStop' when it is equal to or larger than width prevents the system from throwing an IllegalStateException, hence resolving the bug.\n\n     if (nextLineTabStop >= width)\n     {\n       nextLineTabStop = width - 1;\n     }\n\nInstead of throwing an exception when 'nextLineTabStop' becomes greater than or equal to width, 'nextLineTabStop' is now automatically adjusted to be one less than width. This ensures that 'nextLineTabStop' can never surpass width, and therefore the error will no longer arise. \n\nThis bug can be synthetically recreated for testing purposes by invoking the function 'renderWrappedText' with 'width' value equal to or smaller than 'nextLineTabStop'."
}