{
    "bug_id": 89,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };\n\n    private final static Class<?>[] NO_VIEWS = new Class<?>[0];\n\n    /**\n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     *\n     * @since 2.8.9\n     */\n    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;\n    static {\n        Set<String> s = new HashSet<>();\n        // Courtesy of [https://github.com/kantega/notsoserial]:\n        // (and wrt [databind#1599])\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");\n        // [databind#1680]: may or may not be problem, take no chance\n        s.add(\"com.sun.rowset.JdbcRowSetImpl\");\n        // [databind#1737]; JDK provided\n        // [databind#1737]; 3rd party\n\n        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\n    }",
    "fixed_code": "    private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };\n\n    private final static Class<?>[] NO_VIEWS = new Class<?>[0];\n\n    /**\n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     *\n     * @since 2.8.9\n     */\n    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;\n    static {\n        Set<String> s = new HashSet<>();\n        // Courtesy of [https://github.com/kantega/notsoserial]:\n        // (and wrt [databind#1599])\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");\n        // [databind#1680]: may or may not be problem, take no chance\n        s.add(\"com.sun.rowset.JdbcRowSetImpl\");\n        // [databind#1737]; JDK provided\n        s.add(\"java.util.logging.FileHandler\");\n        s.add(\"java.rmi.server.UnicastRemoteObject\");\n        // [databind#1737]; 3rd party\n        s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");\n        s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");\n        s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n        s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n\n        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\n    }",
    "fixed_lines": "        s.add(\"java.util.logging.FileHandler\");\n        s.add(\"java.rmi.server.UnicastRemoteObject\");\n        s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");\n        s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");\n        s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n        s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
    "masked_code": "    private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };\n\n    private final static Class<?>[] NO_VIEWS = new Class<?>[0];\n\n    /**\n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     *\n     * @since 2.8.9\n     */\n    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;\n    static {\n        Set<String> s = new HashSet<>();\n        // Courtesy of [https://github.com/kantega/notsoserial]:\n        // (and wrt [databind#1599])\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");\n        // [databind#1680]: may or may not be problem, take no chance\n        s.add(\"com.sun.rowset.JdbcRowSetImpl\");\n        // [databind#1737]; JDK provided\n        // [databind#1737]; 3rd party\n>>> [ INFILL ] <<<\n\n        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\n    }",
    "project": "JacksonDatabind",
    "test_error_message": "junit.framework.AssertionFailedError: Should not pass",
    "test_framework": "defects4j",
    "test_line": "            fail(\"Should not pass\");",
    "test_name": "testJDKTypes1737",
    "test_suite": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "time_buggy": "2017-08-17 13:44:18 -0700",
    "time_fixed": "2017-08-17 15:12:47 -0700",
    "bug_description": "Bug ID: 89\nProject: JacksonDatabind\nBug Type: Serialization Failure (SF)\nDetails: \n\nThe bug is related to Serialization Failure in the JacksonDatabind project. This issue occurs when the code attempts to deserialize objects of classes that are potentially unsafe and should not be permitted. It specifically pertains to the \"DEFAULT_NO_DESER_CLASS_NAMES\" set, which lists all the \"nasty classes\".\n\nErroneous Code:\nIn the buggy code, a HashSet named \"s\" is created and populated with fully qualified names of classes that should not be deserialized. This set is then assigned to the final static Set \"DEFAULT_NO_DESER_CLASS_NAMES\" which is made unmodifiable. However, there are extra classes present in some dependencies that can potentially exploit the deserialization to execute arbitrary code. Therefore, the list of disallowed classes is incomplete.\n\nSteps to Reproduce:\n\n1. An instance of a nasty class gets created and serialized to binary form.\n2. The instance is then deserialized in an environment that processes untrusted data. \n3. If it's one of the classes listed in the Set \"DEFAULT_NO_DESER_CLASS_NAMES\", deserialization should be prevented. \n4. However, the omission of certain classes in this Set (e.g. \"java.rmi.server.UnicastRemoteObject\", \"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\", etc.) leads to successful deserialization, causing a security vulnerability.\n\nBug Fix:\n\nThe bug was fixed by adding the missing classes to the HashSet named \"s\" in the initialization block of \"DEFAULT_NO_DESER_CLASS_NAMES\". Now the set \"DEFAULT_NO_DESER_CLASS_NAMES\" also includes additional classes such as \"java.rmi.server.UnicastRemoteObject\", \"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\", \"org.springframework.beans.factory.config.PropertyPathFactoryBean\", and \"com.mchange.v2.c3p0.JndiRefForwardingDataSource\". The addition of these classes to the set ensures that instances of these classes are not deserialized, thereby enhancing the safety of the application.\n\nThus, to generate artificial bugs of this type, one could deliberately remove a class or classes from this list that are considered unsafe to deserialize. \n\nNote: This bug is dangerous as it might allow a remote attacker to execute arbitrary code, hence it is important to ensure that potentially dangerous classes are prevented from being deserialized."
}