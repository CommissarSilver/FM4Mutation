{
    "bug_id": 22,
    "bug_type": "SF",
    "buggy_lines": "                        return attr.getValue();\n            return null;\n        return uri;",
    "code": "    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        Element element = (Element) node;\n\n        String uri = element.getNamespaceURI();\n        if (uri == null) {\n            String prefix = getPrefix(node);\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n    \n            Node aNode = node;\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        return attr.getValue();\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n            return null;\n        }\n        return uri;\n    }",
    "fixed_code": "    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        Element element = (Element) node;\n\n        String uri = element.getNamespaceURI();\n        if (uri == null) {\n            String prefix = getPrefix(node);\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n    \n            Node aNode = node;\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        uri = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n        }\n        return \"\".equals(uri) ? null : uri;\n    }",
    "fixed_lines": "                        uri = attr.getValue();\n                        break;\n        return \"\".equals(uri) ? null : uri;",
    "masked_code": "    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        Element element = (Element) node;\n\n        String uri = element.getNamespaceURI();\n        if (uri == null) {\n            String prefix = getPrefix(node);\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n    \n            Node aNode = node;\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n        }\n>>> [ INFILL ] <<<\n    }",
    "project": "JxPath",
    "test_error_message": "junit.framework.ComparisonFailure: expected:</b:foo[1]/[test[1]]> but was:</b:foo[1]/[node()[2]]>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(expectedValue, context.getPointer(path).asPath());",
    "test_name": "testInnerEmptyNamespaceDOM",
    "test_suite": "org.apache.commons.jxpath.ri.model.JXPath154Test",
    "time_buggy": "2012-01-20 17:55:54 +0000",
    "time_fixed": "2012-01-20 17:58:11 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 22\nThe bug was found in the \"JxPath\" project and is categorized as a Synthetic Fault (SF).\n\nTest Error Message: \nThe error message suggests a comparison failure, wherein the expected output was \"<b:foo[1]/[test[1]]>\" while the actual output was \"<b:foo[1]/[node()[2]]>\".\n\nBehavior of the Buggy Code:\nIn a specific function `getNamespaceURI(Node node)` Kotlin, given a node, it checks if the node is an instance of Document, if it is, the node is reset to the DocumentElement of that document. An element is then retrieved from the node and the URI of the namespace attached to this element is extracted. If this URI is null, the function checks for prefix and qualified name. A loop is run to traverse the parentNode of the given node until a node where node type equals to `ELEMENT_NODE` is found and from this node, attributeNode of qualified name is retrieved, and if this attribute is not null, it's value is returned. If no such node is found the function returns null or else URI is returned.\n\nCause of the Bug:\nThe loop trying to find the attribute node with the qualified name does not ensure that the correct URI is returned if an attribute node is found. The function abruptly returns 'attr.getValue()' as soon as it encounters the first attribute with the qualified name even though this might not be the value desired.\n\nSolution to the Bug:\nRather than returning the value as soon as an attribute node is found, it would assign the value of the attribute to uri, and then break the loop. After breaking the loop, instead of returning uri or null, it would return an empty string if uri is an empty string or return uri otherwise.\n\nSteps taken in the Fixed Code:\nThe only changes in the fixed code occur towards the end of the while loop inside the conditional statement checking if URI is null. If an attribute node is found, instead of instantly returning \"attr.getValue()\", the value is assigned to the previously null uri variable and the loop is broken. The function then checks if uri equals an empty string and depending on the outcome of that equality check, either null or the uri string is returned. This guarantees that the proper uri value is returned from the function, fixing the bug."
}