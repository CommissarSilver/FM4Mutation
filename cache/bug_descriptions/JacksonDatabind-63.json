{
    "bug_id": 63,
    "bug_type": "SF",
    "buggy_lines": "                    String pkgName = com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(cls);\n                    sb.append(cls.getSimpleName());",
    "code": "        public String getDescription() {\n            if (_desc == null) {\n                StringBuilder sb = new StringBuilder();\n\n                if (_from == null) { // can this ever occur?\n                    sb.append(\"UNKNOWN\");\n                } else {\n                    Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass();\n                    // Hmmh. Although Class.getName() is mostly ok, it does look\n                    // butt-ugly for arrays.\n                    // 06-Oct-2016, tatu: as per [databind#1403], `getSimpleName()` not so good\n                    //   as it drops enclosing class. So let's try bit different approach\n                    String pkgName = com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(cls);\n                    if (pkgName != null) {\n                        sb.append(pkgName);\n                        sb.append('.');\n                    }\n                    sb.append(cls.getSimpleName());\n                }\n                sb.append('[');\n                if (_fieldName != null) {\n                    sb.append('\"');\n                    sb.append(_fieldName);\n                    sb.append('\"');\n                } else if (_index >= 0) {\n                    sb.append(_index);\n                } else {\n                    sb.append('?');\n                }\n                sb.append(']');\n                _desc = sb.toString();\n            }\n            return _desc;\n        }",
    "fixed_code": "        public String getDescription() {\n            if (_desc == null) {\n                StringBuilder sb = new StringBuilder();\n\n                if (_from == null) { // can this ever occur?\n                    sb.append(\"UNKNOWN\");\n                } else {\n                    Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass();\n                    // Hmmh. Although Class.getName() is mostly ok, it does look\n                    // butt-ugly for arrays.\n                    // 06-Oct-2016, tatu: as per [databind#1403], `getSimpleName()` not so good\n                    //   as it drops enclosing class. So let's try bit different approach\n                    int arrays = 0;\n                    while (cls.isArray()) {\n                        cls = cls.getComponentType();\n                        ++arrays;\n                    }\n                    sb.append(cls.getName());\n                    while (--arrays >= 0) {\n                        sb.append(\"[]\");\n                    }\n                    /* was:\n                    String pkgName = ClassUtil.getPackageName(cls);\n                    if (pkgName != null) {\n                        sb.append(pkgName);\n                        sb.append('.');\n                    }\n                    */\n                }\n                sb.append('[');\n                if (_fieldName != null) {\n                    sb.append('\"');\n                    sb.append(_fieldName);\n                    sb.append('\"');\n                } else if (_index >= 0) {\n                    sb.append(_index);\n                } else {\n                    sb.append('?');\n                }\n                sb.append(']');\n                _desc = sb.toString();\n            }\n            return _desc;\n        }",
    "fixed_lines": "                    int arrays = 0;\n                    while (cls.isArray()) {\n                        cls = cls.getComponentType();\n                        ++arrays;\n                    }\n                    sb.append(cls.getName());\n                    while (--arrays >= 0) {\n                        sb.append(\"[]\");\n                    }\n                    /* was:\n                    String pkgName = ClassUtil.getPackageName(cls);\n                    */",
    "masked_code": "        public String getDescription() {\n            if (_desc == null) {\n                StringBuilder sb = new StringBuilder();\n\n                if (_from == null) { // can this ever occur?\n                    sb.append(\"UNKNOWN\");\n                } else {\n                    Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass();\n                    // Hmmh. Although Class.getName() is mostly ok, it does look\n                    // butt-ugly for arrays.\n                    // 06-Oct-2016, tatu: as per [databind#1403], `getSimpleName()` not so good\n                    //   as it drops enclosing class. So let's try bit different approach\n                    if (pkgName != null) {\n                        sb.append(pkgName);\n                        sb.append('.');\n                    }\n>>> [ INFILL ] <<<\n                }\n                sb.append('[');\n                if (_fieldName != null) {\n                    sb.append('\"');\n                    sb.append(_fieldName);\n                    sb.append('\"');\n                } else if (_index >= 0) {\n                    sb.append(_index);\n                } else {\n                    sb.append('?');\n                }\n                sb.append(']');\n                _desc = sb.toString();\n            }\n            return _desc;\n        }",
    "project": "JacksonDatabind",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<....databind.deser.exc.[ExceptionPathTest$]Outer[\"inner\"]> but was:<....databind.deser.exc.[]Outer[\"inner\"]>",
    "test_framework": "defects4j",
    "test_line": "            assertEquals(getClass().getName()+\"$Outer[\\\"inner\\\"]\",",
    "test_name": "testReferenceChainForInnerClass",
    "test_suite": "com.fasterxml.jackson.databind.deser.exc.ExceptionPathTest",
    "time_buggy": "2016-10-05 10:42:00 -0700",
    "time_fixed": "2016-10-06 19:27:32 -0700",
    "bug_description": "1. Bug ID \n   The issue is identified with Bug ID: 63\n\n2. Overview  \n   The bug is found in the project 'JacksonDatabind'.\n\n3. Error Message  \n   The test error message is: \n    \"junit.framework.ComparisonFailure: expected:<....databind.deser.exc.[ExceptionPathTest$]Outer[\"inner\"]> but was:<....databind.deser.exc.[]Outer[\"inner\"]>\"\n\n    This message points to a comparison failure incident where the expected output was not received, rather a different output was achieved. \n\n4. Bug Type   \n   Referring to the description, this bug would fit into the category 'SF'. \n\n5. Code snippet causing the error  \n   The Buggy lines noted are: \n            `String pkgName = com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(cls);\n            sb.append(cls.getSimpleName());`\n\n   This block of code seems to be causing the issue. The 'String pkgName' statement is attempting to fetch the package name of the input class while the next line is appending the simple name of the class under test to the existing StringBuilder object 'sb'. \n\n6. Bug Description\n   Within the function `getDescription()`, the error occurs when it attempts to simplify the class name and append it with package name. The bug is manifested in the error message indicating that an expected class name was not returned. The actual class name was missing enclosing class details, hence the 'ComparisonFailure' error was thrown by JUnit test. \n\n7. Bug Fix \n   To resolve this bug, the developer has made changes in the way class names are fetched. Instead of merely calling `getSimpleName()`, an additional while loop has been introduced to get to the deepest enclosed class if the class is an array. Also, instead of calling `getSimpleName()`, the `getName()` method has been used. Any additional array dimensions are appended to the class using the '[]' notation. Changes are also made to handle the packaging of class name.\n   \n8. Artificial bug generation\n   For future artificial bug creation, you might consider tampering with class-specific details - such as renaming class names, removing class paths, modifying array attributes or manipulating the append feature of 'StringBuilder' object used. Always ensure to run the JUnit tests after such modifications to check for arising 'ComparisonFailure' errors."
}