{
    "bug_id": 8,
    "bug_type": "SF",
    "buggy_lines": "        if (minutesOffset < 0 || minutesOffset > 59) {\n                minutesOffset = hoursInMinutes - minutesOffset;",
    "code": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        if (minutesOffset < 0 || minutesOffset > 59) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        int offset = 0;\n        try {\n            int hoursInMinutes = hoursOffset * 60;\n            if (hoursInMinutes < 0) {\n                minutesOffset = hoursInMinutes - minutesOffset;\n            } else {\n                minutesOffset = hoursInMinutes + minutesOffset;\n            }\n            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offset);\n    }",
    "fixed_code": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        if (minutesOffset < -59 || minutesOffset > 59) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n        }\n        int offset = 0;\n        try {\n            int hoursInMinutes = hoursOffset * 60;\n            if (hoursInMinutes < 0) {\n                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);\n            } else {\n                minutesOffset = hoursInMinutes + minutesOffset;\n            }\n            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offset);\n    }",
    "fixed_lines": "        if (minutesOffset < -59 || minutesOffset > 59) {\n        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n        }\n                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);",
    "masked_code": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        int offset = 0;\n        try {\n            int hoursInMinutes = hoursOffset * 60;\n            if (hoursInMinutes < 0) {\n>>> [ INFILL ] <<<\n            } else {\n                minutesOffset = hoursInMinutes + minutesOffset;\n            }\n            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offset);\n    }",
    "project": "Time",
    "test_error_message": "java.lang.IllegalArgumentException: Minutes out of range: -15",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));",
    "test_name": "testForOffsetHoursMinutes_int_int",
    "test_suite": "org.joda.time.TestDateTimeZone",
    "time_buggy": "2013-07-20 11:49:21 +0100",
    "time_fixed": "2013-07-20 11:49:21 +0100",
    "bug_description": "Bug ID: 8\nProject: Time\n\nBug Type: Semantic fault (SF) in the time conversion method of a date time solution\n\nDescription:\nThe bug lies within the function method \"forOffsetHoursMinutes\", which is supposed to convert given hours and minutes to a DateTimeZone object. The input parameters for this function are \"hoursOffset\" and \"minutesOffset\".\n\nTest Error Message: java.lang.IllegalArgumentException: Minutes out of range: -15\n\nBuggy Lines:\n                if (minutesOffset < 0 || minutesOffset > 59) {\n                    throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n                }\n                if (hoursInMinutes < 0) {\n                    minutesOffset = hoursInMinutes - minutesOffset;\n                }\n\nThe problem is in the application's ability to handle negative minutes offset. The erroneous code wrongly subtracts minutes offset from hours in minutes when the hours in minutes is less than 0, and there are no guards to ensure that negative hoursOffset does not have negative minutesOffset. \n\nThe system is not correctly validating the 'minutesOffset' from the input parameters. As per the current validation, any 'minutesOffset' less than 0 or greater than 59 is considered invalid which is correct in general context of time. However, the problem arises while handling the negative 'hoursOffset' which attempts to subtract the 'minutesOffset' from 'hoursInMinutes', which can lead to resulting 'minutesOffset' to be negatively out of range which is supposedly throwing the error.\n\nSteps to Replicate:\n1. Run the method forOffsetHoursMinutes() with parameters as below,\n      forOffsetHoursMinutes(-1, -15);\n2. The test fails throwing an IllegalArgumentException: Minutes out of range: -15 conditionally when hoursOffset is negative and minutesOffset is also negative.\n\nFixed Code Description:\nThe additional code in the fixed version introduces checks to address the issues highlighted. The method now ensures that if the hoursOffset is greater than 0, the minutesOffset should not be less than 0. This condition validates and handles the situation if positive hours have negative minutes. If the block executes, it throws an illegal Argument Exception, \"Positive hours must not have negative minutes: \" + minutesOffset. Moreover, the correction subtracts absolute value of minutesOffset from hoursInMinutes, which ensures the minutesOffset to be non-negative. \n\nIf the test: forOffsetHoursMinutes(-1, -15); is run on the fixed code, it now works without throwing IllegalArgumentException."
}