{
    "bug_id": 5,
    "bug_type": "SL SH SF",
    "buggy_lines": "            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
    "code": "    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            }\n            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }",
    "fixed_code": "    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            }\n            catch (AssertionError e) {\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }",
    "fixed_lines": "            catch (AssertionError e) {",
    "masked_code": "    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            }\n>>> [ INFILL ] <<<\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }",
    "project": "Mockito",
    "test_error_message": "junit.framework.AssertionFailedError: 'org.mockito.internal.verification.VerificationOverTimeImpl' has some dependency to JUnit",
    "test_framework": "defects4j",
    "test_line": "            throw new AssertionError(String.format(\"'%s' has some dependency to JUnit\", pureMockitoAPIClass), e);",
    "test_name": "pure_mockito_should_not_depend_JUnit",
    "test_suite": "org.mockitointegration.NoJUnitDependenciesTest",
    "time_buggy": "2015-01-04 13:44:24 +0100",
    "time_fixed": "2015-01-20 21:24:00 +0100",
    "bug_description": "Bug Description:\n\n1. Bug ID: Bug 5\n2. Project Name: Mockito\n3. Bug Type: SL SH SF (Single Line Single Hunk Single File).\n4. Test Error Message: junit.framework.AssertionFailedError: 'org.mockito.internal.verification.VerificationOverTimeImpl' has some dependency to JUnit\n5. Description of the Bug: \n   The bug is in the file 'VerificationOverTimeImpl'. The issue is that the class `org.mockito.exceptions.verification.junit.ArgumentsAreDifferent` is directly depending on the JUnit framework, which is causing the tests to fail. The error specifically comes from this block of code:\n   ```\n   catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n      error = handleVerifyException(e);\n   }\n   ```\n   The above code catches `ArgumentsAreDifferent` exception, which is JUnit specific, leading to the `AssertionFailedError`.\n\n6. Steps to Reproduce: \n    - The error is triggered when the timer is in counting mode and an exception of type `org.mockito.exceptions.verification.junit.ArgumentsAreDifferent` is thrown, caught, and then passed to the `handleVerifyException` method. \n\n7. Solution: \n   The issue was resolved by replacing the catch block with a general `AssertionError`, which can handle all kinds of assertion errors, not just the ones specific to JUnit.\n    ```\n    catch (AssertionError e) {\n       error = handleVerifyException(e);\n    }\n    ```\n    This way, the project doesn't directly depend on JUnit's `ArgumentsAreDifferent` exception and thus doesn't fail if the assertion error isn't specific to JUnit.\n\nThis update should help developers generate artificial Java bugs by showing where the failure occurs due to specific exceptions and how changing these specific exceptions to their general form can solve the issue."
}