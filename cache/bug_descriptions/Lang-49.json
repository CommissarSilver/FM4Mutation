{
    "bug_id": 49,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
    "fixed_code": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
    "fixed_lines": "        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }",
    "masked_code": "    public Fraction reduce() {\n>>> [ INFILL ] <<<\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }",
    "project": "Lang",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<1> but was:<100>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(1, result.getDenominator());",
    "test_name": "testReduce",
    "test_suite": "org.apache.commons.lang.math.FractionTest",
    "time_buggy": "2007-11-29 16:25:30 +0000",
    "time_fixed": "2007-11-29 16:25:54 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 49\n\nProject: Lang\n\nBug Type: SH SF\n\nTest Error Message: junit.framework.AssertionFailedError: expected:<1> but was:<100>\n\nDetails:\n\nThe bug appears in the reduce() method of the Fraction class within the Lang project. This method is responsible for reducing the Fraction instances to their lowest terms by finding the greatest common divisor (gcd) of the numerator and the denominator, and then dividing both the numerator and the denominator with it.\n\nIssue:\n\nThe method does not account for the scenario where the numerator is zero. A Fraction with a zero numerator signifies a 'zero' Fraction, which technically shouldn't undergo any reduction process. When such a scenario is encountered, it causes an unexpected output leading to an AssertionFailedError when running tests.\n\nBuggy Code:\n\n```\n    public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }\n```\n\nFixed Code:\n\n```\n    public Fraction reduce() {\n        if (numerator == 0) {\n            return equals(ZERO) ? this : ZERO;\n        }\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }\n```\n\nIn the fixed code, before proceeding to the gcd calculation, a condition is added to check whether the numerator is zero. If it is, the method returns the Fraction as it is if it equals 'ZERO' or returns a new Fraction instance representing 'ZERO'.\n\nThe addition of this condition ensures that the reduce() function behaves as expected in all scenarios, thus eliminating the AssertionFailedError reported in the bug."
}