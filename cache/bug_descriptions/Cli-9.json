{
    "bug_id": 9,
    "bug_type": "SF",
    "buggy_lines": "            throw new MissingOptionException(buff.toString());",
    "code": "    protected void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processsed\n        if (getRequiredOptions().size() > 0)\n        {\n            Iterator iter = getRequiredOptions().iterator();\n            StringBuffer buff = new StringBuffer(\"Missing required option\");\n            buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\n            buff.append(\": \");\n\n\n            // loop through the required options\n            while (iter.hasNext())\n            {\n                buff.append(iter.next());\n            }\n\n            throw new MissingOptionException(buff.toString());\n        }\n    }",
    "fixed_code": "    protected void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processsed\n        if (getRequiredOptions().size() > 0)\n        {\n            Iterator iter = getRequiredOptions().iterator();\n            StringBuffer buff = new StringBuffer(\"Missing required option\");\n            buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\n            buff.append(\": \");\n\n\n            // loop through the required options\n            while (iter.hasNext())\n            {\n                buff.append(iter.next());\n                buff.append(\", \");\n            }\n\n            throw new MissingOptionException(buff.substring(0, buff.length() - 2));\n        }\n    }",
    "fixed_lines": "                buff.append(\", \");\n            throw new MissingOptionException(buff.substring(0, buff.length() - 2));",
    "masked_code": "    protected void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processsed\n        if (getRequiredOptions().size() > 0)\n        {\n            Iterator iter = getRequiredOptions().iterator();\n            StringBuffer buff = new StringBuffer(\"Missing required option\");\n            buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");\n            buff.append(\": \");\n\n\n            // loop through the required options\n            while (iter.hasNext())\n            {\n                buff.append(iter.next());\n            }\n\n>>> [ INFILL ] <<<\n        }\n    }",
    "project": "Cli",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<... required options: f[, ]x> but was:<... required options: f[]x>",
    "test_framework": "defects4j",
    "test_line": "            assertEquals(\"Missing required options: f, x\", e.getMessage());",
    "test_name": "testMissingOptionsException",
    "test_suite": "org.apache.commons.cli.OptionsTest",
    "time_buggy": "2008-05-08 06:43:14 +0000",
    "time_fixed": "2008-05-08 06:56:36 +0000",
    "bug_description": "Bug ID: 9\n\nTitle: Incorrect Formatting of Required Options in MissingOptionException Message\n\nProject: Cli\n\nBug Type: Semantic Fault (SF)\n\nDescription:\n\nThe method \"checkRequiredOptions\" is intended to check for any required options not processed and throw a MissingOptionException with a detailed description of the missing options. The exception message is built by concatenating the names of the missing options. However, the format of this message is incorrect. \n\nThe error arises from the way the required option identifiers are being concatenated into the exception message. In the situation where more than one option is missing, the option identifiers are not separated by a comma and space, i.e., \", \", which leads to confusion and makes it hard to distinguish between the different missing options. \n\nThe expected error message with two missing options 'f' and 'x' should be \"Missing required options: f, x\" but the application produces \"Missing required options: fx\". This bug would apparently lead to confusion among users or developers, especially if the command line interface uses multi-character option identifiers.\n\nSteps to Reproduce:\n\n1. Instantiate the class that includes the 'checkRequiredOptions' method.\n2. Add more than one required options but do not process them.\n3. Call the 'checkRequiredOptions' method.\n\nYou should receive a MissingOptionException with the error message \"Missing required options: fx\" instead of the expected \"Missing required options: f, x\".\n\nResolution:\n\nModification was made to the 'checkRequiredOptions' method to add a comma and space separator after each appended option. After appending all options, the last two characters (which would be the last comma and space) are removed to ensure a correct format of the final message. \n\nThe error was therefore resolved and the function now throws an exception with the correctly formatted message. \n\nPlease review and close as fixed if the bug fix is deployed and the output is as expected."
}