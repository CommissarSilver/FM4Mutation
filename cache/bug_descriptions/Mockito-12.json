{
    "bug_id": 12,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public Class getGenericType(Field field) {        \n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n                return (Class) actual;\n                //in case of nested generics we don't go deep\n        }\n        \n        return Object.class;\n    }",
    "fixed_code": "    public Class getGenericType(Field field) {        \n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n            if (actual instanceof Class) {\n                return (Class) actual;\n            } else if (actual instanceof ParameterizedType) {\n                //in case of nested generics we don't go deep\n                return (Class) ((ParameterizedType) actual).getRawType();\n            }\n        }\n        \n        return Object.class;\n    }",
    "fixed_lines": "            if (actual instanceof Class) {\n            } else if (actual instanceof ParameterizedType) {\n                return (Class) ((ParameterizedType) actual).getRawType();\n            }",
    "masked_code": "    public Class getGenericType(Field field) {        \n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n                return (Class) actual;\n                //in case of nested generics we don't go deep\n>>> [ INFILL ] <<<\n        }\n        \n        return Object.class;\n    }",
    "project": "Mockito",
    "test_error_message": "java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(Set.class, m.getGenericType(field(\"nested\")));",
    "test_name": "shouldDealWithNestedGenerics",
    "test_suite": "org.mockito.internal.util.reflection.GenericMasterTest",
    "time_buggy": "2010-05-16 16:20:45 +0000",
    "time_fixed": "2010-05-16 16:21:00 +0000",
    "bug_description": "Bug ID: 12\nProject: Mockito\nBug Type: SF (Specific Function)\n\nDescription:\n\nThe bug pertains to the function `getGenericType(Field field)` in the Mockito project. The flaw is existential in the typecasting section of the code. The application crashes with a `java.lang.ClassCastException` when it tries to typecast `sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl` to `java.lang.Class`. \n\nThe Exception Message: \"java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class\"\n\nHere is the faulty line of code in detail: \n\n```java\npublic Class getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic != null && generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        return (Class) actual; // the typecast here causes the error\n    }\n    return Object.class;\n}\n```\n\nThe error arises due to the direct typecasting of the object `actual` to `Class`. The fix involves checking the instance of `actual` before making the typecast. If `actual` is of type `Class` then it is typecast to `Class` straight away. \n\nBut when `actual` is of `ParameterizedType`, the code typecasts it to `Class` by retrieving the raw type of `actual`.\n\nThe corrected code looks like this:\n\n```java\npublic Class getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic != null && generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof Class) {\n            return (Class) actual;\n        } else if (actual instanceof ParameterizedType) {\n            return (Class) ((ParameterizedType) actual).getRawType();\n        }\n    }\n    return Object.class;\n}\n```\n\nThis well-explained and straightforward check before typecasting provides a concrete solution to the bug, avoiding the `java.lang.ClassCastException`."
}