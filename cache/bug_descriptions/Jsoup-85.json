{
    "bug_id": 85,
    "bug_type": "SF",
    "buggy_lines": "        this.key = key.trim();",
    "code": "    public Attribute(String key, String val, Attributes parent) {\n        Validate.notNull(key);\n        this.key = key.trim();\n        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n        this.val = val;\n        this.parent = parent;\n    }",
    "fixed_code": "    public Attribute(String key, String val, Attributes parent) {\n        Validate.notNull(key);\n        key = key.trim();\n        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n        this.key = key;\n        this.val = val;\n        this.parent = parent;\n    }",
    "fixed_lines": "        key = key.trim();\n        this.key = key;",
    "masked_code": "    public Attribute(String key, String val, Attributes parent) {\n        Validate.notNull(key);\n        Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n>>> [ INFILL ] <<<\n        this.val = val;\n        this.parent = parent;\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: Expected exception: java.lang.IllegalArgumentException",
    "test_framework": "defects4j",
    "test_line": "",
    "test_name": "validatesKeysNotEmpty",
    "test_suite": "org.jsoup.nodes.AttributeTest",
    "time_buggy": "2018-12-22 17:17:15 -0800",
    "time_fixed": "2018-12-22 17:28:00 -0800",
    "bug_description": "Bug ID: 85\n\nProject: Jsoup\n\nBug Type: Semantic Fault (SF)\n\nError Message: junit.framework.AssertionFailedError: Expected exception: java.lang.IllegalArgumentException\n\nProblem description: \n\nIn the given \"Jsoup\" project, a Semantic Fault(SF) has been detected which causes an AssertionFailedError. The problematic code is within the \u201cAttribute\u201d constructor in which \"key\" attribute is getting trimmed before its validation for being not empty. Trimming the \"key\" attribute could potentially make it empty. However, the validation for the same is happening afterwards.\n\nThe buggy line could be isolated to: \n```java\nthis.key = key.trim();\n```\nThe code fragment where this bug has occurred:\n```java\npublic Attribute(String key, String val, Attributes parent) {\n    Validate.notNull(key);\n    this.key = key.trim();\n    Validate.notEmpty(key); // trimming could potentially make empty, so validate here\n    this.val = val;\n    this.parent = parent;\n}\n```\nIn this section of the code, the Validate.notNull(key); ensures that the \"key\" argument is not null. But immediately after this, the code trims the \"key\" and could make an originally non-empty string to be empty, and yet the \"key\" check for emptiness validates the old untrimmed \"key\" and not the new, possibly empty attribute, which leads to an AssertionFailedError.\n\nSolution:\n\nThe correct sequence would be to first trim and then validate both not null and not empty constraints against \"key\".\n\nHere is the fixed version of the code:\n```java\npublic Attribute(String key, String val, Attributes parent) {\n    key = key.trim();\n    Validate.notNull(key); // validate not null here\n    Validate.notEmpty(key); // now validate not empty here\n    this.key = key;\n    this.val = val;\n    this.parent = parent;\n}\n```\nBy first trimming the value \"key\" then validating both not-null and not-empty conditions it is guaranteed that the attribute and the condition being validated are consistent."
}