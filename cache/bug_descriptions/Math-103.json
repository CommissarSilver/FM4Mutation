{
    "bug_id": 103,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public double cumulativeProbability(double x) throws MathException {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n    }",
    "fixed_code": "    public double cumulativeProbability(double x) throws MathException {\n        try {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0.0d;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0d;\n            } else {\n                throw ex;\n            }\n        }\n    }",
    "fixed_lines": "        try {\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0.0d;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0d;\n            } else {\n                throw ex;\n            }\n        }",
    "masked_code": "    public double cumulativeProbability(double x) throws MathException {\n            return 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n>>> [ INFILL ] <<<\n    }",
    "project": "Math",
    "test_error_message": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded",
    "test_framework": "defects4j",
    "test_line": "            double lowerTail = distribution.cumulativeProbability((double)-i);",
    "test_name": "testExtremeValues",
    "test_suite": "org.apache.commons.math.distribution.NormalDistributionTest",
    "time_buggy": "2007-07-16 01:21:45 +0000",
    "time_fixed": "2007-07-22 02:33:08 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 103\nProject: Math\nBug Type: SF (Software Fault)\n\nError Message:\nDuring the testing phase, the error message shown was \"org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded\".\n\nProblem Description:\nThe project encountered an unhandled exception when trying to compute the cumulative probability. The existing code missed to manage the flow when the maximum limit of iterations exceed. The error occurred due to the function 'Erf.erf', inside 'cumulativeProbability', which doesn't have an exception handling mechanism for 'MaxIterationsExceededException'. If the iterations to compute 'Erf.erf' function goes above the maximum limit (10,000), the function throws 'MaxIterationsExceededException'. The exception breaks the program as there's no catch block to handle it.\n\nCode with Bug:\n```\n   public double cumulativeProbability(double x) throws MathException {\n       return 0.5 * (1.0 + Erf.erf((x - mean) /\n               (standardDeviation * Math.sqrt(2.0))));\n   }\n```\n\nProposed (Fixed) Code:\n```\n   public double cumulativeProbability(double x) throws MathException {\n   try {\n       return 0.5 * (1.0 + Erf.erf((x - mean) /\n               (standardDeviation * Math.sqrt(2.0))));\n   } catch (MaxIterationsExceededException ex) {\n       if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n           return 0.0d;\n       } else if (x > (mean + 20 * standardDeviation)) {\n           return 1.0d;\n       } else {\n           throw ex;\n       }\n   }\n```\n\nIn the fixed code, we tried to handle 'MaxIterationsExceededException'. If this exception caught, it checks if value 'x' is either much smaller or much larger than the expected range, defined by 'mean - 20*standardDeviation' and 'mean + 20* standardDeviation' respectively. If 'x' is out of this range, it returns 0 or 1 respectively, thinking that's the expected behaviour of real values. If 'x' is within the range and still gets 'MaxIterationsExceededException' then it re-throws the same exception, signifying there's an issue that needs to be addressed."
}