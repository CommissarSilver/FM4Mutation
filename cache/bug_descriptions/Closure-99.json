{
    "bug_id": 99,
    "bug_type": "SF",
    "buggy_lines": "          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {",
    "code": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n            return false;\n          }\n      }\n    }\n\n    return true;\n  }",
    "fixed_code": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "fixed_lines": "        if (NodeUtil.isGet(lhs)) {\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n        }",
    "masked_code": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n            return false;\n          }\n>>> [ INFILL ] <<<\n      }\n    }\n\n    return true;\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_framework": "defects4j",
    "test_line": "    test(js, null, CheckGlobalThis.GLOBAL_THIS);",
    "test_name": "testPropertyOfMethod",
    "test_suite": "com.google.javascript.jscomp.CheckGlobalThisTest",
    "time_buggy": "2010-06-04 00:31:19 +0000",
    "time_fixed": "2010-06-04 18:47:05 +0000",
    "bug_description": "Bug ID: 99\nProject: Closure\nBug Type: Semantic Fault (SF)\n\nDescription:\nThis bug results from a faulty condition in the 'shouldTraverse' method within the Closure project. This function is expected to determine whether a specific node in a JavaScript abstract syntax tree should be traversed based on specific conditions. However, due to an erroneous condition, the function unexpectedly returns false, leading to the traversal being skipped when it shouldn't be.\n\nTest Error Message:\njunit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>\n\nBug Details:\nThe problematic condition checks if the left-hand side (lhs) of an assignment operation belongs to a prototype object. For this check, the 'getQualifiedName' method is called on the lhs object, and the \".prototype\" is looked up in the resulting name. If the name contains '.prototype', the method returns false, skipping the traversal of the node. However, there are scenarios where this condition should not apply (i.e., the node should be traversed), leading to the AssertionFailedError documented above.\n\nBuggy Lines:\n  if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n    return false;\n  }\n\nCorrective Action:\nTo fix the bug, the conditional check was updated in the fix. The method 'isGet' from 'NodeUtil' class is used to validate if 'lhs' is a get property operation. Moreover, an additional check has been added that validates if the first child of 'lhs' object is getting a prototype property - if it does, the method returns false. This updated condition correctly identifies the situations where the node should not be traversed due to being a part of a prototype assignment.\n\nFixed Code:\n  if (NodeUtil.isGet(lhs)) {\n    if (lhs.getType() == Token.GETPROP &&\n        lhs.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    }\n    Node llhs = lhs.getFirstChild();\n    if (llhs.getType() == Token.GETPROP &&\n        llhs.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    }\n  }\n\nExpected Outcome:\nWith the bug fix, the 'shouldTraverse' method should now correctly identify whether a node should be traversed based on the correct interpretation of prototype assignment operations."
}