{
    "bug_id": 15,
    "bug_type": "SF",
    "buggy_lines": "            if (otherComment != null) {\n                return false;\n            }\n        } else if (!myComment.equals(otherComment)) {\n            return false;",
    "code": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        ZipArchiveEntry other = (ZipArchiveEntry) obj;\n        String myName = getName();\n        String otherName = other.getName();\n        if (myName == null) {\n            if (otherName != null) {\n                return false;\n            }\n        } else if (!myName.equals(otherName)) {\n            return false;\n        }\n        String myComment = getComment();\n        String otherComment = other.getComment();\n        if (myComment == null) {\n            if (otherComment != null) {\n                return false;\n            }\n        } else if (!myComment.equals(otherComment)) {\n            return false;\n        }\n        return getTime() == other.getTime()\n            && getInternalAttributes() == other.getInternalAttributes()\n            && getPlatform() == other.getPlatform()\n            && getExternalAttributes() == other.getExternalAttributes()\n            && getMethod() == other.getMethod()\n            && getSize() == other.getSize()\n            && getCrc() == other.getCrc()\n            && getCompressedSize() == other.getCompressedSize()\n            && Arrays.equals(getCentralDirectoryExtra(),\n                             other.getCentralDirectoryExtra())\n            && Arrays.equals(getLocalFileDataExtra(),\n                             other.getLocalFileDataExtra())\n            && gpb.equals(other.gpb);\n    }",
    "fixed_code": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        ZipArchiveEntry other = (ZipArchiveEntry) obj;\n        String myName = getName();\n        String otherName = other.getName();\n        if (myName == null) {\n            if (otherName != null) {\n                return false;\n            }\n        } else if (!myName.equals(otherName)) {\n            return false;\n        }\n        String myComment = getComment();\n        String otherComment = other.getComment();\n        if (myComment == null) {\n            myComment = \"\";\n        }\n        if (otherComment == null) {\n            otherComment = \"\";\n        }\n        return getTime() == other.getTime()\n            && myComment.equals(otherComment)\n            && getInternalAttributes() == other.getInternalAttributes()\n            && getPlatform() == other.getPlatform()\n            && getExternalAttributes() == other.getExternalAttributes()\n            && getMethod() == other.getMethod()\n            && getSize() == other.getSize()\n            && getCrc() == other.getCrc()\n            && getCompressedSize() == other.getCompressedSize()\n            && Arrays.equals(getCentralDirectoryExtra(),\n                             other.getCentralDirectoryExtra())\n            && Arrays.equals(getLocalFileDataExtra(),\n                             other.getLocalFileDataExtra())\n            && gpb.equals(other.gpb);\n    }",
    "fixed_lines": "            myComment = \"\";\n        }\n        if (otherComment == null) {\n            otherComment = \"\";\n            && myComment.equals(otherComment)",
    "masked_code": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        ZipArchiveEntry other = (ZipArchiveEntry) obj;\n        String myName = getName();\n        String otherName = other.getName();\n        if (myName == null) {\n            if (otherName != null) {\n                return false;\n            }\n        } else if (!myName.equals(otherName)) {\n            return false;\n        }\n        String myComment = getComment();\n        String otherComment = other.getComment();\n        if (myComment == null) {\n        }\n        return getTime() == other.getTime()\n>>> [ INFILL ] <<<\n            && getInternalAttributes() == other.getInternalAttributes()\n            && getPlatform() == other.getPlatform()\n            && getExternalAttributes() == other.getExternalAttributes()\n            && getMethod() == other.getMethod()\n            && getSize() == other.getSize()\n            && getCrc() == other.getCrc()\n            && getCompressedSize() == other.getCompressedSize()\n            && Arrays.equals(getCentralDirectoryExtra(),\n                             other.getCentralDirectoryExtra())\n            && Arrays.equals(getLocalFileDataExtra(),\n                             other.getLocalFileDataExtra())\n            && gpb.equals(other.gpb);\n    }",
    "project": "Compress",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<foo> but was:<foo>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(entry1, entry2);",
    "test_name": "testNullCommentEqualsEmptyComment",
    "test_suite": "org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest",
    "time_buggy": "2012-05-24 08:50:05 +0000",
    "time_fixed": "2012-06-03 15:30:31 +0000",
    "bug_description": "Bug ID: 15\nProject: Compress\nBug Type: SF (Semantic Fault)\n\nStep-by-Step Bug Description:\n\n1. In the given project \"Compress\", a bug is identified with the ID 15. The type of bug is Semantic Fault.\n\n2. The test error message provided is 'junit.framework.AssertionFailedError: expected:<foo> but was:<foo>'. This is an assertion failure, which typically occurs when the outcome of a unit test does not match the expected result.\n\n3. The bug is located in the 'equals' method of the 'ZipArchiveEntry' class. This method is used to compare the current object with the passed object and return true if they are equal.\n\n4. In the buggy lines of code,\n        if (otherComment != null) {\n            return false;\n        }\n    } else if (!myComment.equals(otherComment)) {\n        return false;\n\n   If 'myComment' variable is null and 'otherComment' is not null, the code returns false, signifying that the objects are not equal. Conversely, if 'myComment' is not null and it does not equal 'otherComment', the code also returns false.\n\n5. The problem with this code is when 'myComment' is null and 'otherComment' is also null, it should consider them as equal and should not return false. This is causing the junit assertion error as it does not handle null values effectively for 'otherComment'.\n\n6. The fixed code correctly handles the comparison of 'myComment' and 'otherComment' when they are null. The updated code assigns an empty string to 'myComment' and 'otherComment' if they are null, which enables proper comparison without throwing an error. \n   if (myComment == null) {\n        myComment = \"\";\n    }\n   if (otherComment == null) {\n        otherComment = \"\";\n    }\n\n7. Then the code includes an updated comparison in the return statement, where it just uses myComment.equals(otherComment), thus avoiding the return false result when both 'myComment' and 'otherComment' are null.\n\n8. As a result, the updated code handles null comments in a correct way and provides correct comparison results, resolving the test error 'junit.framework.AssertionFailedError: expected:<foo> but was:<foo>'.\n\nBy following these steps, developers can generate artificial Java bugs for training purposes. Just inject similar faults where null values are not correctly handled in the comparison methods. This will lead to wrong comparison results and to similar junit assertion errors."
}