{
    "bug_id": 12,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        if (start == 0 && end == 0) {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';                \n                }\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "fixed_code": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';                \n                }\n            }\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "fixed_lines": "        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n            if (chars != null) {\n                end = chars.length;\n            } else {\n            }",
    "masked_code": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        if (start == 0 && end == 0) {\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';                \n                }\n>>> [ INFILL ] <<<\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "project": "Lang",
    "test_error_message": "java.lang.ArrayIndexOutOfBoundsException: 1796252966",
    "test_framework": "defects4j",
    "test_line": "            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE",
    "test_name": "testExceptions",
    "test_suite": "org.apache.commons.lang3.RandomStringUtilsTest",
    "time_buggy": "2012-06-09 14:40:59 +0000",
    "time_fixed": "2012-06-09 14:58:34 +0000",
    "bug_description": "Bug ID: 12\nProject: Lang\nBug Type: SF (Special Function)\n\nDescription:\nThe bug occurs in the 'random' function of the Lang project. This function is intended to generate a random string of characters, with controls available to dictate the length, range, and character sets used. This bug generate an ArrayIndexOutOfBoundsException. \n\nStep-by-step bug description:\n\n1. The function starts by checking the 'count' argument, which determines the length of the string to be returned. If 'count' is zero, an empty string is returned; if it's less than zero, an IllegalArgumentException is thrown.\n\n2. The function then examines the 'start' and 'end' arguments. If both are zero (meaning the user hasn't specified a range for the characters to be drawn from), 'end' is set to either Integer.MAX_VALUE ( if both 'letters' and 'numbers' are false), or to 'z' + 1 (else the option is set 'start' to ' '). \n\n3. The code establishes a buffer array of characters with a length of 'count', and calculates the 'gap' between 'start' and 'end'. These are used to randomly choose characters for the output string.\n\n4. The function loops over 'count', decrementing it on each iteration. For each loop, a random character 'ch' is generated in the range defined by 'start' and 'gap'.\n\n5. If an array of characters 'chars' is provided, this is used to choose 'ch'; if 'chars' is null, 'ch' is simply set to the calculated random character.\n\n6. The code then checks whether 'ch' is a letter (if 'letters' is true), a number (if 'numbers' is true), or neither (if both 'letters' and 'numbers' are false). If 'ch' falls into the correct category, it's added to the 'buffer' array.\n\n7. The bug in this process is that when 'chars' array is provided but its length is zero, a java.lang.ArrayIndexOutOfBoundsException is thrown because the code attempts to access 'chars' at an index \"random.nextInt(gap) + start\" which doesn't exist. \n\n8. The exception is particularly likely when 'start' and 'end' are both zero, in which case 'end' is set to 'chars.length' (zero). Therefore, the 'gap' is also zero and results in java.lang.ArrayIndexOutOfBoundsException when trying to randomly access 'chars'.\n\nSolution in the Fixed Code:\n\n1. Additional checking is added to ensure that if a 'chars' array is provided, it's not empty.\n\n2. When 'start' and 'end' are both zero, and 'chars' is not null, 'end' is now set to 'chars.length' to cope with the range of possible characters to insert."
}