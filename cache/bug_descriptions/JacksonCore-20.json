{
    "bug_id": 20,
    "bug_type": "SH SF",
    "buggy_lines": "        throw new JsonGenerationException(\"No native support for writing embedded objects\",",
    "code": "    public void writeEmbeddedObject(Object object) throws IOException {\n        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n        throw new JsonGenerationException(\"No native support for writing embedded objects\",\n                this);\n    }",
    "fixed_code": "    public void writeEmbeddedObject(Object object) throws IOException {\n        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n        if (object == null) {\n            writeNull();\n            return;\n        }\n        if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n            return;\n        }\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n                +object.getClass().getName(),\n                this);\n    }",
    "fixed_lines": "        if (object == null) {\n            writeNull();\n            return;\n        }\n        if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n            return;\n        }\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n                +object.getClass().getName(),",
    "masked_code": "    public void writeEmbeddedObject(Object object) throws IOException {\n        // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n>>> [ INFILL ] <<<\n                this);\n    }",
    "project": "JacksonCore",
    "test_error_message": "com.fasterxml.jackson.core.JsonGenerationException: No native support for writing embedded objects",
    "test_framework": "defects4j",
    "test_line": "        g.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);",
    "test_name": "testBinaryAsEmbeddedObject",
    "test_suite": "com.fasterxml.jackson.core.base64.Base64GenerationTest",
    "time_buggy": "2016-08-31 21:16:06 -0700",
    "time_fixed": "2016-09-01 15:32:46 -0700",
    "bug_description": "Bug Description:\n\n1. Bug ID: The bug is marked with the identification number 20, unique to this bug only, allowing it to be easily tracked and cross-referenced in the bug database.\n\n2. Project: The bug occurred in the project \"JacksonCore\", which is a JSON processor in Java API.\n\n3. Bug Type: The type of bug encountered is mentioned as \"SH SF\". This is a custom classification used by testers and couldn't be readily identified here. It might represent the subcomponent of the system where the bug is happening like 'System Handler' and 'System Functionality'.\n\n4. Test Error Message: The error message returned when the bug is encountered is \"com.fasterxml.jackson.core.JsonGenerationException: No native support for writing embedded objects\". This suggests that the functionality to write embedded objects that are written in native language is not currently supported in the JacksonCore module. \n\n5. Buggy Lines: The exact line of code which is throwing the exception is provided. This piece of code is meant to handle writing an object, but is erroneously throwing a JsonGenerationException regardless of object type.\n\n6. Code: Codes here show the existing erroneous function that is unable to process and write embedded objects. The called writeEmbeddedObject function is incorrectly throwing an unchecked exception regardless of the object that's passed to it. \n\n7. Fixed Code: The correction in the bugged code is provided which shows how to handle different cases when different types of objects are passed. It first checks whether the passed object is null and then whether it is a byte array. If the object is of a different type, it throws a specific exception message specifying the type of object it cannot handle.\n   \n8. Importance of a detailed bug description: Detailed bug reports are exceptionally useful to developers and testers who need to understand exactly where the software is failing, how the bug reproduces, and what the expected behavior should be. By including all these elements and being as specific as possible, the developer can easily locate and understand the bug, and then know exactly what code to modify to fix it."
}