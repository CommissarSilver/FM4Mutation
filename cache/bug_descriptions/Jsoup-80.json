{
    "bug_id": 80,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());\n                    Element el = doc.child(0);\n                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                    insert.attributes().addAll(el.attributes());\n            }\n        }\n        insertNode(insert);\n    }",
    "fixed_code": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());\n                if (doc.childNodeSize() > 0) {\n                    Element el = doc.child(0);\n                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                    insert.attributes().addAll(el.attributes());\n                } // else, we couldn't parse it as a decl, so leave as a comment\n            }\n        }\n        insertNode(insert);\n    }",
    "fixed_lines": "                if (doc.childNodeSize() > 0) {\n                } // else, we couldn't parse it as a decl, so leave as a comment",
    "masked_code": "    void insert(Token.Comment commentToken) {\n        Comment comment = new Comment(commentToken.getData());\n        Node insert = comment;\n        if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n            // so we do a bit of a hack and parse the data as an element to pull the attributes out\n            String data = comment.getData();\n            if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());\n                    Element el = doc.child(0);\n                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n                    insert.attributes().addAll(el.attributes());\n>>> [ INFILL ] <<<\n            }\n        }\n        insertNode(insert);\n    }",
    "project": "Jsoup",
    "test_error_message": "java.lang.IndexOutOfBoundsException: Index: 0, Size: 0",
    "test_framework": "defects4j",
    "test_line": "        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());",
    "test_name": "handlesDodgyXmlDecl",
    "test_suite": "org.jsoup.parser.XmlTreeBuilderTest",
    "time_buggy": "2018-04-15 13:53:55 -0700",
    "time_fixed": "2018-04-15 14:09:14 -0700",
    "bug_description": "Bug Description:\n\n# Bug ID:\n80\n\n# Project Name:\nJsoup\n\n# Bug Type:\nSF\n\n# Bug Impact:\nThis bug leads to the Java exception 'java.lang.IndexOutOfBoundsException: Index: 0, Size: 0'. This occurs when the code tries to access a list item at an index that doesn't exist. \n\n# Description:\nThe Bug is found in the 'insert' function in the code block provided. The function is designed to insert a token comment, but the issue arises if the comment token is bogus (i.e. potentially a XML declaration). \n\nThe function tries to parse the data as an element to pull the attributes out and then attempts to access the child of 'doc', without first checking if 'doc' has any children. \n\nThis results in an IndexOutOfBoundsException when it tries to call the non-existing child node. \n\n# Buggy Code & Line:\n\n```\nElement el = doc.child(0);\n```\n\nThe line of code above is causing the bug. Trying to access the first child of a Document 'doc' without performing a check if it has any children will result in an IndexOutOfBoundsException if no children exist.\n\n# Solution:\n\nThe bug can be fixed by performing a check on 'doc' for any children before trying to access them. The fixed code segment has been provided:\n\n```javascript\n\nif (doc.childNodeSize() > 0) {\n    Element el = doc.child(0);\n    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n    insert.attributes().addAll(el.attributes());\n} \n\n```\nThe fixed code ensures that the child of the document 'doc' is only accessed when at least one child node exists. This prevents IndexOutOfBoundsException from occurring."
}