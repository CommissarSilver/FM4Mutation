{
    "bug_id": 152,
    "bug_type": "SH SF",
    "buggy_lines": "    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);",
    "code": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "fixed_code": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (maybeTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) maybeTypeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "fixed_lines": "    JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (maybeTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) maybeTypeOfThis;\n    }",
    "masked_code": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n>>> [ INFILL ] <<<\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "project": "Closure",
    "test_error_message": "java.lang.ClassCastException: com.google.javascript.rhino.jstype.StringType cannot be cast to com.google.javascript.rhino.jstype.ObjectType",
    "test_framework": "defects4j",
    "test_line": "    Scope s = makeTypeCheck().processForTesting(externsNode, n);",
    "test_name": "testBackwardsTypedefUse1",
    "test_suite": "com.google.javascript.jscomp.TypeCheckTest",
    "time_buggy": "2010-10-27 19:28:10 +0000",
    "time_fixed": "2010-10-28 02:03:31 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 152 \nProject: Closure \nBug Type: Static/structural type errors (SH SF)\n\n1. Summary of the bug: The bug generates a ClassCastException when trying to cast a StringType to an ObjectType in the 'Closure' project.\n\n2. Precondition: Not necessarily explicit, but the bug is likely to occur when `typeOfThis` is of StringType rather than ObjectType.\n\n3. Steps to reproduce:\n   - Invoke the `resolveInternal` function with valid parameters: an ErrorReporter instance and a StaticScope instance consisting of JSType elements.\n   - Within this function, the `safeResolve` method is used to resolve the `typeOfThis` variable presumably which is represented as a StringType rather than an ObjectType.\n   - On the faulty line, typeOfThis` is forcefully casted to an ObjectType which contradicts its original type (StringType) and thus throws a ClassCastException.\n\n4. Actual Results: A ClassCastException occurs due to trying to cast a `typeOfThis` (StringType) to an ObjectType.\n\n5. Expected Results: The expectation is that `typeOfThis` should be resolved safely and if it is an instance of an ObjectType, then it should be cast to ObjectType without any errors.\n\n6. Post-condition: The developer has inserted code to ensure that the object can only be cast if `typeOfThis` returns true for an instanceof `ObjectType`. This prevents any ClassCastException from being thrown.\n\nThe fixed code now introduces a check for the instance type of `maybeTypeOfThis`, and only if it verifies as an `ObjectType`, will it be cast and assigned to `typeOfThis`. This approach prevents the ClassCastException. \n\nFor artificial bug generation purposes, the key steps would involve creating a situation where an object of a specific type is forcefully and incorrectly cast to a different type, leading to a ClassCastException. The fix would involve checking the instance of the object before casting it."
}