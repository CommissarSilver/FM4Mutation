{
    "bug_id": 7,
    "bug_type": "SF",
    "buggy_lines": "        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;",
    "code": "    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n          // Objects are restricted to \"Function\", subtypes are left\n          // Only filter out subtypes of \"function\"\n      }\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "fixed_code": "    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (resultEqualsValue) {\n          // Objects are restricted to \"Function\", subtypes are left\n          return ctorType.getGreatestSubtype(type);\n        } else {\n          // Only filter out subtypes of \"function\"\n          return type.isSubtype(ctorType) ? null : type;\n        }\n      }\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "fixed_lines": "        if (resultEqualsValue) {\n          return ctorType.getGreatestSubtype(type);\n        } else {\n          return type.isSubtype(ctorType) ? null : type;\n        }",
    "masked_code": "    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n          // Objects are restricted to \"Function\", subtypes are left\n          // Only filter out subtypes of \"function\"\n>>> [ INFILL ] <<<\n      }\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError: Expected: (Object|boolean|number|string)",
    "test_framework": "defects4j",
    "test_line": "    Asserts.assertTypeEquals(",
    "test_name": "testGoogIsFunction2",
    "test_suite": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
    "time_buggy": "2012-10-16 22:17:22 +0000",
    "time_fixed": "2012-10-17 15:53:59 +0000",
    "bug_description": "Bug ID: 7\nBug Type: Semantic Fault (SF)\n\nTitle: \nUnexpected return value in the \"caseObjectType\" method\n\nDescription:\nAn error has been identified in the \"caseObjectType\" method in the Closure project. The junit test throws an \"junit.framework.AssertionFailedError\" error because the expected output should be an Object, Boolean, Number, or String type, but it appears the code is giving a different result.  \n\nSteps to Reproduce:\n1. Call the 'caseObjectType' method with an 'ObjectType' type object.\n2. The issue arises in the following condition 'value.equals(\"function\")'. In the next line, a 'JSType' object named 'ctorType' is created by calling 'getNativeType(U2U_CONSTRUCTOR_TYPE)'.\n3. After this, the bug triggers with the expression 'return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null'. When 'resultEqualsValue' is true and the object 'ctorType' is a subtype of 'type', then 'ctorType' should be returned.\n4. The problem here seems to be that if the condition does not apply, instead of returning 'null', it should return 'type'. This was not correctly implemented in this line and therefore returned the result as 'null'. \n\nExpected Behavior:\nThe function should return either a subtype or the type passed as a parameter, depending on whether the 'U2U_CONSTRUCTOR_TYPE' is a subtype of the input 'type'. If these conditions are not met, the default behavior should be to return the passed in 'type', not 'null'.\n\nActual Behavior:\nThe function is incorrectly returning 'null' when 'U2U_CONSTRUCTOR_TYPE' is not a subtype of the input 'type'. \n\nVariables Involved:\nvalue, U2U_CONSTRUCTOR_TYPE, resultEqualsValue, type, ctorType. \n\nSolution:\nThe error code was corrected by adding an if-else condition that executes 'ctorType.getGreatestSubtype(type)' if the 'resultEqualsValue' variable is 'true' and 'type.isSubtype(ctorType) ? null : type;' if false. This allows the function to return the correct value, rather than 'null'."
}