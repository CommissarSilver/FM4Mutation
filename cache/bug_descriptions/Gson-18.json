{
    "bug_id": 18,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "  static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {\n      // wildcards are useless for resolving supertypes. As the upper bound has the same raw type, use it instead\n    checkArgument(supertype.isAssignableFrom(contextRawType));\n    return resolve(context, contextRawType,\n        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n  }",
    "fixed_code": "  static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {\n    if (context instanceof WildcardType) {\n      // wildcards are useless for resolving supertypes. As the upper bound has the same raw type, use it instead\n      context = ((WildcardType)context).getUpperBounds()[0];\n    }\n    checkArgument(supertype.isAssignableFrom(contextRawType));\n    return resolve(context, contextRawType,\n        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n  }",
    "fixed_lines": "    if (context instanceof WildcardType) {\n      context = ((WildcardType)context).getUpperBounds()[0];\n    }",
    "masked_code": "  static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {\n      // wildcards are useless for resolving supertypes. As the upper bound has the same raw type, use it instead\n>>> [ INFILL ] <<<\n    checkArgument(supertype.isAssignableFrom(contextRawType));\n    return resolve(context, contextRawType,\n        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n  }",
    "project": "Gson",
    "test_error_message": "java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.google.gson.functional.CollectionTest$SmallClass",
    "test_framework": "defects4j",
    "test_line": "",
    "test_name": "testIssue1107",
    "test_suite": "com.google.gson.functional.CollectionTest",
    "time_buggy": "2017-09-20 18:53:10 -0700",
    "time_fixed": "2017-09-21 17:50:41 -0700",
    "bug_description": "Bug Title: ClassCastException in the getSupertype method of Gson project\n\nBug ID: 18\nProject: Gson\nBug Type: Software Failure (SF)\n\nDetailed Description:\nThe issue here is with the getSupertype method in the Gson project. This method is expected to handle different types appropriately, but it was found to be failing while dealing with instances of WildcardType - a kind of Type subtype.\n\nThe problem can be seen in the corresponding error message:\n\"java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.google.gson.functional.CollectionTest$SmallClass\"\n\nThis indicates that the application tried to cast an instance of LinkedTreeMap to CollectionTest$SmallClass, which is not permissible in Java, hence, leading to a ClassCastException.\n\nThe buggy code is as follows:\n```\nstatic Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {\n      // wildcards are useless for resolving supertypes. As the upper bound has the same raw type, use it instead\n    checkArgument(supertype.isAssignableFrom(contextRawType));\n    return resolve(context, contextRawType,$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}\n```\n\nUpon reviewing the problematic code, it was found that it was lacking a condition check to handle the WildcardType instances.\n\nHere is the corrected code:\n```\nstatic Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {\n    if (context instanceof WildcardType) {\n      // wildcards are useless for resolving supertypes. As the upper bound has the same raw type, use it instead\n      context = ((WildcardType)context).getUpperBounds()[0];\n    }\n    checkArgument(supertype.isAssignableFrom(contextRawType));\n    return resolve(context, contextRawType,\n        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}\n```\n\nIn the corrected code, an additional condition was introduced to check whether the Type instance ('context') is of WildcardType. If so, it reassigns 'context' to the upper bound of the WildcardType. This handles the scenario causing the failure, removing the ClassCastException."
}