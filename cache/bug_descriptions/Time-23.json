{
    "bug_id": 23,
    "bug_type": "SF",
    "buggy_lines": "            map.put(\"IET\", \"America/Indianapolis\");\n            map.put(\"AGT\", \"America/Buenos_Aires\");\n            map.put(\"WET\", \"Europe/London\");\n            map.put(\"ECT\", \"Europe/Paris\");\n            map.put(\"EET\", \"Europe/Bucharest\");\n            map.put(\"MET\", \"Asia/Tehran\");\n            map.put(\"IST\", \"Asia/Calcutta\");\n            map.put(\"VST\", \"Asia/Saigon\");",
    "code": "    private static synchronized String getConvertedId(String id) {\n        Map<String, String> map = cZoneIdConversion;\n        if (map == null) {\n            // Backwards compatibility with TimeZone.\n            map = new HashMap<String, String>();\n            map.put(\"GMT\", \"UTC\");\n            map.put(\"MIT\", \"Pacific/Apia\");\n            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n            map.put(\"AST\", \"America/Anchorage\");\n            map.put(\"PST\", \"America/Los_Angeles\");\n            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n            map.put(\"PNT\", \"America/Phoenix\");\n            map.put(\"CST\", \"America/Chicago\");\n            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n            map.put(\"IET\", \"America/Indianapolis\");\n            map.put(\"PRT\", \"America/Puerto_Rico\");\n            map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"AGT\", \"America/Buenos_Aires\");\n            map.put(\"BET\", \"America/Sao_Paulo\");\n            map.put(\"WET\", \"Europe/London\");\n            map.put(\"ECT\", \"Europe/Paris\");\n            map.put(\"ART\", \"Africa/Cairo\");\n            map.put(\"CAT\", \"Africa/Harare\");\n            map.put(\"EET\", \"Europe/Bucharest\");\n            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n            map.put(\"MET\", \"Asia/Tehran\");\n            map.put(\"NET\", \"Asia/Yerevan\");\n            map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"IST\", \"Asia/Calcutta\");\n            map.put(\"BST\", \"Asia/Dhaka\");\n            map.put(\"VST\", \"Asia/Saigon\");\n            map.put(\"CTT\", \"Asia/Shanghai\");\n            map.put(\"JST\", \"Asia/Tokyo\");\n            map.put(\"ACT\", \"Australia/Darwin\");\n            map.put(\"AET\", \"Australia/Sydney\");\n            map.put(\"SST\", \"Pacific/Guadalcanal\");\n            map.put(\"NST\", \"Pacific/Auckland\");\n            cZoneIdConversion = map;\n        }\n        return map.get(id);\n    }",
    "fixed_code": "    private static synchronized String getConvertedId(String id) {\n        Map<String, String> map = cZoneIdConversion;\n        if (map == null) {\n            // Backwards compatibility with TimeZone.\n            map = new HashMap<String, String>();\n            map.put(\"GMT\", \"UTC\");\n            map.put(\"WET\", \"WET\");\n            map.put(\"CET\", \"CET\");\n            map.put(\"MET\", \"CET\");\n            map.put(\"ECT\", \"CET\");\n            map.put(\"EET\", \"EET\");\n            map.put(\"MIT\", \"Pacific/Apia\");\n            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n            map.put(\"AST\", \"America/Anchorage\");\n            map.put(\"PST\", \"America/Los_Angeles\");\n            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n            map.put(\"PNT\", \"America/Phoenix\");\n            map.put(\"CST\", \"America/Chicago\");\n            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n            map.put(\"IET\", \"America/Indiana/Indianapolis\");\n            map.put(\"PRT\", \"America/Puerto_Rico\");\n            map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n            map.put(\"BET\", \"America/Sao_Paulo\");\n            map.put(\"ART\", \"Africa/Cairo\");\n            map.put(\"CAT\", \"Africa/Harare\");\n            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n            map.put(\"NET\", \"Asia/Yerevan\");\n            map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"IST\", \"Asia/Kolkata\");\n            map.put(\"BST\", \"Asia/Dhaka\");\n            map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n            map.put(\"CTT\", \"Asia/Shanghai\");\n            map.put(\"JST\", \"Asia/Tokyo\");\n            map.put(\"ACT\", \"Australia/Darwin\");\n            map.put(\"AET\", \"Australia/Sydney\");\n            map.put(\"SST\", \"Pacific/Guadalcanal\");\n            map.put(\"NST\", \"Pacific/Auckland\");\n            cZoneIdConversion = map;\n        }\n        return map.get(id);\n    }",
    "fixed_lines": "            map.put(\"IET\", \"America/Indiana/Indianapolis\");\n            map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n            map.put(\"IST\", \"Asia/Kolkata\");\n            map.put(\"VST\", \"Asia/Ho_Chi_Minh\");",
    "masked_code": "    private static synchronized String getConvertedId(String id) {\n        Map<String, String> map = cZoneIdConversion;\n        if (map == null) {\n            // Backwards compatibility with TimeZone.\n            map = new HashMap<String, String>();\n            map.put(\"GMT\", \"UTC\");\n            map.put(\"MIT\", \"Pacific/Apia\");\n            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n            map.put(\"AST\", \"America/Anchorage\");\n            map.put(\"PST\", \"America/Los_Angeles\");\n            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n            map.put(\"PNT\", \"America/Phoenix\");\n            map.put(\"CST\", \"America/Chicago\");\n            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n            map.put(\"PRT\", \"America/Puerto_Rico\");\n            map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"BET\", \"America/Sao_Paulo\");\n            map.put(\"ART\", \"Africa/Cairo\");\n            map.put(\"CAT\", \"Africa/Harare\");\n            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n            map.put(\"NET\", \"Asia/Yerevan\");\n            map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"BST\", \"Asia/Dhaka\");\n>>> [ INFILL ] <<<\n            map.put(\"CTT\", \"Asia/Shanghai\");\n            map.put(\"JST\", \"Asia/Tokyo\");\n            map.put(\"ACT\", \"Australia/Darwin\");\n            map.put(\"AET\", \"Australia/Sydney\");\n            map.put(\"SST\", \"Pacific/Guadalcanal\");\n            map.put(\"NST\", \"Pacific/Auckland\");\n            cZoneIdConversion = map;\n        }\n        return map.get(id);\n    }",
    "project": "Time",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/London]>",
    "test_framework": "defects4j",
    "test_line": "            assertEquals(value, zone.getID());",
    "test_name": "testForID_String_old",
    "test_suite": "org.joda.time.TestDateTimeZone",
    "time_buggy": "2011-03-18 09:03:22 +0000",
    "time_fixed": "2011-03-31 23:46:38 +0000",
    "bug_description": "Bug ID: 23\n\nTitle: Expected return value inconsistency in the method getConvertedId(String id)\n\nProject: Time\n\nBug Type: Semantic Fault (SF)\n\nDescription:\n- The bug is present in a Java-based software project called \"Time\". The project uses this part of the code to associate the input string id (representing various time zone abbreviations) to the corresponding full name of the time zone.\n- The buggy code resides within the 'getConvertedId' method which is used to convert abbreviated time zone IDs into their full form. \n- However, the bug occurs when the time zone id 'WET' is passed to the method. The expectation is the method should return 'WET'.\n- Instead, the 'getConvertedId' method is currently returning 'Europe/London' when 'WET' is passed as an argument, as shown in the test error message: \"junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/London]>\". This causes a semantic discrepancy, thus resulting in a semantic fault. This discrepancy, in practical use, can lead to confusion and potentially critical errors downstream in the program execution. \n\nSteps to reproduce:\n- Call the 'getConvertedId' method with the argument 'WET'.\n- The return value of this method would be 'Europe/London' instead of the expected return value 'WET'.\n\nSolution:\n- The fix applied in the fixed code involved changing the mapping for certain keys in the hashmap. Specifically, the mapping for \"WET\" was changed from \"Europe/London\" to \"WET\". \n- Further adjustments were also made to the mappings of the keys \"CET\", \"MET\", \"ECT\", \"EET\", and \"IST\" among others to correspond with the actual time zone ids rather than the locations.\n- This appears to fix the semantic fault by making it so 'getConvertedId' now returns the correct string based on the input time zone id."
}