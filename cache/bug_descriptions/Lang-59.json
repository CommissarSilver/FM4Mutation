{
    "bug_id": 59,
    "bug_type": "SL SH SF",
    "buggy_lines": "                str.getChars(0, strLen, buffer, size);",
    "code": "    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(0, strLen, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n                }\n            }\n            size += width;\n        }\n        return this;\n    }",
    "fixed_code": "    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(0, width, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n                }\n            }\n            size += width;\n        }\n        return this;\n    }",
    "fixed_lines": "                str.getChars(0, width, buffer, size);",
    "masked_code": "    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n>>> [ INFILL ] <<<\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n                }\n            }\n            size += width;\n        }\n        return this;\n    }",
    "project": "Lang",
    "test_error_message": "java.lang.ArrayIndexOutOfBoundsException",
    "test_framework": "defects4j",
    "test_line": "        sb.appendFixedWidthPadRight(\"foo\", 1, '-');",
    "test_name": "testLang299",
    "test_suite": "org.apache.commons.lang.text.StrBuilderAppendInsertTest",
    "time_buggy": "2006-12-12 22:11:41 +0000",
    "time_fixed": "2006-12-12 22:34:39 +0000",
    "bug_description": "Bug Description:\n\n1. Bug ID is 59. This bug was found in the Lang project.\n\n2. The bug type is SL SH SF, which stands for Software Logic, Software Hardware, and Software Failure. It indicates that the bug was the result of both software issues, and hardware failing to follow the software's logic.\n\n3. The Test Error Message is 'java.lang.ArrayIndexOutOfBoundsException'. The Java Runtime throws this exception to indicate that the application attempted to access an array index beyond the size of the array.\n\n4. The buggy lines included 'str.getChars(0, strLen, buffer, size);', which triggered the exception because the code tries to get characters from a string and put it into an array beyond its capacity.\n\n5. In the original code, the method appendFixedWidthPadRight(Object obj, int width, char padChar) tries to add a fixed width padding to the right of the input object 'obj'. In the case when the length of the object after being converted to a string is larger than or equal to the width specified, instead of getting only 'width' number of characters, it tries to get 'strLen' characters, which can be larger than the width, thus potentially causing an ArrayIndexOutOfBoundsException.\n\n6. The fix for this bug was to change the second parameter of str.getChars() in the if statement from strLen to width. \n\n7. The fixed code ensures that it gets the correct number of characters, which is equivalent to the width provided in the input. \n\n8. This way, it never tries to store more characters than the buffer size, preventing any potential ArrayIndexOutOfBoundsException in the future.\n\nTo reproduce this bug:\n\n1. Call the method appendFixedWidthPadRight with an object that converts to a string of length larger than the width value provided.\n2. A java.lang.ArrayIndexOutOfBoundsException would be thrown because of trying to access an array index beyond the array limit. \n\nTo generate artificial Java bugs similar to this, developers can manipulate the boundary conditions of array or string operations such as exceeding array length or causing a null pointer exception with strings."
}