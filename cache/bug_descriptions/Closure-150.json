{
    "bug_id": 150,
    "bug_type": "SH SF",
    "buggy_lines": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "code": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "fixed_code": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      super.visit(t, n, parent);\n    }",
    "fixed_lines": "      super.visit(t, n, parent);",
    "masked_code": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n>>> [ INFILL ] <<<\n    }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "    assertTrue(goog.hasProperty(\"foo\"));",
    "test_name": "testNamespacedFunctionStubLocal",
    "test_suite": "com.google.javascript.jscomp.TypedScopeCreatorTest",
    "time_buggy": "2010-09-13 20:29:49 +0000",
    "time_fixed": "2010-09-14 00:41:11 +0000",
    "bug_description": "Bug ID: 150\n\nProject: Closure\n\nBug Type: Semantic/Syntactic Bug (SH SF)\n\nFile: Unknown \n\nMethod: Visit\n\nBug Detail:\n\nThe bug was found in the method 'visit' where an attempted switch case operation on 'n.getType()' seems to have outputted an error. The relevant test returned an error message of type 'junit.framework.AssertionFailedError'.\n\nThe error seems to be connected to the attachLiteralTypes(n) method call and the failure of an attempted switch case operation on n.getType() that followed. The case operations include Token.FUNCTION, Token.CATCH and Token.VAR. This potentially suggests that the getType() method is failing to return a valid value which is then leading to a failure when trying to match the returned value to one of the case operations. \n\nThe current implementation attempts to evaluate the type of the token, performs some checks depending on the token type, and invokes code blocks accordingly. However the AssertionFailedError shows that one of these operations is not working as expected.\n\nFixed Code:\n\nThe fixed code has seen a significant rewrite. It seems the initial code complexity was reduced drastically. Instead of evaluating the Type and operating switch-case statements for result input, the method super.visit(t, n, parent) has been called.\n\nThe process to reproduce:\n\nTo generate artificial bugs of this type, one could insert additional case operations that are not handled by the Token type. Another approach could involve tampering with the return value of the n.getType() method to produce unexpected outputs. Also, removing or altering the super.visit(t, n, parent) line in the fixed code may also reproduce the issue. \n\nNote:\n\nAs the bug's source file and exact location is not provided, it's hard to be more specific without the larger context and without being able to see how 'visit', 'handleFunctionInputs', 'defineDeclaredFunction', 'defineCatch' and 'defineVar' methods work. Also the actual output or symptoms of the bug are not provided."
}