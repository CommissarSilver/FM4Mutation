{
    "bug_id": 42,
    "bug_type": "SF",
    "buggy_lines": "            char c = str.charAt(i);\n                if (c > 0x7F) {",
    "code": "    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }",
    "fixed_code": "    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            int c = Character.codePointAt(str, i); \n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c >= 0x010000 && i < len - 1) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                    i++;\n                } else if (c > 0x7F) { \n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }",
    "fixed_lines": "            int c = Character.codePointAt(str, i); \n                if (c >= 0x010000 && i < len - 1) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                    i++;\n                } else if (c > 0x7F) { ",
    "masked_code": "    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n>>> [ INFILL ] <<<\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }",
    "project": "Lang",
    "test_error_message": "junit.framework.ComparisonFailure: High unicode was not escaped correctly expected:<&#[119650];> but was:<&#[55348;&#57186];>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals( \"High unicode was not escaped correctly\", \"&#119650;\", escaped);",
    "test_name": "testEscapeHtmlHighUnicode",
    "test_suite": "org.apache.commons.lang.StringEscapeUtilsTest",
    "time_buggy": "2009-01-29 22:00:55 +0000",
    "time_fixed": "2009-03-01 20:54:40 +0000",
    "bug_description": "Bug ID: 42\n\nProject: Lang\n\nBug Type: Software Fail (SF)\n\nTitle: Incorrect Escaping of High Unicode \n\nDetail:\nIn the \"Lang\" project's \"escape\" method, when given a string containing high unicode characters and asked to escape it, it fails to correctly interpret and escape high unicode characters.\n\nThe existing logic incorrectly identifies high unicode characters. It reads each character of a string using the \"charAt\" method but fails to provide the correct unicode for the characters that require more than 16 bits.\n\nThe error occurs at the following lines of code:\n            char c = str.charAt(i);\n            if (c > 0x7F) {\n\nThe error message received from the unit tests is: \"junit.framework.ComparisonFailure: High unicode was not escaped correctly expected:<&#[119650];> but was:<&#[55348;&#57186];>\"\nThis error message comes from a test case that expects high unicode characters to be escaped correctly, but the output received does not match the expected output.\n\nTo fix this issue, characters are now read using the \"Character.codePointAt\" method. This method correctly identifies individual characters, even those that require more than 16 bits. It also correctly ignores the second surrogate pair of characters when identifying a high unicode character. The fixed method has two \"if\" conditions for writing the unicode. The first \"if\" condition checks if the character requires two positions (high unicode), and if so, it writes the character and increments the index \"i\". The second condition behaves as before, writing the unicode for a single character.\n\nNow, the corrected code correctly escapes high unicode characters. Unit tests validate this correction. The fixed lines of code are:\n            int c = Character.codePointAt(str, i); \n            if (c >= 0x010000 && i < len - 1) {\n                i++;\n                .....\n                  \nOverall, the misinterpretation of the \"charAt()\" method caused this bug. High unicode characters need more than 16 bits, and Java's \"charAt()\" function only returns a 16-bit character. To solve this issue, the \"Character.codePointAt()\" method was used, which correctly interprets high unicode characters. And an appropriate condition was added to check high unicode characters, which resolved the bug. This fix has also been validated via running unit tests."
}