{
    "bug_id": 11,
    "bug_type": "SL SH SF",
    "buggy_lines": "",
    "code": "    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }",
    "fixed_code": "    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n      case STRING:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }",
    "fixed_lines": "      case STRING:",
    "masked_code": "    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n>>> [ INFILL ] <<<\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }",
    "project": "Gson",
    "test_error_message": "com.google.gson.JsonSyntaxException: Expecting number, got: STRING",
    "test_framework": "defects4j",
    "test_line": "    Number value = gson.fromJson(\"\\\"18\\\"\", Number.class);",
    "test_name": "testNumberAsStringDeserialization",
    "test_suite": "com.google.gson.functional.PrimitiveTest",
    "time_buggy": "2016-11-14 21:21:24 -0800",
    "time_fixed": "2016-11-25 23:40:14 -0800",
    "bug_description": "Bug Description:\n\nBug ID: 11\nProject: Gson\nBug Type: SL SH SF (Single Line, Single Hunk, Single File)\n\nIssue:\nThe code is throwing a JsonSyntaxException error when it encounters a string while expecting a number. The error message \"com.google.gson.JsonSyntaxException: Expecting number, got: STRING\" suggests that the code does not have a case to handle string inputs.\n\nCause:\nReviewing the initial code under the 'read' function, we find that it can only process NULL and NUMBER JsonToken types. When it encounters a STRING type, it throws a JsonSyntaxException as it is not handled explicitly in the code.\n\nInitial Code Snippet:\n\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n\nFix:\nTo resolve this bug, we need to add a case for STRING JsonToken type in the switch statement. By doing so, it can now correctly handle STRING type input without throwing the exception.\n\nFixed Code Snippet:\n\n    public Number read(JsonReader in) throws IOException {\n      JsonToken jsonToken = in.peek();\n      switch (jsonToken) {\n      case NULL:\n        in.nextNull();\n        return null;\n      case NUMBER:\n      case STRING:\n        return new LazilyParsedNumber(in.nextString());\n      default:\n        throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n      }\n    }\n\nThe bug fix involves modifying a single line, hence the bug type SL (Single Line). The fix is also only applied to a single 'hunk' or continuous lines of code in the same function, giving it the hunk type of SH (Single Hunk). Finally, the bug is found in one file only, hence the file type SF (Single File)."
}