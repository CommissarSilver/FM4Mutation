{
    "bug_id": 59,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "        final void newAttribute() {\n            if (attributes == null)\n                attributes = new Attributes();\n\n            if (pendingAttributeName != null) {\n                // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n                pendingAttributeName = pendingAttributeName.trim();\n                    Attribute attribute;\n                    if (hasPendingAttributeValue)\n                        attribute = new Attribute(pendingAttributeName,\n                            pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n                    else if (hasEmptyAttributeValue)\n                        attribute = new Attribute(pendingAttributeName, \"\");\n                    else\n                        attribute = new BooleanAttribute(pendingAttributeName);\n                    attributes.put(attribute);\n            }\n            pendingAttributeName = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n        }",
    "fixed_code": "        final void newAttribute() {\n            if (attributes == null)\n                attributes = new Attributes();\n\n            if (pendingAttributeName != null) {\n                // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n                pendingAttributeName = pendingAttributeName.trim();\n                if (pendingAttributeName.length() > 0) {\n                    Attribute attribute;\n                    if (hasPendingAttributeValue)\n                        attribute = new Attribute(pendingAttributeName,\n                            pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n                    else if (hasEmptyAttributeValue)\n                        attribute = new Attribute(pendingAttributeName, \"\");\n                    else\n                        attribute = new BooleanAttribute(pendingAttributeName);\n                    attributes.put(attribute);\n                }\n            }\n            pendingAttributeName = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n        }",
    "fixed_lines": "                }",
    "masked_code": "        final void newAttribute() {\n            if (attributes == null)\n                attributes = new Attributes();\n\n            if (pendingAttributeName != null) {\n                // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n                pendingAttributeName = pendingAttributeName.trim();\n                    Attribute attribute;\n                    if (hasPendingAttributeValue)\n                        attribute = new Attribute(pendingAttributeName,\n                            pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n                    else if (hasEmptyAttributeValue)\n                        attribute = new Attribute(pendingAttributeName, \"\");\n                    else\n                        attribute = new BooleanAttribute(pendingAttributeName);\n                    attributes.put(attribute);\n>>> [ INFILL ] <<<\n            }\n            pendingAttributeName = null;\n            hasEmptyAttributeValue = false;\n            hasPendingAttributeValue = false;\n            reset(pendingAttributeValue);\n            pendingAttributeValueS = null;\n        }",
    "project": "Jsoup",
    "test_error_message": "java.lang.IllegalArgumentException: String must not be empty",
    "test_framework": "defects4j",
    "test_line": "        Document doc = Jsoup.parse(\"<p><a \\06=foo>One</a><a/\\06=bar><a foo\\06=bar>Two</a></p>\");",
    "test_name": "handlesControlCodeInAttributeName",
    "test_suite": "org.jsoup.parser.HtmlParserTest",
    "time_buggy": "2017-01-05 13:10:55 -0800",
    "time_fixed": "2017-01-05 15:07:29 -0800",
    "bug_description": "Bug ID: 59\n\nTitle: IllegalArgumentException for Empty String Input\n\nBug Type: SF (Software Fault)\n\nComponent: Jsoup\n\nSeverity: High\n\nDescription:\n\nIn the Jsoup project, a method named 'newAttribute()' is throwing IllegalArgumentException with the error message: \"String must not be empty\". The root cause of this issue is that the function accepts empty strings as valid, but it is not supposed to, as per the domain logic. This results in the failure of other dependent modules or methods that consume the output of 'newAttribute()' method.\n\nTo reproduce this bug, follow the steps below:\n\nStep 1: Call the 'newAttribute()' method with an empty string as the 'key' argument. This will trigger the underlying 'Attribute' class constructor.\nStep 2: The 'Attribute' class constructor would not conduct a proper check for the emptiness of the string before further processing, thus creating the attribute with an empty name.\nStep 3: When this attribute is later accessed or used, an IllegalArgumentException with the message \"String must not be empty\" would be thrown.\n\nHere, the issue in the code lies in this block:\n\n    if (pendingAttributeName != null) {\n        pendingAttributeName = pendingAttributeName.trim();\n        Attribute attribute;\n            if (hasPendingAttributeValue)\n                attribute = new Attribute(pendingAttributeName,\n                     pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n            else if (hasEmptyAttributeValue)\n                attribute = new Attribute(pendingAttributeName, \"\");\n            else\n                attribute = new BooleanAttribute(pendingAttributeName);\n            attributes.put(attribute);\n    }\n\nHere, the 'pendingAttributeName' is trimmed and directly used to create 'Attribute' without checking if this results in an empty string. As a result, an attribute with an empty name is created and added, which causes the IllegalArgumentException.\n\nThe fixed code introduced an additional check for the 'pendingAttributeName'. Here is how it is handled in the fixed code:\n\n    if (pendingAttributeName != null) {\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            Attribute attribute;\n            if (hasPendingAttributeValue)\n                attribute = new Attribute(pendingAttributeName, pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS);\n            else if (hasEmptyAttributeValue)\n                attribute = new Attribute(pendingAttributeName, \"\");\n            else\n                attribute = new BooleanAttribute(pendingAttributeName);\n            attributes.put(attribute);\n        }\n    }\n\nThis fix works because now, the 'Attribute' instance will only be created and added if 'pendingAttributeName' is not empty after trimming, thereby preventing the IllegalArgumentException."
}