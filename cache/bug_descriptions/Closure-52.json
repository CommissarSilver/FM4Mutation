{
    "bug_id": 52,
    "bug_type": "SL SH SF",
    "buggy_lines": "    return len > 0;",
    "code": "  static boolean isSimpleNumber(String s) {\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c < '0' || c > '9') {\n        return false;\n      }\n    }\n    return len > 0;\n  }",
    "fixed_code": "  static boolean isSimpleNumber(String s) {\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c < '0' || c > '9') {\n        return false;\n      }\n    }\n    return len > 0 && s.charAt(0) != '0';\n  }",
    "fixed_lines": "    return len > 0 && s.charAt(0) != '0';",
    "masked_code": "  static boolean isSimpleNumber(String s) {\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c < '0' || c > '9') {\n        return false;\n      }\n    }\n>>> [ INFILL ] <<<\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<var x={[\"010\"]:1}> but was:<var x={[10]:1}>",
    "test_framework": "defects4j",
    "test_line": "    assertEquals(expected,",
    "test_name": "testNumericKeys",
    "test_suite": "com.google.javascript.jscomp.CodePrinterTest",
    "time_buggy": "2011-10-04 23:40:27 +0000",
    "time_fixed": "2011-10-05 01:25:00 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 52\nProject: Closure\nBug Type: SL SH SF (SL - Single Line, SH - Single Hunk, SF - Single File)\n\nBug Detail:\n\nThe error is rooted in an issue related to the 'isSimpleNumber()' function in the 'Closure' project. The function, designed to check if a given string 's' is a simple number, behaves erroneously for string inputs beginning with '0' (zero). It does not consider the scenario where numbers can start with a '0', thus leading to a discrepancy.\n\nThe current code was returning true not just for simple numbers but also for those starting with a zero, which was incorrect. This led to a JUnit test failure with the following error message: \"expected:<var x={[\"010\"]:1}> but was:<var x={[10]:1}>\". The function was expected to handle String representations of simple numbers, including those starting with '0'.\n\nIn the return statement of the function 'return len > 0;', the current code was only checking if the string length was greater than 0. It was not verifying whether the first digit was '0', which indeed was a bug.\n\nAfter debugging, a fixing condition was added in the function to check whether the first character of the string is '0'. The fixed code 'return len > 0 && s.charAt(0) != '0';' ensures that it would not only check for non-empty strings but also for strings not starting with '0'.\n\nStep-by-step description:\n\nStep 1: The function 'isSimpleNumber(String s)' is called with a string of numbers, possibly having prefix '0'.\n\nStep 2: Inside the function, the length of the incoming string is determined and stored in 'len'.\n\nStep 3: A for-loop is initiated, starting from the first character, traversing till the last character of the string (using the 'len' variable).\n\nStep 4: Inside the loop, each character is checked for whether it falls out of the range '0' to '9'. If yes, the function immediately returns false.\n\nStep 5: If no, the loop continues for all digits. \n\nStep 6: In the original buggy code, once the loop concludes, it only checked if the string length is greater than 0. However, in the fixed code, it additionally verifies if the string's first character is not '0'.\n\nThis bug is for developers who aim to generate artificial bugs in Java to tackle issues related to String and Number conversions. This bug shows a common oversight where numbers starting with '0' are not appropriately handled."
}