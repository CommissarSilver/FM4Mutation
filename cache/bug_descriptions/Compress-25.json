{
    "bug_id": 25,
    "bug_type": "SL SH SF",
    "buggy_lines": "",
    "code": "    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        in = new PushbackInputStream(inputStream, buf.capacity());\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n    }",
    "fixed_code": "    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        in = new PushbackInputStream(inputStream, buf.capacity());\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n        buf.limit(0);\n    }",
    "fixed_lines": "        buf.limit(0);",
    "masked_code": "    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        in = new PushbackInputStream(inputStream, buf.capacity());\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n>>> [ INFILL ] <<<\n    }",
    "project": "Compress",
    "test_error_message": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<100> but was:<0>",
    "test_framework": "defects4j",
    "test_line": "            assertArrayEquals(new byte[] {'d', 'a', 't', 'a', '\\n'},",
    "test_name": "testReadingOfFirstStoredEntry",
    "test_suite": "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest",
    "time_buggy": "2014-02-21 13:30:53 +0000",
    "time_fixed": "2014-02-21 14:21:12 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 25\n\nProject: Compress\n\nBug Type: System-Level (SL), System-Level in special hardware (SH), and System-Level in special format (SF)\n\n1. Summary: \n\n    The bug is about a failure in one of the unit tests in the Compress project. The issue arises when creating a new ZipArchiveInputStream object. The system fails asserting the array elements in this process, where an expected value is mismatched. The expected value is 100, but the returned value is 0 at the [0] index of the array.\n\n2. Precondition:\n\n    An InputStream, a String for encoding, a Boolean for useUnicodeExtraFields, and another Boolean for allowStoredEntriesWithDataDescriptor are required for creating a new instance of ZipArchiveInputStream, along with a buffer capacity in PushbackInputStream. \n\n3. Steps to Reproduce:\n\n    - Instantiate a InputStream.\n    - Define a String for encoding.\n    - Set boolean values for useUnicodeExtraFields and allowStoredEntriesWithDataDescriptor.\n    - Invoke the constructor of ZipArchiveInputStream with the instantiated InputStream, the String for encoding, and the boolean values.\n    - Within this constructor, an instance of PushbackInputStream is created with the InputStream and buffer capacity applied.\n    - Then the buffer limit is checked.\n\n4. Expected Result:\n\n    The constructor should successfully create a ZipArchiveInputStream instance without AssertionFailedError. The first element of the array should have been 100 as expected in the test.\n\n5. Actual Result:\n\n    An AssertionFailedError is thrown. Arrays are first differed at an element [0]; expected value was <100>, but actual was <0>.\n\n6. Solution:\n\n    In the fixed code, we can see that just after the 'haven't read anything so far' comment, the buffer limit was set to 0: buf.limit(0). This line of code appears to resolve the issue by setting the buffer to its starting position. Thus, the AssertionFailedError no longer occurs.\n\n7. Postcondition:\n\n    The constructor of ZipArchiveInputStream should execute without any AssertionFailedError. The actual array at element [0] should now match the expected value of <100> in the unit test. The issue appears, therefore, to have been resolved."
}