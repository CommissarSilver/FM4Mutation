{
    "bug_id": 62,
    "bug_type": "SL SH SF",
    "buggy_lines": "          && 0 <= charno && charno < sourceExcerpt.length()) {",
    "code": "  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno == sourceExpert.length() means something is missing\n      // at the end of the line\n      if (excerpt.equals(LINE)\n          && 0 <= charno && charno < sourceExcerpt.length()) {\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n  }",
    "fixed_code": "  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno == sourceExpert.length() means something is missing\n      // at the end of the line\n      if (excerpt.equals(LINE)\n          && 0 <= charno && charno <= sourceExcerpt.length()) {\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n  }",
    "fixed_lines": "          && 0 <= charno && charno <= sourceExcerpt.length()) {",
    "masked_code": "  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno == sourceExpert.length() means something is missing\n      // at the end of the line\n      if (excerpt.equals(LINE)\n>>> [ INFILL ] <<<\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<...ion here",
    "test_framework": "defects4j",
    "test_line": "    assertEquals(\"javascript/complex.js:1: ERROR - error description here\\n\" +",
    "test_name": "testFormatErrorSpaceEndOfLine1",
    "test_suite": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
    "time_buggy": "2011-06-28 01:47:01 +0000",
    "time_fixed": "2011-06-28 17:08:53 +0000",
    "bug_description": "Bug ID: 62\nProject Name: Closure\n\nBug Type: SL SH SF (Single-line, single-hunk, syntactic fault). \n\nStep 1: Overview\nThe particular bug found existing in the project Closure with the defined Bug ID(62). It is a term essentially used in the coding space where there is a non-equivalence between the programmer's realization of the requirements and what they have implemented, in other words, a fault created in the syntactic line(s) of the program.\n\nStep 2: Error Discussion\nThe issue was encountered in the 'format' method of the erroneous program. The conditional statement that checks if the variable 'charno' falls within a certain range is flawed. The flawed logic was that it allowed 'charno' to be less than the length of the 'sourceExcerpt', but not be equal to the length, this was causing the junit.framework.ComparisonFailure error. \n\nStep 3: Bug Location\nThe issue lies in the conditional statement:\n\n```java\nif (excerpt.equals(LINE) && 0 <= charno && charno < sourceExcerpt.length())\n```\n\nThis conditional statement resides within the 'format' method of the 'Closure' class. It is used to check whether the variable 'charno' is less than the size of 'sourceExcerpt'. \n\nStep 4: Bug Fix\nThe bug fix involved a small change in the aforementioned conditional statement:\n\n```java\nif (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length())\n```\nThe 'charno' variable should be allowed to equal to the length of 'sourceExcerpt', since Java arrays are 0 indexed.\n\nThis bug fix allows the 'charno' integer variable to be either less than or equal to the length of 'sourceExcerpt', preventing the array out-of-bounds exception and successfully completing the method's succeeding operations without any issues.\n\nIn conclusion, small changes like these can reflect in a big way on the functioning of the entire program, therefore it underlines the importance of writing code with careful and precise logic."
}