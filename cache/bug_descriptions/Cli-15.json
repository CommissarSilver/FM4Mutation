{
    "bug_id": 15,
    "bug_type": "SF",
    "buggy_lines": "        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = defaultValues;\n        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = (List) this.defaultValues.get(option);\n        }",
    "code": "    public List getValues(final Option option,\n                          List defaultValues) {\n        // initialize the return list\n        List valueList = (List) values.get(option);\n\n        // grab the correct default values\n        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = defaultValues;\n        }\n\n        // augment the list with the default values\n        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = (List) this.defaultValues.get(option);\n        }\n                // if there are more default values as specified, add them to\n                // the list.\n                    // copy the list first\n        \n        return valueList == null ? Collections.EMPTY_LIST : valueList;\n    }",
    "fixed_code": "    public List getValues(final Option option,\n                          List defaultValues) {\n        // initialize the return list\n        List valueList = (List) values.get(option);\n\n        // grab the correct default values\n        if (defaultValues == null || defaultValues.isEmpty()) {\n            defaultValues = (List) this.defaultValues.get(option);\n        }\n\n        // augment the list with the default values\n        if (defaultValues != null && !defaultValues.isEmpty()) {\n            if (valueList == null || valueList.isEmpty()) {\n                valueList = defaultValues;\n            } else {\n                // if there are more default values as specified, add them to\n                // the list.\n                if (defaultValues.size() > valueList.size()) {\n                    // copy the list first\n                    valueList = new ArrayList(valueList);\n                    for (int i=valueList.size(); i<defaultValues.size(); i++) {\n                        valueList.add(defaultValues.get(i));\n                    }\n                }\n            }\n        }\n        \n        return valueList == null ? Collections.EMPTY_LIST : valueList;\n    }",
    "fixed_lines": "        if (defaultValues == null || defaultValues.isEmpty()) {\n            defaultValues = (List) this.defaultValues.get(option);\n        if (defaultValues != null && !defaultValues.isEmpty()) {\n            if (valueList == null || valueList.isEmpty()) {\n                valueList = defaultValues;\n            } else {\n                if (defaultValues.size() > valueList.size()) {\n                    valueList = new ArrayList(valueList);\n                    for (int i=valueList.size(); i<defaultValues.size(); i++) {\n                        valueList.add(defaultValues.get(i));\n                    }\n                }\n            }\n        }",
    "masked_code": "    public List getValues(final Option option,\n                          List defaultValues) {\n        // initialize the return list\n        List valueList = (List) values.get(option);\n\n        // grab the correct default values\n        }\n\n        // augment the list with the default values\n                // if there are more default values as specified, add them to\n                // the list.\n                    // copy the list first\n>>> [ INFILL ] <<<\n        \n        return valueList == null ? Collections.EMPTY_LIST : valueList;\n    }",
    "project": "Cli",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<[1[, 1000]]> but was:<[1[]]>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"[\" + enteredValue1 + \", 1000]\", b + \"\");",
    "test_name": "testSingleOptionSingleArgument",
    "test_suite": "org.apache.commons.cli2.bug.BugCLI158Test",
    "time_buggy": "2008-07-23 20:09:05 +0000",
    "time_fixed": "2008-07-24 19:38:04 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 15\n\nProject: Cli\n\nBug Type: Semantic Fault (SF)\n\nThe identified bug is found on the Cli project. The bug consists of a semantic error where incorrect logic and operations occur during the process of checking and augmenting default values to a list (\"valueList\") in the \"getValues\" method.\n\n1. Test Error Message: junit.framework.ComparisonFailure: expected:<[1[, 1000]]> but was:<[1[]]>\n   - This error message implies that the obtained outcome was an array with only one value when it was expected to have the values 1 and 1000.\n\n2. Buggy Lines: \n\n        if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n        if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n\n   The faulty logic inside the \"getValues\" method is identified in these lines of code. Firstly, the code checks whether the \"valueList\" is null or empty. If it is, it then assigns \"defaultValues\" to \"valueList\". Afterward, it still repeats the same check on \"valueList\" and not \"defaultValues\". This repetition serves no purpose as \"valueList\" was just assigned \"defaultValues\" and it can both be null or empty at times.\n\n3. Fixed Code: \n    \nIn the fixed code, the bug was addressed by revising the logic and operations. Instead of checking the state of \"valueList\" twice, the fixed code checks the \"defaultValues\" first. If \"defaultValues\" is not null and not empty, the condition of \"valueList\" is checked. If \"valueList\" is either null or empty, it is assigned with \"defaultValues\". If it is not, and the size of \"defaultValues\" is greater than \"valueList\", the values in \"defaultValues\" are combined to \"valueList\" starting from its size until the end of \"defaultValues\". This change in logic and operations successfully fixed the error and met the expected output."
}