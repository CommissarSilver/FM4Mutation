{
    "bug_id": 4,
    "bug_type": "SF",
    "buggy_lines": "        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));",
    "code": "    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        // Let's grow by 50% by default\n        final int len = curr.length;\n        // but above intended maximum, slow to increase by 25%\n        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "fixed_code": "    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        // Let's grow by 50% by default\n        final int len = curr.length;\n        int newLen = len + (len >> 1);\n        // but above intended maximum, slow to increase by 25%\n        if (newLen > MAX_SEGMENT_LEN) {\n            newLen = len + (len >> 2);\n        }\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "fixed_lines": "        int newLen = len + (len >> 1);\n        if (newLen > MAX_SEGMENT_LEN) {\n            newLen = len + (len >> 2);\n        }",
    "masked_code": "    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        // Let's grow by 50% by default\n        final int len = curr.length;\n        // but above intended maximum, slow to increase by 25%\n>>> [ INFILL ] <<<\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "project": "JacksonCore",
    "test_error_message": "junit.framework.AssertionFailedError: Expected buffer of 262145 to expand, did not, length now 262144",
    "test_framework": "defects4j",
    "test_line": "                  fail(\"Expected buffer of \"+old.length+\" to expand, did not, length now \"+buf.length);",
    "test_name": "testExpand",
    "test_suite": "com.fasterxml.jackson.core.util.TestTextBuffer",
    "time_buggy": "2014-09-24 20:07:10 -0700",
    "time_fixed": "2014-09-24 20:12:47 -0700",
    "bug_description": "Bug Description:\n\nThe issue is associated with Bug ID: 4 in the JacksonCore project. The error encountered is of type SF and was identified during a unit test with an error message indicating an assertion failure due to a buffer not expanding as expected.\n\nSteps to Reproduce:\n\n1. The problematic code is contained within the `expandCurrentSegment()` method.\n2. In this method, the current segment of an array named `curr` is established, and its length is obtained, held in the `len` variable.\n3. Following this, a new length, `newLen`, was calculated based on a conditional ternary operation. When the existing length (`len`) equals to a pre-defined `MAX_SEGMENT_LEN`, `newLen` is set to be `MAX_SEGMENT_LEN+1`; otherwise, `newLen` would be the minimum between `MAX_SEGMENT_LEN` and `len + (len >> 1)`. Here `(len >> 1)` is a bit operation that essentially divides `len` by 2.\n4. The method returns a new current segment, which is a copy of the initial `curr` array, but with the modified length defined by `newLen`.\n\nObserved Result:\n\njunit.framework.AssertionFailedError occurred, with an error message indicating that the expected buffer of 262145 (presumably `MAX_SEGMENT_LEN+1`) did not expand as expected and the length is now 262144.\n\nExpected Result:\n\nThe buffer should have expanded to accommodate the specified size of 262145.\n\nFix:\n\nIn the fixed code, the new length `newLen` is directly calculated to be `len + (len >> 1)`, increasing the current size by 50%. However, if `newLen` resulting from this operation exceeds `MAX_SEGMENT_LEN`, it is recalculated to be `len + (len >> 2)`, which corresponds to a 25% increase of the current size. The rest of the code remains the same.\n\nThe bug was therefore in the incorrect implementation of logic to calculate `newLen` where the ternary operator did not correctly account for the buffer's maximum length. The fix involves properly checking for exceeding the maximum length and adjusting the buffer's size growth rate accordingly."
}