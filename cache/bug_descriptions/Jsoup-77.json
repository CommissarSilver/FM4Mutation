{
    "bug_id": 77,
    "bug_type": "SL SH SF",
    "buggy_lines": "        String elName = endTag.name();",
    "code": "    private void popStackToClose(Token.EndTag endTag) {\n        String elName = endTag.name();\n        Element firstFound = null;\n\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                firstFound = next;\n                break;\n            }\n        }\n        if (firstFound == null)\n            return; // not found, skip\n\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            stack.remove(pos);\n            if (next == firstFound)\n                break;\n        }\n    }",
    "fixed_code": "    private void popStackToClose(Token.EndTag endTag) {\n        String elName = endTag.normalName();\n        Element firstFound = null;\n\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                firstFound = next;\n                break;\n            }\n        }\n        if (firstFound == null)\n            return; // not found, skip\n\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            stack.remove(pos);\n            if (next == firstFound)\n                break;\n        }\n    }",
    "fixed_lines": "        String elName = endTag.normalName();",
    "masked_code": "    private void popStackToClose(Token.EndTag endTag) {\n>>> [ INFILL ] <<<\n        Element firstFound = null;\n\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                firstFound = next;\n                break;\n            }\n        }\n        if (firstFound == null)\n            return; // not found, skip\n\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element next = stack.get(pos);\n            stack.remove(pos);\n            if (next == firstFound)\n                break;\n        }\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<<div>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"<div>\\n test\\n</div>\\n<p></p>\", document.html());",
    "test_name": "normalizesDiscordantTags",
    "test_suite": "org.jsoup.parser.XmlTreeBuilderTest",
    "time_buggy": "2017-12-21 18:36:16 -0800",
    "time_fixed": "2017-12-22 10:25:08 -0800",
    "bug_description": "Bug ID: 77\nProject Name: Jsoup\nBug Type: SLSH SF\n\nBug Summary:\nWithin the Jsoup project, Bug ID 77 is an issue in the String 'elName = endTag.name()' line under the 'popStackToClose()' method. The bug relates to a misinterpretation of the method 'name()' from the 'endTag' object, which was expected to provide the correct name for the 'elName' string. However, it actually returned an incorrect or invalid value, provoking an assertion failure in a unit test.\n\nDescription:\n\nStep 1:\nA unit test is conducted where an element's name is retrieved and then compared with an expected value. The test returns an 'AssertionFailedError' upon checking the result of endTag.name(). \n\nStep 2:\nThe 'endTag.name()' method call is investigated. The method, part of the 'Token.EndTag' object, is expected to return the name of the end tag of an HTML element.\n\nStep 3:\nIn the code 'String elName = endTag.name();', endTag.name() is expected to fetch the name of the end tag, and assign it to the String 'elName'.\n\nStep 4:\nHowever, the test error shows that 'elName' does not contain the expected name, resulting in an AssertionFailedError.\n\nBug Fix:\n\nThe bug was fixed by replacing 'endTag.name()' with 'endTag.normalName()'. This change ensures the name is normalized, which is more consistent with the internal handling of tag names in Jsoup.\n\nSo, the corrected line of code is 'String elName = endTag.normalName();', to prevent the AssertionFailedError. \n\nRecommendation:\nTo avoid such errors, it is suggested to always use normalized methods when dealing with HTML tags. By doing so, it becomes possible to mitigate the inherent inconsistencies in HTML, such as case sensitivity issues, leading to more robust and predictable software."
}