{
    "bug_id": 11,
    "bug_type": "SL SH SF",
    "buggy_lines": "        PathIterator iterator2 = p1.getPathIterator(null);",
    "code": "    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p1.getPathIterator(null);\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }",
    "fixed_code": "    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null);\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }",
    "fixed_lines": "        PathIterator iterator2 = p2.getPathIterator(null);",
    "masked_code": "    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n>>> [ INFILL ] <<<\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }",
    "project": "Chart",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "        assertFalse(ShapeUtilities.equal(g1, g2));",
    "test_name": "testEqualGeneralPaths",
    "test_suite": "org.jfree.chart.util.junit.ShapeUtilitiesTests",
    "time_buggy": "2008-06-02 00:13:23 -0700 ",
    "time_fixed": "2008-06-02 00:27:30 -0700 ",
    "bug_description": "Bug Title: Incorrect object reference in 'equal' method of 'Chart' project\n\nBug ID: 11\nProject Name: Chart\nBug Type: Semantic Bug\n\nBug Description:\n\nIn the 'Chart' project, the method named 'equal' contained a structural issue which led to failures during junit tests. The 'equal' method aims to determine if two 'GeneralPath' objects, 'p1' and 'p2', are equal. However, due to a coding error, an incorrect object, 'p1', is referenced twice instead of appropriately referencing both 'p1' and 'p2'.\n\nSteps to reproduce:\n\n1. Create two 'GeneralPath' objects 'p1' and 'p2'.\n2. Invoke the 'equal' method with 'p1' and 'p2' as arguments.\n3. Observe that the 'equal' method incorrectly uses the 'p1' object twice when it initializes 'PathIterator' instances 'iterator1' and 'iterator2'.\n\nProblematic Code:\n\n```java\nPathIterator iterator1 = p1.getPathIterator(null);\nPathIterator iterator2 = p1.getPathIterator(null);\n```\n\nHere, 'iterator2' should be created with 'p2.getPathIterator(null)', but 'p1' is incorrectly used, causing the method to operate on a duplicate reference.\n\nTest Error Message: junit.framework.AssertionFailedError\n\nThe error manifests as an 'AssertionFailedError' in Junit tests, indicating that an assertion statement in a test has failed because the 'equal' method is not behaving as intended due to the aforementioned bug.\n\nFixed Code:\n\n```java\nPathIterator iterator1 = p1.getPathIterator(null);\nPathIterator iterator2 = p2.getPathIterator(null);\n```\n\nThe issued was resolved by correctly initializing 'iterator2' with the 'getPathIterator(null)' method called on 'p2', not 'p1'. This ensures 'iterator2' correctly references 'p2', allowing the 'equal' method to accurately compare the intended objects, which lead to the resolution of 'AssertionFailedError' in Junit tests."
}