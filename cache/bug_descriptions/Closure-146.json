{
    "bug_id": 146,
    "bug_type": "SH SF",
    "buggy_lines": "        return new TypePair(null, null);",
    "code": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "fixed_code": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        JSType noType = getNativeType(JSTypeNative.NO_TYPE);\n        return new TypePair(noType, noType);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "fixed_lines": "        JSType noType = getNativeType(JSTypeNative.NO_TYPE);\n        return new TypePair(noType, noType);",
    "masked_code": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n>>> [ INFILL ] <<<\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<None> but was:<undefined>",
    "test_framework": "defects4j",
    "test_line": "      assertEquals(p.type, getVarType(informedFalse, p.name));",
    "test_name": "testEqCondition4",
    "test_suite": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
    "time_buggy": "2010-07-03 21:03:00 +0000",
    "time_fixed": "2010-07-07 22:14:18 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 146 is raised in the project 'Closure'. The bug type is classified as 'SH SF'. The error message received during the testing phase was 'junit.framework.AssertionFailedError: expected:<None> but was:<undefined>'. This error is a result of a failed assertion statement where the test expected a 'None' value but it got an 'undefined' value instead.\n\nReview of Code:\n\nThe initial review of the buggy code provides some vital insights into the problem.\n\nThe bug appears in the 'getTypesUnderInequality' function of the JSType class. In this function, an 'UnionType' object, 'that', is passed as a parameter. It will return an instance of the 'TypePair' class based on the evaluation of the 'testForEquality' function:\n\n1. If 'that' instance is an instance of 'UnionType', then the function invokes 'getTypesUnderInequality' function of 'that' object and creates a new 'TypePair' with swapped types (p.typeB, p.typeA).\n\n2. If 'that' is not an instance of 'UnionType', then depending upon the output of the 'testForEquality' function, one of the cases from TRUE, FALSE or UNKNOWN is executed.\n\nThe buggy line here is `return new TypePair(null, null);` under the TRUE case. Here, it creates a new 'TypePair' with `null` as both types. This 'null' seems to be producing the 'undefined' error (as per the test error message).\n\nBug Fix:\n\nThe fixed code correctly creates a new instance of 'TypePair' under the TRUE case. Instead of populating both types with `null`, it now populates it with 'noType' (`JSType noType = getNativeType(JSTypeNative.NO_TYPE);`). This 'noType' is expected to be the equivalent representation of a 'None' type in the JSType class. Therefore, this appears to be the correct value to be expected (as per the initial test error message).\n\nHence, developer intending to reproduce this bug should introduce a similar incorrect assignment where a 'None' type is expected but an 'undefined' type is given (in this case using a `null` value) in a function or method execution. Then, an assertion test should be executed with an expectation of the 'None' type which will fail, creating a similar bug."
}