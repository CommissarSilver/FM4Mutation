{
    "bug_id": 68,
    "bug_type": "SH SF",
    "buggy_lines": "        int bottom = stack.size() -1;\n        if (bottom > MaxScopeSearchDepth) {\n            bottom = MaxScopeSearchDepth;\n        }",
    "code": "    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope\n        int bottom = stack.size() -1;\n        if (bottom > MaxScopeSearchDepth) {\n            bottom = MaxScopeSearchDepth;\n        }\n        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;\n        // don't walk too far up the tree\n\n        for (int pos = bottom; pos >= top; pos--) {\n            final String elName = stack.get(pos).nodeName();\n            if (inSorted(elName, targetNames))\n                return true;\n            if (inSorted(elName, baseTypes))\n                return false;\n            if (extraTypes != null && inSorted(elName, extraTypes))\n                return false;\n        }\n        //Validate.fail(\"Should not be reachable\"); // would end up false because hitting 'html' at root (basetypes)\n        return false;\n    }",
    "fixed_code": "    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope\n        final int bottom = stack.size() -1;\n        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;\n        // don't walk too far up the tree\n\n        for (int pos = bottom; pos >= top; pos--) {\n            final String elName = stack.get(pos).nodeName();\n            if (inSorted(elName, targetNames))\n                return true;\n            if (inSorted(elName, baseTypes))\n                return false;\n            if (extraTypes != null && inSorted(elName, extraTypes))\n                return false;\n        }\n        //Validate.fail(\"Should not be reachable\"); // would end up false because hitting 'html' at root (basetypes)\n        return false;\n    }",
    "fixed_lines": "        final int bottom = stack.size() -1;",
    "masked_code": "    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope\n>>> [ INFILL ] <<<\n        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;\n        // don't walk too far up the tree\n\n        for (int pos = bottom; pos >= top; pos--) {\n            final String elName = stack.get(pos).nodeName();\n            if (inSorted(elName, targetNames))\n                return true;\n            if (inSorted(elName, baseTypes))\n                return false;\n            if (extraTypes != null && inSorted(elName, extraTypes))\n                return false;\n        }\n        //Validate.fail(\"Should not be reachable\"); // would end up false because hitting 'html' at root (basetypes)\n        return false;\n    }",
    "project": "Jsoup",
    "test_error_message": "java.lang.StackOverflowError",
    "test_framework": "defects4j",
    "test_line": "            final String elName = stack.get(pos).nodeName();",
    "test_name": "testHandlesDeepSpans",
    "test_suite": "org.jsoup.parser.HtmlParserTest",
    "time_buggy": "2017-11-04 18:11:21 -0700",
    "time_fixed": "2017-11-06 22:28:56 -0800",
    "bug_description": "Bug ID: 68\nProject: Jsoup\nBug Type: Stack height short fall (SH SF)\nTest Error Message: java.lang.StackOverflowError\n\nBug Description: The buggy code is located within the method `inSpecificScope()` in the Jsoup project. The bug that occurs in this instance is a Stack height short fall (SH SF), which is causing a StackOverflowError.\n\nStep-by-step Details:\n\n1. In the `inSpecificScope()` method, an integer `bottom` is created which is equal to the stack size minus one.\n\n2. In the next line, if the `bottom` value is greater than `MaxScopeSearchDepth`, `bottom` is assigned the value of `MaxScopeSearchDepth`.\n\n3. The `bottom` value is later used to set the `top` value and also used in the loop.\n\n4. This line is problematic because it's possible to assign a bigger value to `bottom` which exceeds the existing stack size, which could be causing the StackOverflowError. \n\n5. This is even more of an issue when the `bottom` value is used to access an element at a position from the stack, where `pos` is potentially more than the stack's size. It will attempt to access memory which it shouldn't be accessing, therefore causing the stack overflow error.\n\n6. In the fixed code, the value for `bottom` is set as `stack.size() - 1` and does not change. This ensures that the maximum value `pos` can take is permissible within the stack's range preventing a stack overflow.\n\nRecommendations for generating artificial java bugs:\n\n- To recreate a similar bug, create an artificial instance where the size of an array or stack is exceeded or allocate a very large number within the stack memory.\n  \n- As an opposite example, limit the array or stack allocation to a very small size, then try to insert more elements than its capacity to trigger a StackOverflowError."
}