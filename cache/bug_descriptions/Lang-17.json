{
    "bug_id": 17,
    "bug_type": "SF",
    "buggy_lines": "        int len = Character.codePointCount(input, 0, input.length());\n            else {\n                    if (pos < len - 2) {\n                    } else {\n                        pos++;\n                    }\n                }\n                pos--;\n            pos++;",
    "code": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = Character.codePointCount(input, 0, input.length());\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n            }\n            else {\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                    if (pos < len - 2) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n                    } else {\n                        pos++;\n                    }\n                }\n                pos--;\n            }\n            pos++;\n        }\n    }",
    "fixed_code": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos+= c.length;\n                continue;\n            }\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n        }\n    }",
    "fixed_lines": "        int len = input.length();\n                pos+= c.length;\n                continue;",
    "masked_code": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n            }\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n>>> [ INFILL ] <<<\n        }\n    }",
    "project": "Lang",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<\ud842\udfb7[A]> but was:<\ud842\udfb7[?]>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(input, escaped);",
    "test_name": "testLang720",
    "test_suite": "org.apache.commons.lang3.StringEscapeUtilsTest",
    "time_buggy": "2011-07-14 04:43:15 +0000",
    "time_fixed": "2011-07-14 18:49:51 +0000",
    "bug_description": "Bug ID: 17\nProject: Lang\nBug Type: Semantic Fault (SF)\n\nDetailed Bug Description:\n\n1. Bug Location: \n\nThe bug is located in the 'translate' method under the package 'lang' of the project. This method is intended to translate a given input string and write it to a provided writer, Unknown Character is transformed to '?'. \n\n2. Error Message:\n\nThe reported error message is a comparison failure found in the unit tests which suggests that an expected output of '\ud842\udfb7[A]' was instead returned as '\ud842\udfb7[?]', indicating a possible issue in the translation of certain characters. \n\n3. Buggy Code Explanation:\n\n    a. A conditional statement checks whether the given 'pos' value is less than (length of input string - 2) which causes the 'pos' variable to increase based on Character's code point at the 'pos' index of input.\n\n    b. If the above condition does not meet, then the code simple increases the 'pos' variable by one.\n\n    c. There is an extra step where the 'pos' variable is decreased after coming out from the loop which should not be required here.\n\n    d. The main issue arises with the definition of len variable which uses \u2018Character.codePointCount(input, 0, input.length())\u2019 instead of simple \u2018input.length()\u2019. \n\n4. Fix:\n\nIn the fixed version of the code, there are few changes:\n\n    a. The 'len' is defined as the length of the input string received in the method.\n    \n    b. If 'consumed' equals zero, the 'pos' variable increment by the length of 'c' and then we continue to the next iteration.\n\n    c. The unnecessary increment and decrement of the 'pos' variable has been removed which resolves the confusion and the logical error while incrementing the 'pos' variable.\n\nThe fix resolved the bug and as per the test case mentioned, the method now returns the expected output for the given input."
}