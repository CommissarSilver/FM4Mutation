{
    "bug_id": 93,
    "bug_type": "SL SH SF",
    "buggy_lines": "",
    "code": "    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "fixed_code": "    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (type.equalsIgnoreCase(\"button\")) continue; // browsers don't submit these\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "fixed_lines": "            if (type.equalsIgnoreCase(\"button\")) continue; // browsers don't submit these",
    "masked_code": "    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n>>> [ INFILL ] <<<\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<6> but was:<7>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(6, data.size());",
    "test_name": "createsFormData",
    "test_suite": "org.jsoup.nodes.FormElementTest",
    "time_buggy": "2019-07-04 15:31:18 -0700",
    "time_fixed": "2019-07-04 15:54:14 -0700",
    "bug_description": "Bug Description:\n\nBug ID: 93\nProject: Jsoup\nBug Type: SL SH SF (Single Line, Single Hunk and Single File)\n\n- Location of Bug:\n  The bug is located in the `formData()` method in the Jsoup project. \n\n- Description of the Problem:\n  The method is supposed to iterate over the form control elements (based on elements class) and store their values in an ArrayList named `data`. The current implementation fails to correctly handle the form control elements of the type 'button'. This causes the software to add more elements to `data` than expected, leading to a discrepancy in the number of form control elements.\n\n- Expected versus Actual Result:\n  The failure case is due to expecting <6> but returned <7> form elements. The expectation was that the 'button' type form control elements would be skipped, but the existing faulty code adds these elements to the ArrayList `data` regardless. \n\n- Detailed steps of the Problem:\n   1. The method formData() is called.\n   2. The elements of the form are iterated over.\n   3. For each element, the code checks if the element is not form submittable, if it has the disabled attribute, or if its name.length is 0. If any of these cases are true, the element is skipped.\n   4. For each remaining element, the code checks the element type.\n   5. If the element type is 'select', the method adds the selected options to the arrayList 'data'.\n   6. If the element type is 'checkbox' or 'radio' and they have the checked attribute, the method adds these to 'data'.\n   7. If the element type does not fall into the previous categories, it is also added to 'data'.\n   8. Finally, the method returns 'data'. The problem is that the method also adds 'button' type form control elements to 'data', which should not be the case.\n\n- Provided Solution:\n  This bug is fixed by ignoring the 'button' type form control elements, as most commonly browsers do not submit these. A specific if condition has been introduced to skip form control elements of the type 'button', thus eliminating the extra elements that were causing the AssertionFailedError."
}