{
    "bug_id": 97,
    "bug_type": "SF",
    "buggy_lines": "        if (sign >= 0) {\n        } else {",
    "code": "    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // check if either value is close to a zero\n                // neither value is close to zero and min and max do not bracket root.\n                throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            // solve using only the first endpoint as initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n            // either min or max is a root\n        }\n\n        return ret;\n    }",
    "fixed_code": "    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign > 0) {\n            // check if either value is close to a zero\n            if (Math.abs(yMin) <= functionValueAccuracy) {\n                setResult(min, 0);\n                ret = min;\n            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n                setResult(max, 0);\n                ret = max;\n            } else {\n                // neither value is close to zero and min and max do not bracket root.\n                throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n            }\n        } else if (sign < 0){\n            // solve using only the first endpoint as initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n        } else {\n            // either min or max is a root\n            if (yMin == 0.0) {\n                ret = min;\n            } else {\n                ret = max;\n            }\n        }\n\n        return ret;\n    }",
    "fixed_lines": "        if (sign > 0) {\n            if (Math.abs(yMin) <= functionValueAccuracy) {\n                setResult(min, 0);\n                ret = min;\n            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n                setResult(max, 0);\n                ret = max;\n            } else {\n            }\n        } else if (sign < 0){\n        } else {\n            if (yMin == 0.0) {\n                ret = min;\n            } else {\n                ret = max;\n            }",
    "masked_code": "    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Verify bracketing\n        double sign = yMin * yMax;\n            // check if either value is close to a zero\n                // neither value is close to zero and min and max do not bracket root.\n                throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n            // solve using only the first endpoint as initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n            // either min or max is a root\n>>> [ INFILL ] <<<\n        }\n\n        return ret;\n    }",
    "project": "Math",
    "test_error_message": "java.lang.IllegalArgumentException: Function values at endpoints do not have different signs. Endpoints: [3.0,3.141592653589793] Values: [0.1411200080598672,1.2246467991473532E-16]",
    "test_framework": "defects4j",
    "test_line": "        result = solver.solve(3, Math.PI);",
    "test_name": "testRootEndpoints",
    "test_suite": "org.apache.commons.math.analysis.BrentSolverTest",
    "time_buggy": "2008-06-23 08:01:38 +0000",
    "time_fixed": "2008-06-23 13:46:46 +0000",
    "bug_description": "Bug ID: 97\nProject: Math\nBug Type: Semantic Failure (SF)\n\nDescription:\n\nThe bug appears to be in the Java class that tries to solve a given math function for given [min, max]\ninterval. This bug is of Semantic Failure type, meaning that the code does not behave as expected.\n\nThe Java Exception thrown is IllegalArgumentException. \nThe exact error message being thrown is: \"Function values at endpoints do not have different signs. \nEndpoints: [3.0,3.141592653589793] Values: [0.1411200080598672,1.2246467991473532E-16]\"\n\nUnderlying problem appears to be the verification of sign differentiation between the 'min' and 'max' values. \nThe code below shows there isn't a check for signs to be positive or negative specifically but just `sign >= 0`. \nAnd if they are not, an exception is thrown straight away.\n\nOriginal bug code:\n\n```java\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // check if either value is close to a zero\n                // neither value is close to zero and min and max do not bracket root.\n                throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            ...\n        }\n```\nMost likely problem here is that the `IllegalArgumentException` is thrown even though the `sign` may be equal to zero (`sign=0`)\n\nFix:\n\nThe fix seems pretty straightforward and is executed by changing the if condition from `if (sign >= 0)` to `if (sign > 0)` in order to handle this specific edge case correctly. \n\nIn the fixed code, zero sign is handled specifically and checks if `yMin` or `yMax` equal to zero (`yMin = 0.0` or `yMax = 0.0`) and returns the respective root. Also, an extra check within the positive sign condition to check \n`Math.abs(yMin)` and `Math.abs(yMax)` less than or equal to `functionValueAccuracy` and then sets the respective root as result.\n\nFixed code:\n\n```java\ndouble sign = yMin * yMax;\nif (sign > 0) {\n    // check if either value is close to a zero\n    ...\n} else if (sign < 0){\n    ...\n} else {\n    // either min or max is a root\n    if (yMin == 0.0) {\n        ret = min;\n    } else {\n        ret = max;\n    }\n}\n```\n\nThis is a typical Math related semantic error where code behavior is not as intended. Fixing such bugs involve a deep understanding of the problem domain, i.e., Mathematics in this case, and handling all edge cases correctly."
}