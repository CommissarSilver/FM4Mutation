{
    "bug_id": 57,
    "bug_type": "SL SH SF",
    "buggy_lines": "          if (target != null) {",
    "code": "  private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName){\n    String className = null;\n    if (NodeUtil.isExprCall(parent)) {\n      Node callee = node.getFirstChild();\n      if (callee != null && callee.getType() == Token.GETPROP) {\n        String qualifiedName = callee.getQualifiedName();\n        if (functionName.equals(qualifiedName)) {\n          Node target = callee.getNext();\n          if (target != null) {\n            className = target.getString();\n          }\n        }\n      }\n    }\n    return className;\n  }",
    "fixed_code": "  private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName){\n    String className = null;\n    if (NodeUtil.isExprCall(parent)) {\n      Node callee = node.getFirstChild();\n      if (callee != null && callee.getType() == Token.GETPROP) {\n        String qualifiedName = callee.getQualifiedName();\n        if (functionName.equals(qualifiedName)) {\n          Node target = callee.getNext();\n          if (target != null && target.getType() == Token.STRING) {\n            className = target.getString();\n          }\n        }\n      }\n    }\n    return className;\n  }",
    "fixed_lines": "          if (target != null && target.getType() == Token.STRING) {",
    "masked_code": "  private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName){\n    String className = null;\n    if (NodeUtil.isExprCall(parent)) {\n      Node callee = node.getFirstChild();\n      if (callee != null && callee.getType() == Token.GETPROP) {\n        String qualifiedName = callee.getQualifiedName();\n        if (functionName.equals(qualifiedName)) {\n          Node target = callee.getNext();\n>>> [ INFILL ] <<<\n            className = target.getString();\n          }\n        }\n      }\n    }\n    return className;\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: foo",
    "test_framework": "defects4j",
    "test_line": "    assertNull(conv.extractClassNameIfRequire(n.getFirstChild(), n));",
    "test_name": "testRequire",
    "test_suite": "com.google.javascript.jscomp.ClosureCodingConventionTest",
    "time_buggy": "2011-08-12 19:04:43 +0000",
    "time_fixed": "2011-08-15 23:20:43 +0000",
    "bug_description": "Bug Description:\n\nID: 57\nProject: Closure\nBug Type: Syntax, Logic, Semantic Fault\n\nDetailed Description:\n\nThe bug lies within the \"extractClassNameIfog\" function of the Closure Project. Here, the function tries to extract a class name from a passed-in Node. During the extraction process, a certain condition apparently does not meet expectations which in turn results in \"junit.framework.AssertionFailedError: Expected: <null> but was: foo\".\n\nCode Analysis:\n\nThe problematic line of code is contained in the following conditional statement:\n\nif (target != null) {\n    className = target.getString();\n}\n\nHere, we are checking that 'target' is not null before assigning 'className' the value of 'target.getString()'. However, the error message suggests that 'className' is expected to be 'null', but instead receives the value 'foo'. Therefore, the condition 'if (target != null)' evaluates to 'true' when it shouldn't. In this case, the error arises because 'target' is 'foo' and not 'null'.\n\nBug Fix:\n\nThe fix involves adding an additional check in the condition before assigning 'className' with 'target.getString()'. The condition should ensure that 'target' not only is not null but also is of type string (Token.STRING). The fixed conditional statement would be:\n\nif (target != null && target.getType() == Token.STRING) {\n    className = target.getString();\n}\n\nWith the above change, 'className' will only receive a value if 'target' is not 'null' and 'target' is of type string.\n\nSteps for Developers to Generate Similar Java Bugs:\n\n1. Have a conditional check before assigning a value to a variable, where the condition is only checking for 'null' and not the type or any other characteristics of the value being assigned.\n\n2. Do not handle situations when the value to be assigned is not 'null' but is of an unexpected type, which would cause the program to behave unexpectedly or fail.\n\n3. Ignore the specific error messages when the code fails to execute as expected. The error messages usually provide useful hints as to what is causing the bug and how to fix it."
}