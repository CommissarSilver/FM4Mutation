{
    "bug_id": 18,
    "bug_type": "SL SH SF",
    "buggy_lines": "        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
    "code": "    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    }",
    "fixed_code": "    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n        return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());\n    }",
    "fixed_lines": "        return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());",
    "masked_code": "    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n        if (cs1 instanceof String && cs2 instanceof String) {\n            return cs1.equals(cs2);\n        }\n>>> [ INFILL ] <<<\n    }",
    "project": "Codec",
    "test_error_message": "java.lang.StringIndexOutOfBoundsException: String index out of range: 3",
    "test_framework": "defects4j",
    "test_line": "        Assert.assertFalse(StringUtils.equals(new StringBuilder(\"abc\"), new StringBuilder(\"abcd\")));",
    "test_name": "testEqualsCS1",
    "test_suite": "org.apache.commons.codec.binary.StringUtilsTest",
    "time_buggy": "2017-03-26 18:34:51 +0000",
    "time_fixed": "2017-03-26 21:43:36 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 18\n\nProject: Codec\n\nBug Type: SL SH SF (Single-Location, Single-HOM, Single-Edit Fix)\n\nThe issue originated in the equals() method of the Codec project. The equals() function was constructed to compare two CharSequence objects, either cs1 or cs2.\n\nIn the context of the buggy code, a StringIndexOutOfBoundsException error was thrown. This exception typically occurs when dealing with 'String' functions that require an index, where the said index is either negative or greater than the size of the String itself. \n\nThe exception pointed to the following line of code: \n`return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));`\n\nThis line of code was using the function 'Math.max(cs1.length(), cs2.length())' as an index input for the 'regionMatches()' function. The issue arose when one of the CharSequence (cs1 or cs2) had a length less than the greater value returned from 'Math.max(cs1.length(), cs2.length()))'. When this occurs, there's an attempt to access an index that doesn\u2019t exist in one of the CharSequence objects, hence the StringIndexOutOfBoundsException error was thrown.\n\nThe solution to this bug resided in modifying the index used in the 'regionMatches()' function. Instead of using the maximum length of cs1 or cs2, the length of cs1 was used. This change guaranteed that we were never trying to access an index outside the bounds of the cs1 CharSequence. Moreover, an extra condition was added to make sure that cs1 and cs2 have the same length before comparing their content. \n\nSo, the fixed line of code was: \n`return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());`\n\nPost bug-fix, the 'equals()' function will now correctly compare two CharSequence objects without throwing StringIndexOutOfBoundsException, even when these CharSequence objects (cs1 or cs2) differ in length."
}