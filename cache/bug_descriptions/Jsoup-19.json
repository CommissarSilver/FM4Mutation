{
    "bug_id": 19,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        if (!preserveRelativeLinks)\n            attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "fixed_code": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        if (value.length() == 0)\n            value = attr.getValue(); // if it could not be made abs, run as-is to allow custom unknown protocols\n        if (!preserveRelativeLinks)\n            attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "fixed_lines": "        if (value.length() == 0)\n            value = attr.getValue(); // if it could not be made abs, run as-is to allow custom unknown protocols",
    "masked_code": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n>>> [ INFILL ] <<<\n        if (!preserveRelativeLinks)\n            attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<<img [src=\"cid:12345\" />",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"<img src=\\\"cid:12345\\\" /> \\n<img src=\\\"data:gzzt\\\" />\", preserved);",
    "test_name": "handlesCustomProtocols",
    "test_suite": "org.jsoup.safety.CleanerTest",
    "time_buggy": "2011-08-28 14:13:21 +1000",
    "time_fixed": "2011-08-28 15:14:35 +1000",
    "bug_description": "Bug Title: Missing Handling of Empty URLs in Protocol Testing\n\nBug ID: 19\nProject: Jsoup\nBug Type: SH SF (Syntax and Semantic, Data and Control Flow)\n\nDetail Bug Description:\n\nThe identified bug pertains to the way the Jsoup Java library handles and validates protocols for specific elements and attributes. The presence of this bug has the potential to affect the processing and management of HTML documents by the library. \n\nThe bug is embedded in the \"testValidProtocol()\" method of the project. This method is intended to resolve relative URLs to absolute URLs and examine the validity of the protocol for each URL.\n\nBug Manifestation:\n\nThe bug manifests itself under the circumstance where the length of the \"value\" attribute (which holds the absolute URL) is zero. In such cases, the existing implementation doesn't provide an alternative value or make an effort to handle this scenario, resulting in the failure of the validation process. The test error message \"junit.framework.AssertionFailedError: expected:<img [src=\"cid:12345\" />\" is returned, indicating the unhandled case when the URL is not resolvable. \n\nSteps to Reproduce:\n\n1. Parse a document that includes an HTML element with a relative URL that cannot be transformed into an absolute URL.\n2. Call the method \"testValidProtocol\" on the specific attribute of the parsed element.\n3. Observe that, if the \"value\" corresponding to the absolute URL is null or empty, no alternative actions are performed, and the program proceeds through the remaining loops.\n4. This results in the failure of the test, manifesting the bug.\n\nFix Description:\n\nThe bug was fixed by adding a conditional statement to check if the length of the \"value\" variable is zero, meaning the URL could not be transformed into absolute form. If true, the program assigns the original attribute value to the \"value\" variable allowing for the accommodation of custom unknown protocols. The assignment of the attribute's original value to the \"value\" variable in such conditions allows the code to accommodate and process unconventional protocols, which were previously overlooked.\n\nThis tweak in the code ensures that the protocol testing procedure caters to scenarios where certain URLs cannot be resolved to their absolute forms, thereby making the protocol validation process more robust and error-free."
}