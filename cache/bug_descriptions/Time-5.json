{
    "bug_id": 5,
    "bug_type": "SF",
    "buggy_lines": "            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            if (months != 0) {\n                result = result.withMonths(months);",
    "code": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n        return result;\n    }",
    "fixed_code": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            long totalMonths = years * 12L + months;\n            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {\n                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);\n                result = result.withYears(normalizedYears);\n                totalMonths = totalMonths - (normalizedYears * 12);\n            }\n            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {\n                int normalizedMonths = FieldUtils.safeToInt(totalMonths);\n                result = result.withMonths(normalizedMonths);\n                totalMonths = totalMonths - normalizedMonths;\n            }\n            if (totalMonths != 0) {\n                throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());\n            }\n        }\n        return result;\n    }",
    "fixed_lines": "            long totalMonths = years * 12L + months;\n            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {\n                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);\n                result = result.withYears(normalizedYears);\n                totalMonths = totalMonths - (normalizedYears * 12);\n            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {\n                int normalizedMonths = FieldUtils.safeToInt(totalMonths);\n                result = result.withMonths(normalizedMonths);\n                totalMonths = totalMonths - normalizedMonths;\n            }\n            if (totalMonths != 0) {\n                throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());",
    "masked_code": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            }\n>>> [ INFILL ] <<<\n            }\n        }\n        return result;\n    }",
    "project": "Time",
    "test_error_message": "java.lang.UnsupportedOperationException: Field is not supported",
    "test_framework": "defects4j",
    "test_line": "        Period result = test.normalizedStandard(PeriodType.months());",
    "test_name": "testNormalizedStandard_periodType_months1",
    "test_suite": "org.joda.time.TestPeriod_Basics",
    "time_buggy": "2013-11-01 11:58:04 +0000",
    "time_fixed": "2013-11-01 14:06:59 +0000",
    "bug_description": "Bug Description:\n\nTitle: UnsupportedOperationException due to unsupported field when normalizing standard PeriodType.\n\nBug ID: 5\n\nSteps to Reproduce:\n1. Create a Period object and set the period years and months with non-zero value(s).\n2. Call the method 'normalizedStandard' with a relevant PeriodType which includes years and/or months.\n3. This operation results in a java.lang.UnsupportedOperationException error concerning an unsupported field.\n\nExpected Behavior:\nThe Period object should correctly normalize the standard values of years and months, without raising any exception.\n\nActual Behavior:\nAn UnsupportedOperationException is thrown, indicating that a particular field is not supported. \n\nCode Analysis:\nThe bug is within the 'normalizedStandard' method where the years and months normalization cannot handle unsupported fields. If the provided type can\u2019t handle years or months and years or months are not zero, it leads to this UnsupportedOperationException.\n\nProblematic Lines:\n                years = FieldUtils.safeAdd(years, months / 12);\n                months = months % 12;\n                if (years != 0) {\n                    result = result.withYears(years);\n                if (months != 0) {\n                    result = result.withMonths(months);\n\nFixed Code Explanation:\nThe fixed code removes the issue by checking if the years and months fields are supported by the provided PeriodType using 'type.isSupported()'. If the PeriodType supports the year or month, it normalizes the values respectively. If not, an exception is thrown informing that either years or months are missing from the PeriodType. The check and normalization are done by calculating the total months first and then adjusting this value based on years and months. The exception message is also adjusted to be more informative about the reason for the exception."
}