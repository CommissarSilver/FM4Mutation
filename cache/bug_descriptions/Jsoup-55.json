{
    "bug_id": 55,
    "bug_type": "SL SH SF",
    "buggy_lines": "",
    "code": "        void read(Tokeniser t, CharacterReader r) {\n            char c = r.consume();\n            switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeAttributeName);\n            }\n        }",
    "fixed_code": "        void read(Tokeniser t, CharacterReader r) {\n            char c = r.consume();\n            switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }\n        }",
    "fixed_lines": "                    r.unconsume();",
    "masked_code": "        void read(Tokeniser t, CharacterReader r) {\n            char c = r.consume();\n            switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n>>> [ INFILL ] <<<\n                    t.transition(BeforeAttributeName);\n            }\n        }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: SelfClosingStartTag ignores last character",
    "test_framework": "defects4j",
    "test_line": "        assertTrue(\"SelfClosingStartTag ignores last character\", doc.select(\"img[onerror]\").size() != 0);",
    "test_name": "dropsSlashFromAttributeName",
    "test_suite": "org.jsoup.parser.AttributeParseTest",
    "time_buggy": "2016-08-19 12:04:21 -0700",
    "time_fixed": "2016-08-19 12:54:51 -0700",
    "bug_description": "Bug Description:\n\n1. Bug ID: This issue has been assigned an identifier i.e., 55. Each bug has its unique identification number for tracking purposes.\n\n2. Project: The bug is found in the project named 'Jsoup'. Jsoup is a Java library that is used for working with real-world HTML.\n\n3. Bug Type: The bug type is SL SH SF; these seem to be shorthand terms or codes specific to the project to categorize bugs.\n\n4. Test Error Message: In testing, we encounter a junit.framework.AssertionFailedError. This error type denotes that a particular assertion within a test has failed. The error message says 'SelfClosingStartTag ignores last character,' indicating that our code is not considering the last character of a self-closing tag.\n\n5.Buggy Lines: There are no specified line numbers given for the bug. However, by comparing the code before and after the fix, the mistake can be traced back to the 'default' case in the switch block.\n\n6. Original Code:\nIn the original code, when a character other than '>' or the end of file (eof) is consumed, there's an error. After switching the Tokeniser state to 'BeforeAttributeName', the recently read character isn't unread, resulting in its loss. This default execution pathway is causing our bug.\n\n7. Fixed Code:\nIn the fixed code, the developer added a new line 'r.unconsume()' in the 'default' case. This line means that after encountering an error and before transitioning our state to 'BeforeAttributeName', we un-read the last consumed character with 'r.unconsume()'. This implies that, instead of ignoring the last character, it's used in the next tag parsing, thus preventing the error where the last character was previously being ignored.\n\n8. The developer has to make sure that every character read during the tokenizing process is handled properly and none is missed or ignored accidentally. Every character is a building block of the HTML document and if any of them is missed, it can lead potentially to wrong interpretation of the document structure. Hence, it's crucial to avoid such bugs."
}