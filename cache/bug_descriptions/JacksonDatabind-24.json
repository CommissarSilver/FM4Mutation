{
    "bug_id": 24,
    "bug_type": "SF",
    "buggy_lines": "        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();\n                tz, _defaultBase64);",
    "code": "    public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat == df) {\n            return this;\n        }\n        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                tz, _defaultBase64);\n    }",
    "fixed_code": "    public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat == df) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }",
    "fixed_lines": "                _timeZone, _defaultBase64);",
    "masked_code": "    public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat == df) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n>>> [ INFILL ] <<<\n    }",
    "project": "JacksonDatabind",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<sun.util.calendar.ZoneInfo[id=\"America/Los_Angeles\",offset=-28800000,dstSavings=3600000,useDaylight=true,transitions=185,lastRule=java.util.SimpleTimeZone[id=America/Los_Angeles,offset=-28800000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]]> but was:<sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());",
    "test_name": "testDateFormatConfig",
    "test_suite": "com.fasterxml.jackson.databind.ser.TestConfig",
    "time_buggy": "2015-08-06 21:59:02 -0700",
    "time_fixed": "2015-08-06 22:12:59 -0700",
    "bug_description": "Bug ID: 24\nProject Name: JacksonDatabind\nBug Type: SF (Software Fault)\n\nDescription:\nIn the JacksonDatabind project, an issue of incorrect TimeZone being returned was identified. The method 'withDateFormat(DateFormat df)' in the code for configuring Base Setting was the source of this issue.\n\nError:\nThe test error message indicated an AssertionFailedError. This entails that the unit test expected the TimeZone to be 'America/Los_Angeles' with its associated properties. However, the code returned 'GMT' with a different set of properties. The failure occurred at the following lines,\n\n    TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();\n                tz, _defaultBase64);\n\nin the 'withDateFormat(DateFormat df)' method.\n\nSteps to Reproduce:\n1. Call the method 'withDateFormat(DateFormat df)', and pass null as argument. \n2. The method should return the default base _timeZone, as df == null, but due to the ternary operator, df.getTimeZone() is called instead. This returns the incorrect TimeZone ('GMT'), leading to the failure of the test.\n\nDebugging Process:\nThe error lies in the calculation of 'tz'. When 'df' is null, it should ideally return '_timeZone', but due to the improper use of ternary operator, 'df.getTimeZone()' is executed, which is incorrect as 'df' is null.\n\nResolution:\nTo resolve this bug, simply return the default TimeZone, '_timeZone', regardless of whether 'df' is null or not. The corrected code is shown below:\n\n    public BaseSettings withDateFormat(DateFormat df) {\n        if (_dateFormat == df) {\n            return this;\n        }\n        return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,\n                _typeResolverBuilder, df, _handlerInstantiator, _locale,\n                _timeZone, _defaultBase64);\n    }\n\nIn the improved code, regardless of if 'df' equals '_dateFormat', the TimeZone is always set to '_timeZone'. Consequently, the correct TimeZone ('America/Los_Angeles') will be returned, and the corresponding test will pass."
}