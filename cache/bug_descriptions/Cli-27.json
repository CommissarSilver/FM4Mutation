{
    "bug_id": 27,
    "bug_type": "SF",
    "buggy_lines": "        if (selected == null || selected.equals(option.getOpt()))\n            selected = option.getOpt();",
    "code": "    public void setSelected(Option option) throws AlreadySelectedException\n    {\n        if (option == null)\n        {\n            // reset the option previously selected\n            selected = null;\n            return;\n        }\n        \n        // if no option has already been selected or the \n        // same option is being reselected then set the\n        // selected member variable\n        if (selected == null || selected.equals(option.getOpt()))\n        {\n            selected = option.getOpt();\n        }\n        else\n        {\n            throw new AlreadySelectedException(this, option);\n        }\n    }",
    "fixed_code": "    public void setSelected(Option option) throws AlreadySelectedException\n    {\n        if (option == null)\n        {\n            // reset the option previously selected\n            selected = null;\n            return;\n        }\n        \n        // if no option has already been selected or the \n        // same option is being reselected then set the\n        // selected member variable\n        if (selected == null || selected.equals(option.getKey()))\n        {\n            selected = option.getKey();\n        }\n        else\n        {\n            throw new AlreadySelectedException(this, option);\n        }\n    }",
    "fixed_lines": "        if (selected == null || selected.equals(option.getKey()))\n            selected = option.getKey();",
    "masked_code": "    public void setSelected(Option option) throws AlreadySelectedException\n    {\n        if (option == null)\n        {\n            // reset the option previously selected\n            selected = null;\n            return;\n        }\n        \n        // if no option has already been selected or the \n        // same option is being reselected then set the\n        // selected member variable\n        {\n>>> [ INFILL ] <<<\n        }\n        else\n        {\n            throw new AlreadySelectedException(this, option);\n        }\n    }",
    "project": "Cli",
    "test_error_message": "junit.framework.ComparisonFailure: selected option expected:<bar> but was:<null>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"selected option\", \"bar\", group.getSelected());",
    "test_name": "testOptionGroupLong",
    "test_suite": "org.apache.commons.cli.BasicParserTest",
    "time_buggy": "2009-05-28 16:22:05 +0000",
    "time_fixed": "2009-05-30 02:31:22 +0000",
    "bug_description": "Bug ID: 27\nProject: Cli\nBug Type: Semantic Fault (SF)\n\nDescription:\nThe bug resides within the 'setSelected()' function of the Cli project. The function is trying to set the 'selected' variable with an Option's key. However, the fault in the logic is that, it is trying to compare the 'selected' with the Option's 'getOpt()' instead of the Option's 'getKey()'. Hence, the test error message shows that null is being returned instead of 'bar' because the method 'getOpt()' could potentially be returning null.\n\nError Trigger:\nThis error can be triggered when the setSelected() function is executed in a scenario where the parameter passed is a non-null Option object which already has a key set.\n\nBuggy lines:\nThe error was caused by the following lines of the code:\n\n```\nif (selected == null || selected.equals(option.getOpt()))\n{\n    selected = option.getOpt();\n}\n```\n\nHere, the option's 'getOpt()' method could potentially return null causing the 'selected' variable to be null even when an option with a valid key was passed.\n\nFixed code:\n\nThe bug was resolved in the following updated lines of code:\n\n```\nif (selected == null || selected.equals(option.getKey()))\n{\n    selected = option.getKey();\n}\n```\n\nSolution:\nThe solution involves checking for equality with the Option's 'getKey()' method instead of 'getOpt()'. This checks if the selected option equals the key of the passed in Option object, and assigns 'selected' to that same key if the condition is true, preventing 'selected' from becoming null when an Option object with a valid key is passed. \n\nSteps to generate artificial bug:\n1. Create a setSelected() function where an 'Option' object is accepted as a parameter.\n2. In the 'if' condition, compare the 'selected' variable with the 'getOpt' method of the 'Option' object instead of the 'getKey' method.\n3. Check if the test returns the expected selected option as 'null' instead of the valid key of the 'Option' object.\n4. This artificial bug has been successfully generated when a valid 'Option' object leads to a 'selected' value of null."
}