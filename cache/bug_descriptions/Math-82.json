{
    "bug_id": 82,
    "bug_type": "SL SH SF",
    "buggy_lines": "            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
    "code": "    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                final double ratio = rhs / entry;\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i; \n                }\n            }\n        }\n        return minRatioPos;\n    }",
    "fixed_code": "    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                final double ratio = rhs / entry;\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i; \n                }\n            }\n        }\n        return minRatioPos;\n    }",
    "fixed_lines": "            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {",
    "masked_code": "    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n>>> [ INFILL ] <<<\n                final double ratio = rhs / entry;\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i; \n                }\n            }\n        }\n        return minRatioPos;\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<10.0> but was:<11.5>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(10.0, solution.getValue(), .0000001);",
    "test_name": "testMath288",
    "test_suite": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
    "time_buggy": "2009-08-21 23:07:42 +0000",
    "time_fixed": "2009-08-25 18:07:13 +0000",
    "bug_description": "Bug Title: Incorrect value comparison causes junit.framework.AssertionFailedError in Math project\n\nBug ID: 82\nProject: Math\nBug Type: Semantic Error - Logical Error defined as \"SL SH SF\"\n\n1. Description:\nThe issue lies in the method \"getPivotRow\" in the Math project. When comparing a certain value (\"entry\") with zero, the condition is set as `if (MathUtils.compareTo(entry, 0, epsilon) >= 0)`. This results in the inclusion of zero as a valid value and leads to erroneous calculations.\n\nDuring the unit tests, the method is expected to return <10.0>, but it ends up returning <11.5>, leading to a failure with the error message \"junit.framework.AssertionFailedError: expected:<10.0> but was:<11.5>\".\n\nHere, the result should have been compared as greater than zero (not equal to), but the existing code erroneously performs a comparison as greater than or equal. \n\n2. Steps to Reproduce:\n\n    Step 1: Execute the specific unit test that belongs to the \"getPivotRow\" method.\n    \n    Step 2: Observe the returned value from the method which should be <10.0>.\n    \n    Step 3: Cross verify the failed test where it shows a returned value of <11.5> instead of the expected <10.0>.\n    \n    Step 4: Look into the \"getPivotRow\" method to see the if condition: `if (MathUtils.compareTo(entry, 0, epsilon) >= 0)`, to understand the error.\n\n3. Proposed Fix:\n  \nChanging the comparison operator from `>= 0` to `> 0` in the conditional statement seems to resolve the issue, and makes logical sense according to the method's requirements:\n  \n   Before: `if (MathUtils.compareTo(entry, 0, epsilon) >= 0)`\n   After: `if (MathUtils.compareTo(entry, 0, epsilon) > 0)`\n\nBy applying this fix, the 'entry' variable is always greater than zero and won't lead to any incorrect calculations, thereby passing the unit test."
}