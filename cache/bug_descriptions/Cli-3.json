{
    "bug_id": 3,
    "bug_type": "SH SF",
    "buggy_lines": "            return org.apache.commons.lang.math.NumberUtils.createNumber(str);",
    "code": "    public static Number createNumber(String str)\n    {\n        try\n        {\n            return org.apache.commons.lang.math.NumberUtils.createNumber(str);\n        }\n        catch (NumberFormatException nfe)\n        {\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }",
    "fixed_code": "    public static Number createNumber(String str)\n    {\n        try\n        {\n            if( str != null )\n            {\n                if( str.indexOf('.') != -1 )\n                {\n                    return Double.valueOf(str);\n                }\n                else\n                {\n                    return Long.valueOf(str);\n                }\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }",
    "fixed_lines": "            if( str != null )\n            {\n                if( str.indexOf('.') != -1 )\n                {\n                    return Double.valueOf(str);\n                }\n                else\n                {\n                    return Long.valueOf(str);\n                }\n            }",
    "masked_code": "    public static Number createNumber(String str)\n    {\n        try\n        {\n>>> [ INFILL ] <<<\n        }\n        catch (NumberFormatException nfe)\n        {\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }",
    "project": "Cli",
    "test_error_message": "junit.framework.AssertionFailedError: number flag n expected:<4.5> but was:<4.5>",
    "test_framework": "defects4j",
    "test_line": "           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));",
    "test_name": "testSimplePattern",
    "test_suite": "org.apache.commons.cli.PatternOptionBuilderTest",
    "time_buggy": "2007-05-26 00:52:24 +0000",
    "time_fixed": "2007-05-28 07:54:52 +0000",
    "bug_description": "Bug Description:\n\nProject: CLI\nBug ID: 3\nBug Type: Syntax Handling Error of a String Format (SH SF)\n\nSummary: The function \"createNumber(String str)\" in the CLI project is not properly handling the conversion from String to Number.\n\nError Message: A test case failed due to a junit.framework.AssertionFailedError with message \"number flag n expected:<4.5> but was:<4.5>\"\n\nSteps to Reproduce:\n\n1. Call the function \"createNumber(String str)\" from org.apache.commons.lang.math.NumberUtils. \n\n2. Pass a string that is intended to be converted into a number. \n\n3. The executed function fails to convert a string to double or long dependent on the number format in the string.\n\nExpected Result: The function correctly identifies if the number in the string format is a double (contains a decimal point) or a long (doesn't contain a decimal point) and correctly returns the respective number value.\n\nActual Result: The function throws junit.framework.AssertionFailedError as the expected and actual results are not matching.\n\nBuggy Code:\nIn CLI project:\n```java\npublic static Number createNumber(String str) \n{\n    try \n    {\n        return org.apache.commons.lang.math.NumberUtils.createNumber(str);\n    } \n    catch (NumberFormatException nfe) \n    {\n        System.err.println(nfe.getMessage());\n    }\n\n    return null; \n}\n```\n\nSuggested Fix: The function should distinct between double and long format while trying to convert the string into a number. If the string contains a decimal point it should return a double, if not it should return a long.\n\nFixed code: \n```java\npublic static Number createNumber(String str) \n{\n    try \n    {\n        if( str != null ) \n        {\n            if( str.indexOf('.') != -1 )\n            {\n                return Double.valueOf(str);\n            }\n            else \n            {\n                return Long.valueOf(str);\n            }\n        }\n    } \n    catch (NumberFormatException nfe) \n    {\n        System.err.println(nfe.getMessage());\n    }\n\n    return null; \n}\n```\n\nPlease make sure to create test cases for both double and long string inputs to ensure the function is working as intended."
}