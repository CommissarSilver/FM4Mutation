{
    "bug_id": 37,
    "bug_type": "SL SH SF",
    "buggy_lines": "        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
    "code": "        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n    \n    @Override\n    public JavaType withContentType(JavaType contentType) {\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\");\n    }\n    \n    @Override\n    public SimpleType withTypeHandler(Object h) {\n        if (_typeHandler == h) {\n            return this;\n        }",
    "fixed_code": "        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n        return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n    \n    @Override\n    public JavaType withContentType(JavaType contentType) {\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\");\n    }\n    \n    @Override\n    public SimpleType withTypeHandler(Object h) {\n        if (_typeHandler == h) {\n            return this;\n        }",
    "fixed_lines": "        return new SimpleType(subclass, _bindings, this, _superInterfaces,",
    "masked_code": "        if (!_class.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n        // 15-Jan-2015, tatu: Not correct; should really re-resolve...\n>>> [ INFILL ] <<<\n                _valueHandler, _typeHandler, _asStatic);\n    }\n    \n    @Override\n    public JavaType withContentType(JavaType contentType) {\n        throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\");\n    }\n    \n    @Override\n    public SimpleType withTypeHandler(Object h) {\n        if (_typeHandler == h) {\n            return this;\n        }",
    "project": "JacksonDatabind",
    "test_error_message": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"name\" (class com.fasterxml.jackson.databind.objectid.Objecid1083Test$JsonMapSchema), not marked as ignorable (0 known properties: ])",
    "test_framework": "defects4j",
    "test_line": "",
    "test_name": "testSimple",
    "test_suite": "com.fasterxml.jackson.databind.objectid.Objecid1083Test",
    "time_buggy": "2016-01-15 20:25:14 -0800",
    "time_fixed": "2016-01-15 21:02:56 -0800",
    "bug_description": "Bug Description:\n\nBug ID: 37\nProject: JacksonDatabind\nBug Type: SL SH SF\n\nSummary: \nThe bug is of type SL SH SF in the JacksonDatabind project. The problem lies in the creation of the SimpleType object due to the unrecognized field \"name\".\n\nDetails:\nThe error message indicates that the application is trying to use a field named \"name\" from the class \"com.fasterxml.jackson.databind.objectid.Objecid1083Test$JsonMapSchema\" which it doesn\u2019t recognize. The used class \"com.fasterxml.jackson.databind.objectid.Objecid1083Test$JsonMapSchema\" doesn't have a field named \"name\".\n\nError Message: \ncom.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"name\" (class com.fasterxml.jackson.databind.objectid.Objecid1083Test$JsonMapSchema), not marked as ignorable (0 known properties: ])\n\nBuggy Code:\n\n```java\nreturn new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n```\n\nHere, it seems that \"_superClass\" is not recognized as a valid field and is thus leading to an UnrecognizedPropertyException.\n\nSteps to reproduce:\n\n1. Instantiate the SimpleType with subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, and _asStatic attributes. \n2. It seems the error lies in input received by \"_superClass\" attribute.\n3. Run the program and observe the error message.\n\nFix:\nThe issue is solved by replacing \"_superClass\" with \"this\" as the third parameter in the SimpleType object creation.\n\nFixed Code:\n\n```java\nreturn new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n```\n\nAfter the fix, the program should run without throwing an UnrecognizedPropertyException.\n\nAdditional Notes:\nIt's always important to check if the attributes that you're passing into the method or constructor are valid and recognizable. In this case, \"_superClass\" was not recognizable resulting in the error. It's also worth mentioning that descriptive error messages are very important as they lead you to the correct solution. This bug description can be used as a guide to generate artificial java bugs in a system for testing purposes."
}