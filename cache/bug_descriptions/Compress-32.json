{
    "bug_id": 32,
    "bug_type": "SF",
    "buggy_lines": "                currEntry.setGroupId(Integer.parseInt(val));\n                currEntry.setUserId(Integer.parseInt(val));",
    "code": "    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        /*\n         * The following headers are defined for Pax.\n         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields\n         * mtime\n         * comment\n         * gid, gname\n         * linkpath\n         * size\n         * uid,uname\n         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those\n         */\n        for (Entry<String, String> ent : headers.entrySet()){\n            String key = ent.getKey();\n            String val = ent.getValue();\n            if (\"path\".equals(key)){\n                currEntry.setName(val);\n            } else if (\"linkpath\".equals(key)){\n                currEntry.setLinkName(val);\n            } else if (\"gid\".equals(key)){\n                currEntry.setGroupId(Integer.parseInt(val));\n            } else if (\"gname\".equals(key)){\n                currEntry.setGroupName(val);\n            } else if (\"uid\".equals(key)){\n                currEntry.setUserId(Integer.parseInt(val));\n            } else if (\"uname\".equals(key)){\n                currEntry.setUserName(val);\n            } else if (\"size\".equals(key)){\n                currEntry.setSize(Long.parseLong(val));\n            } else if (\"mtime\".equals(key)){\n                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n            } else if (\"SCHILY.devminor\".equals(key)){\n                currEntry.setDevMinor(Integer.parseInt(val));\n            } else if (\"SCHILY.devmajor\".equals(key)){\n                currEntry.setDevMajor(Integer.parseInt(val));\n            }\n        }\n    }",
    "fixed_code": "    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        /*\n         * The following headers are defined for Pax.\n         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields\n         * mtime\n         * comment\n         * gid, gname\n         * linkpath\n         * size\n         * uid,uname\n         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those\n         */\n        for (Entry<String, String> ent : headers.entrySet()){\n            String key = ent.getKey();\n            String val = ent.getValue();\n            if (\"path\".equals(key)){\n                currEntry.setName(val);\n            } else if (\"linkpath\".equals(key)){\n                currEntry.setLinkName(val);\n            } else if (\"gid\".equals(key)){\n                currEntry.setGroupId(Long.parseLong(val));\n            } else if (\"gname\".equals(key)){\n                currEntry.setGroupName(val);\n            } else if (\"uid\".equals(key)){\n                currEntry.setUserId(Long.parseLong(val));\n            } else if (\"uname\".equals(key)){\n                currEntry.setUserName(val);\n            } else if (\"size\".equals(key)){\n                currEntry.setSize(Long.parseLong(val));\n            } else if (\"mtime\".equals(key)){\n                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n            } else if (\"SCHILY.devminor\".equals(key)){\n                currEntry.setDevMinor(Integer.parseInt(val));\n            } else if (\"SCHILY.devmajor\".equals(key)){\n                currEntry.setDevMajor(Integer.parseInt(val));\n            }\n        }\n    }",
    "fixed_lines": "                currEntry.setGroupId(Long.parseLong(val));\n                currEntry.setUserId(Long.parseLong(val));",
    "masked_code": "    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        /*\n         * The following headers are defined for Pax.\n         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields\n         * mtime\n         * comment\n         * gid, gname\n         * linkpath\n         * size\n         * uid,uname\n         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those\n         */\n        for (Entry<String, String> ent : headers.entrySet()){\n            String key = ent.getKey();\n            String val = ent.getValue();\n            if (\"path\".equals(key)){\n                currEntry.setName(val);\n            } else if (\"linkpath\".equals(key)){\n                currEntry.setLinkName(val);\n            } else if (\"gid\".equals(key)){\n            } else if (\"gname\".equals(key)){\n                currEntry.setGroupName(val);\n            } else if (\"uid\".equals(key)){\n>>> [ INFILL ] <<<\n            } else if (\"uname\".equals(key)){\n                currEntry.setUserName(val);\n            } else if (\"size\".equals(key)){\n                currEntry.setSize(Long.parseLong(val));\n            } else if (\"mtime\".equals(key)){\n                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n            } else if (\"SCHILY.devminor\".equals(key)){\n                currEntry.setDevMinor(Integer.parseInt(val));\n            } else if (\"SCHILY.devmajor\".equals(key)){\n                currEntry.setDevMajor(Integer.parseInt(val));\n            }\n        }\n    }",
    "project": "Compress",
    "test_error_message": "java.lang.NumberFormatException: For input string: \"4294967294\"",
    "test_framework": "defects4j",
    "test_line": "        t = tis.getNextTarEntry();",
    "test_name": "shouldReadBigGid",
    "test_suite": "org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest",
    "time_buggy": "2015-05-06 04:32:48 +0000",
    "time_fixed": "2015-05-08 19:11:27 +0000",
    "bug_description": "Bug ID: 32\nProject: Compress\nBug Type: Semantic Fault (SF)\n\nTitle: NumberFormatException due to incorrect data type parse\n\nTotal Steps: 3\n\nStep 1:\nThe bug resides in the 'applyPaxHeadersToCurrentEntry' method within the 'Compress' project. This method is designed to apply the headers from a Pax (Portable Archive Interchange) file to the 'currEntry' object of the 'TarArchiveEntry' class. The headers are processed by iterating over each Entry within the headers map.\n\nStep 2:\nThe bug specifically occurs when the program attempts to parse the 'gid' and 'uid' values from the headers as Integers using 'Integer.parseInt(val)'. This is an issue because the 'gid' and 'uid' values have the potential to be larger than the maximum value of an Integer. In this specific case, the error message \"java.lang.NumberFormatException: For input string: \"4294967294\"\" implies that the input value was too large to fit in an Integer. \n\nStep 3:\nIn the corrected instance of the code, the parsing of 'gid' and 'uid' has been changed to use 'Long.parseLong(val)' instead of 'Integer.parseInt(val)'. This change allows larger numbers to be correctly parsed, preventing a NumberFormatException from occurring when numbers larger than Integer.MAX_VALUE are encountered.\n\nIn conclusion, the bug is caused by attempting to parse a large number into a smaller data type, resulting in a NumberFormatException. The fix is to change the parsing methods for the gid and uid from integer parsing to long parsing."
}