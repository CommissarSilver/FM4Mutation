{
    "bug_id": 61,
    "bug_type": "SL SH SF",
    "buggy_lines": "        int len = thisBuf.length - strLen;",
    "code": "    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        int len = thisBuf.length - strLen;\n        outer:\n        for (int i = startIndex; i < len; i++) {\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
    "fixed_code": "    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        int len = size - strLen + 1;\n        outer:\n        for (int i = startIndex; i < len; i++) {\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
    "fixed_lines": "        int len = size - strLen + 1;",
    "masked_code": "    public int indexOf(String str, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (str == null || startIndex >= size) {\n            return -1;\n        }\n        int strLen = str.length();\n        if (strLen == 1) {\n            return indexOf(str.charAt(0), startIndex);\n        }\n        if (strLen == 0) {\n            return startIndex;\n        }\n        if (strLen > size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n>>> [ INFILL ] <<<\n        outer:\n        for (int i = startIndex; i < len; i++) {\n            for (int j = 0; j < strLen; j++) {\n                if (str.charAt(j) != thisBuf[i + j]) {\n                    continue outer;\n                }\n            }\n            return i;\n        }\n        return -1;\n    }",
    "project": "Lang",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<-1> but was:<6>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(-1, sb.indexOf(\"three\"));",
    "test_name": "testIndexOfLang294",
    "test_suite": "org.apache.commons.lang.text.StrBuilderTest",
    "time_buggy": "2006-10-31 21:34:03 +0000",
    "time_fixed": "2006-10-31 22:15:00 +0000",
    "bug_description": "Bug Title: Misalignment in indexing mechanism within String Methods\n\nBug ID: 61\nProject: Lang\nBug Type: SL SH SF (Statement List, Statement Heart, Statement Fix)\n\nDetails:\nThe bug resides in the 'indexOf' method of the Lang project. This method is responsible for determining the index of a specific substring within a larger string, starting from a specified index.\n\nSteps:\n\n1.  The method takes in two parameters - 'String str' which is the substring that needs to be found and 'int startIndex' which denotes the index from which to start the search.\n2.  If the 'str' is null, or 'startIndex' is greater than or equal to 'size' (the length of the larger string), the method returns -1, indicating that the substring cannot be found.\n3.  The method calculates the length of the substring using 'str.length()'.\n4.  If the length of the substring is 1, the method calls 'indexOf(str.charAt(0), startIndex)' function and returns the result.\n5.  If the length of the substring is 0, the method directly returns 'startIndex'.\n6.  If the length of the substring is greater than the size of the string to be searched in, the method returns -1.\n7.  The method then assigns the 'buffer' which stores the contents of the larger string to 'thisBuf'.\n8.  The method then calculates 'len' which should denote the maximum limit of 'i' in the outer for loop that starts from 'startIndex' and traverses through the length of the string. The buggy line here is 'int len = thisBuf.length - strLen;', which incorrectly calculates 'len' by subtracting the length of the substring from the length of the larger string which causes the loop to ignore some possible start indices.\n\nError Message: \nGot junit.framework.AssertionFailedError: Expected <-1> but was <6> when trying to find the index of a substring within a string.\n\nFix:\nThe fixed method recalculates 'len' as 'int len = size - strLen + 1;'. This new 'len' includes all possible start indices in the search, hence not missing any possible matches of the substring within the larger string."
}