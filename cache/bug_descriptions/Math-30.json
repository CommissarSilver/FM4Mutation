{
    "bug_id": 30,
    "bug_type": "SL SH SF",
    "buggy_lines": "        final int n1n2prod = n1 * n2;",
    "code": "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        final int n1n2prod = n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        return 2 * standardNormal.cumulativeProbability(z);\n    }",
    "fixed_code": "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        final double n1n2prod = n1 * n2;\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        return 2 * standardNormal.cumulativeProbability(z);\n    }",
    "fixed_lines": "        final double n1n2prod = n1 * n2;",
    "masked_code": "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n>>> [ INFILL ] <<<\n\n        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        return 2 * standardNormal.cumulativeProbability(z);\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "        Assert.assertTrue(result > 0.1);",
    "test_name": "testBigDataSet",
    "test_suite": "org.apache.commons.math3.stat.inference.MannWhitneyUTestTest",
    "time_buggy": "2012-06-08 10:47:59 +0000",
    "time_fixed": "2012-06-08 11:04:11 +0000",
    "bug_description": "Bug ID: 30\nProject: Math\nBug Type: Syntax/Bad Math Practice\n\nDescription:\n\nThe bug resides in the function \"calculateAsymptoticPValue\" of the Math Project. Within this function, an integer multiplication operation is performed to calculate the product of two parameters n1 and n2. The product is then assigned to the variable n1n2prod which is declared as an integer data type. \n\nError:\nThe error message indicates an assertion failure and points to the line where the declaration and assignment of the integer product is being done - \"final int n1n2prod = n1 * n2;\"\n\nThe bug type is SL SH SF represents \"Statement List\", \"Statement History\", and \"Statement Future\", which are related to how statements or lines of code relatively have impacts historically, currently, and potentially in the future in a particular section or throughout the codebase.\n\nIssue:\nThe problem with trying to store the product of the multiplication operation in an integer is precision. Since the calculation and the subsequent calculations that employ the result are meant to calculate a double return value, using an integer for any step in the calculation will cause a lack of precision and likely the assertion failure that is indicated by the error message.\n\nFix:\nTo rectify this bug, the variable 'n1n2prod' has been changed to be of 'double' data type. The fixed line of code now reads: \"final double n1n2prod = n1 * n2;\". As a result, the precision of the multiplication operation is maintained and further calculations in the function return the correct value.\n\n\nHere's a step-by-step reproduction for developers to generate similar bugs:\n1. Create a function that is expected to return a value of 'double' or 'float' data type.\n2. Within this function, perform a mathematical operation (like multiplication or division) on two integers and assign the result to a variable of 'int' data type.\n3. Use this variable in subsequent precision-dependent calculations.\n4. Write a test case expecting the precise value from this function.\n\nThe assertion failure message will indicate that the precision of the calculations in the function is off, pinpointing the potential site of the bug."
}