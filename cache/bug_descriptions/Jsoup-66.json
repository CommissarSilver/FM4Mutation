{
    "bug_id": 66,
    "bug_type": "SL SH SF",
    "buggy_lines": "        clone.childNodes = new NodeList(childNodes.size());\n    private final class NodeList extends ChangeNotifyingArrayList<Node> {\n        NodeList(int initialCapacity) {\n            nodelistChanged();",
    "code": "    protected Element doClone(Node parent) {\n        Element clone = (Element) super.doClone(parent);\n        clone.attributes = attributes != null ? attributes.clone() : null;\n        clone.baseUri = baseUri;\n        clone.childNodes = new NodeList(childNodes.size());\n        clone.childNodes.addAll(childNodes);\n\n        return clone;\n    }",
    "fixed_code": "    protected Element doClone(Node parent) {\n        Element clone = (Element) super.doClone(parent);\n        clone.attributes = attributes != null ? attributes.clone() : null;\n        clone.baseUri = baseUri;\n        clone.childNodes = new NodeList(clone, childNodes.size());\n        clone.childNodes.addAll(childNodes);\n\n        return clone;\n    }",
    "fixed_lines": "        clone.childNodes = new NodeList(clone, childNodes.size());\n    private static final class NodeList extends ChangeNotifyingArrayList<Node> {\n        private final Element owner;\n\n        NodeList(Element owner, int initialCapacity) {\n            this.owner = owner;\n            owner.nodelistChanged();",
    "masked_code": "    protected Element doClone(Node parent) {\n        Element clone = (Element) super.doClone(parent);\n        clone.attributes = attributes != null ? attributes.clone() : null;\n        clone.baseUri = baseUri;\n>>> [ INFILL ] <<<\n        clone.childNodes.addAll(childNodes);\n\n        return clone;\n    }",
    "project": "Jsoup",
    "test_error_message": "java.lang.NullPointerException",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(cloneExpect, cloneNextElementSibling.text());",
    "test_name": "testNextElementSiblingAfterClone",
    "test_suite": "org.jsoup.nodes.ElementTest",
    "time_buggy": "2017-10-09 12:35:15 -0700",
    "time_fixed": "2017-10-09 14:55:26 -0700",
    "bug_description": "Bug Description:\n\nBug ID: 66\nProject: Jsoup\nBug Type: SL SH SF\n\nProblem description: \nThe issue is that the `childNode` is not associated with its parent `clone`, which is causing a `java.lang.NullPointerException`. This error happens because when we clone Nodes, the cloned child nodes are not correctly referenced to the newly cloned parent node. Hence they still point to the old parent node. This bug is present while cloning a Node.\n\nBug occurring scenario:\n1. In the `doClone` method of the Clone class, the `clone.attributes` is checked for null and appropriately cloned.\n2. The `baseUri` of the clone node is also cloned without checking for null.\n3. However, when it comes to cloning `childNodes`, a new child node list is initialized without associating it with the clone parent.\n4. The child nodes are then added to the clone's nodeList, which is not associated with any parent node.\n\nImpact: \nThis causes any subsequent methods that are called upon the childNodes to throw a `java.lang.NullPointerException` because they can't find a parent node.\n\nSolution: \nThe bug was fixed by passing the `clone` as a parameter to the NodeList constructor. This associates the new NodeList with the parent clone Node upon initialization. This fix ensures that the newly cloned child nodes are linked to the newly cloned parent node, preventing the `java.lang.NullPointerException` from occurring.\n\nFixed Code: \n```java\nprotected Element doClone(Node parent) {\n        Element clone = (Element) super.doClone(parent);\n        clone.attributes = attributes != null ? attributes.clone() : null;\n        clone.baseUri = baseUri;\n        clone.childNodes = new NodeList(clone, childNodes.size());\n        clone.childNodes.addAll(childNodes);\n\n        return clone;\n    }\n}\n```"
}