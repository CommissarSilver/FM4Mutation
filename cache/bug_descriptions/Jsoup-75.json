{
    "bug_id": 75,
    "bug_type": "SH SF",
    "buggy_lines": "            if (!(out.syntax() == Document.OutputSettings.Syntax.html\n                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {",
    "code": "    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i];\n            accum.append(' ').append(key);\n\n            // collapse checked=null, checked=\"\", checked=checked; write out others\n            if (!(out.syntax() == Document.OutputSettings.Syntax.html\n                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }",
    "fixed_code": "    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i];\n            accum.append(' ').append(key);\n\n            // collapse checked=null, checked=\"\", checked=checked; write out others\n            if (!Attribute.shouldCollapseAttribute(key, val, out)) {\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }",
    "fixed_lines": "            if (!Attribute.shouldCollapseAttribute(key, val, out)) {",
    "masked_code": "    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i];\n            accum.append(' ').append(key);\n\n            // collapse checked=null, checked=\"\", checked=checked; write out others\n>>> [ INFILL ] <<<\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<...mg src=\"foo\" noshade[] nohref async autofo...> but was:<...mg src=\"foo\" noshade[=\"\"] nohref async autofo...>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"<img src=\\\"foo\\\" noshade nohref async autofocus=\\\"false\\\">\", img.outerHtml());",
    "test_name": "booleanAttributeOutput",
    "test_suite": "org.jsoup.nodes.ElementTest",
    "time_buggy": "2017-12-03 13:01:51 -0800",
    "time_fixed": "2017-12-03 14:38:17 -0800",
    "bug_description": "Bug Description:\n\nBug ID: 75 is specific to the Jsoup project. This bug is of bug type SH SF, which indicates an incorrect semantic and logic of cause-effect in the code. The test error message suggests that there is an assertion failure. The expected output was <...mg src=\"foo\" noshade[] nohref async autofo..., but the actual output was <...mg src=\"foo\" noshade[=\"\"] nohref async autofo....\n\nIn the buggy code, the issue lies in this series of operations: \n    \n    if (!(out.syntax() == Document.OutputSettings.Syntax.html\n    && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n    \nThis condition does not seem to correctly handle whether or not to collapse attributes in HTML. The statements are evaluating whether the output syntax is HTML and whether the attribute 'val' is null, equals to 'key', and whether or not it is a boolean attribute. This is not executed correctly, leading to an incorrect output where boolean attributes are getting unwanted values.\n\nIn the fixed code, a method `Attribute.shouldCollapseAttribute(key, val, out)` is called instead of the compound conditional, which correctly decides whether or not to collapse an attribute.\n\nSteps to Reproduce:\n\n1. Initialize an instance of Document.OutputSettings and set its syntax as HTML.\n2. Declare a string variable and assign an attribute that is boolean in nature and should collapse to an empty string but does not.\n3. Invoke the buggy version of the `html()` method.\n4. Capture the output and assert that the attribute collpases properly which would not match due to the bug and hence would fail. \n\nDeveloper will see 'junit.framework.AssertionFailedError' (the one mentioned in the test error message) as there is a mismatch between the expected and the actual output.\n\nBy following these steps, developers can reproduce the bug. It's important to note that this bug might not manifest if the attributes being manipulated are not boolean in nature."
}