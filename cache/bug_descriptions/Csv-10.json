{
    "bug_id": 10,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\n        Assertions.notNull(out, \"out\");\n        Assertions.notNull(format, \"format\");\n\n        this.out = out;\n        this.format = format;\n        this.format.validate();\n        // TODO: Is it a good idea to do this here instead of on the first call to a print method?\n        // It seems a pain to have to track whether the header has already been printed or not.\n    }",
    "fixed_code": "    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\n        Assertions.notNull(out, \"out\");\n        Assertions.notNull(format, \"format\");\n\n        this.out = out;\n        this.format = format;\n        this.format.validate();\n        // TODO: Is it a good idea to do this here instead of on the first call to a print method?\n        // It seems a pain to have to track whether the header has already been printed or not.\n        if (format.getHeader() != null) {\n            this.printRecord((Object[]) format.getHeader());\n        }\n    }",
    "fixed_lines": "        if (format.getHeader() != null) {\n            this.printRecord((Object[]) format.getHeader());\n        }",
    "masked_code": "    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\n        Assertions.notNull(out, \"out\");\n        Assertions.notNull(format, \"format\");\n\n        this.out = out;\n        this.format = format;\n        this.format.validate();\n        // TODO: Is it a good idea to do this here instead of on the first call to a print method?\n        // It seems a pain to have to track whether the header has already been printed or not.\n>>> [ INFILL ] <<<\n    }",
    "project": "Csv",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<[C1,C2,C3",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"C1,C2,C3\\r\\na,b,c\\r\\nx,y,z\\r\\n\", sw.toString());",
    "test_name": "testHeader",
    "test_suite": "org.apache.commons.csv.CSVPrinterTest",
    "time_buggy": "2014-06-02 18:04:49 +0000",
    "time_fixed": "2014-06-09 22:21:22 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 10 \nProject: CSV \nBug Type: SH SF \nTest Error Message: junit.framework.AssertionFailedError: expected:<[C1,C2,C3]\n\n1. Overview:\nThe bug was located in the `CSVPrinter` class where the CSV header was not being printed.\n\n2. Preconditions:\nIt occurs when a `CSVPrinter` class object is instantiated with the `CSVFormat` format object as a parameter and if the `CSVFormat` format contains a header.\n\n3. Steps to Reproduce:\n- An `Appendable` object and a `CSVFormat` object with headers are created.\n- Then, a `CSVPrinter` object is created with the `Appendable` object and the `CSVFormat` object as parameters.\n- The `CSVPrinter` constructor does not print the headers even though the `CSVFormat` object contains a header.\n\n4. Actual Results:\nThe headers from the `CSVFormat` object were not printed on csv file. This leads to the junit assertion failure because the expected header `[C1,C2,C3` was not found in the CSV.\n\n5. Expected Results:\nWhen the `CSVPrinter` object is created, if the `CSVFormat` object contains headers, they should be printed in the output csv file.\n\n6. Fixed Code:\nIn the `CSVPrinter` constructor, an `if statement` has been added.\nRight after the `validate()` method is called on the `CSVFormat` object, the method checks if format.getHeader() is not null. If it is not null,  it invokes the `printRecord()` method on `this` object (the `CSVPrinter` object) to print the headers.\n\n7. Solution:\nIf the `CSVFormat` object contains headers, when the `CSVPrinter` object is created, the headers are now correctly printed. This successfully corrects the junit.framework.AssertionFailedError the system had previously thrown."
}