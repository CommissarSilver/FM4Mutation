{
    "bug_id": 12,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "  @Override public void skipValue() throws IOException {\n    if (peek() == JsonToken.NAME) {\n      nextName();\n      pathNames[stackSize - 2] = \"null\";\n    } else {\n      popStack();\n        pathNames[stackSize - 1] = \"null\";\n    }\n      pathIndices[stackSize - 1]++;\n  }",
    "fixed_code": "  @Override public void skipValue() throws IOException {\n    if (peek() == JsonToken.NAME) {\n      nextName();\n      pathNames[stackSize - 2] = \"null\";\n    } else {\n      popStack();\n      if (stackSize > 0) {\n        pathNames[stackSize - 1] = \"null\";\n      }\n    }\n    if (stackSize > 0) {\n      pathIndices[stackSize - 1]++;\n    }\n  }",
    "fixed_lines": "      if (stackSize > 0) {\n      }\n    if (stackSize > 0) {\n    }",
    "masked_code": "  @Override public void skipValue() throws IOException {\n    if (peek() == JsonToken.NAME) {\n      nextName();\n      pathNames[stackSize - 2] = \"null\";\n    } else {\n      popStack();\n        pathNames[stackSize - 1] = \"null\";\n    }\n      pathIndices[stackSize - 1]++;\n>>> [ INFILL ] <<<\n  }",
    "project": "Gson",
    "test_error_message": "java.lang.ArrayIndexOutOfBoundsException: -1",
    "test_framework": "defects4j",
    "test_line": "    in.skipValue();",
    "test_name": "testSkipValue_filledJsonObject",
    "test_suite": "com.google.gson.internal.bind.JsonTreeReaderTest",
    "time_buggy": "2017-02-07 19:17:28 -0500",
    "time_fixed": "2017-02-15 18:41:39 -0800",
    "bug_description": "Bug Description:\n\nBug ID: 12\nBug Type: SF (Syntax Fault)\n\nTitle: Array Index Out Of Bounds Exception in skipValue method of Gson project\n\nDescription:\n\nA bug of Syntax Fault type is present in the 'Gson' project. Specifically, an ArrayIndexOutOfBoundsException with error message 'java.lang.ArrayIndexOutOfBoundsException: -1' is occurring in the 'skipValue' method. The issue is related to array 'pathNames' and 'pathIndices', while trying to access an invalid index of -1. \n\nHere are the detailed steps to reproduce the problem:\n\nStep 1: The 'skipValue' method is called. \n\nStep 2: The 'peek' method is called and if its' return is 'JsonToken.NAME', the 'nextName' method is called and then the array 'pathNames' is assigned a value at index of 'stackSize - 2'.\n\nStep 3: If the return of 'peek' method is not 'JsonToken.NAME', then 'popStack' method is called and the array 'pathNames' is assigned a value at index of 'stackSize - 1'. This is the point where the ArrayIndexOutOfBoundsException is thrown as stackSize may be 0 at this point, resulting in an attempt to assign a value at -1 index of the array 'pathNames'.\n\nStep 4: Regardless of the previous conditional statements, the element at index 'stackSize - 1' of the array 'pathIndices' is incremented.\n\nSolution:\n\nDevelopers fixed the issue by adding conditions to check if 'stackSize' is greater than 0 before assigning to the arrays 'pathNames' and 'pathIndices'. This prevents the possibility of encountering an ArrayIndexOutOfBoundsException.\n\nThis detailed bug description and solution can be the basis of generating artificial Java bugs for testing and development purposes. It outlines how failure to account for array boundaries can lead to runtime exceptions and disrupt application flow. Consequently, developers must be careful when indexing arrays in their code and always ensure the index is within the array's size."
}