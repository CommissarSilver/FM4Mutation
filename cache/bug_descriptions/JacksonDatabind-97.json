{
    "bug_id": 97,
    "bug_type": "SL SH SF",
    "buggy_lines": "            gen.writeObject(_value);",
    "code": "    public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n    {\n        if (_value == null) {\n            ctxt.defaultSerializeNull(gen);\n        } else if (_value instanceof JsonSerializable) {\n            ((JsonSerializable) _value).serialize(gen, ctxt);\n        } else {\n            // 25-May-2018, tatu: [databind#1991] do not call via generator but through context;\n            //    this to preserve contextual information\n            gen.writeObject(_value);\n        }\n    }",
    "fixed_code": "    public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n    {\n        if (_value == null) {\n            ctxt.defaultSerializeNull(gen);\n        } else if (_value instanceof JsonSerializable) {\n            ((JsonSerializable) _value).serialize(gen, ctxt);\n        } else {\n            // 25-May-2018, tatu: [databind#1991] do not call via generator but through context;\n            //    this to preserve contextual information\n            ctxt.defaultSerializeValue(_value, gen);\n        }\n    }",
    "fixed_lines": "            ctxt.defaultSerializeValue(_value, gen);",
    "masked_code": "    public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n    {\n        if (_value == null) {\n            ctxt.defaultSerializeNull(gen);\n        } else if (_value instanceof JsonSerializable) {\n            ((JsonSerializable) _value).serialize(gen, ctxt);\n        } else {\n            // 25-May-2018, tatu: [databind#1991] do not call via generator but through context;\n            //    this to preserve contextual information\n>>> [ INFILL ] <<<\n        }\n    }",
    "project": "JacksonDatabind",
    "test_error_message": "junit.framework.AssertionFailedError: expected not same",
    "test_framework": "defects4j",
    "test_line": "        assertNotSame(w, newW);",
    "test_name": "testViewSettings",
    "test_suite": "com.fasterxml.jackson.databind.ObjectWriterTest",
    "time_buggy": "2018-05-25 15:46:15 -0700",
    "time_fixed": "2018-05-25 16:25:23 -0700",
    "bug_description": "Bug ID: 97\n\nProject: JacksonDatabind\n\nBug Type: SL SH SF\n\nStep 1: Open the JacksonDatabind project in your Java IDE. \n\nStep 2: Locate and open the class file containing the dysfunctional method called `serialize(JsonGenerator gen, SerializerProvider ctxt)`.\n\nStep 3: In this method, find the following code snippet:\n```java\ngen.writeObject(_value);\n```\n\nStep 4: The bug is caused by the incorrect usage of `gen.writeObject(_value);`. This usage fails when `_value` is not an instance of `JsonSerializable`, causing the error message `junit.framework.AssertionFailedError: expected not same`.\n\nStep 5: Identify the bug as of type 'SL SH SF', which encompasses Syntactic, Logic, and Semantic faults in the code. The logic of the 'else' clause where `gen.writeObject(_value)` is trying to write an arbitrary object (_value) into a json output but fails when `_value` is not of type `JsonSerializable`.\n\nStep 6: To fix this bug, replace the incorrect code `gen.writeObject(_value)` with the correct code `ctxt.defaultSerializeValue(_value, gen)`. This performs the operation of serializing `_value` using the default series method, instead of directly writing it as an object.\n\nFixed code should be:\n```java\nctxt.defaultSerializeValue(_value, gen);\n```\n\nStep 7: After applying the fix, the 'serialize' method will correctly handle `_value` when it is not an instance of `JsonSerializable` and it will be properly serialized, eliminating the `junit.framework.AssertionFailedError: expected not same` error. \n\nConclusion: The bug has been fixed. The 'serialize' method now correctly handles all cases when serializing `_value`, including when `_value` is not an instance of `JsonSerializable`."
}