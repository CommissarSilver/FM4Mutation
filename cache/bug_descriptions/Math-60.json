{
    "bug_id": 60,
    "bug_type": "SF",
    "buggy_lines": "        try {\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }",
    "code": "    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }",
    "fixed_code": "    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        if (FastMath.abs(dev) > 40 * standardDeviation) { \n            return dev < 0 ? 0.0d : 1.0d;\n        }\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n    }",
    "fixed_lines": "        if (FastMath.abs(dev) > 40 * standardDeviation) { \n            return dev < 0 ? 0.0d : 1.0d;\n        }",
    "masked_code": "    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n>>> [ INFILL ] <<<\n    }",
    "project": "Math",
    "test_error_message": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);",
    "test_name": "testExtremeValues",
    "test_suite": "org.apache.commons.math.distribution.NormalDistributionTest",
    "time_buggy": "2010-11-29 01:43:12 +0000",
    "time_fixed": "2010-11-30 11:55:22 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 60\n\nProject: Math\n\nBug Type: Software Failure (SF)\n\nTest Error Message: \nThis bug is identified through the error message: org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e. The error is a convergence exception which is thrown when a mathematical function fails to converge to a finite value.\n\nFaulty Lines:\nThe suspected buggy lines of code are within a 'try-catch' block. When there is an instance of 'MaxIterationsExceededException', the code checks whether the variable 'x' is less than (mean - 20 * standardDeviation), if true it returns 0. If 'x' is more than (mean + 20 * standardDeviation), it returns 1. If neither conditions are met, it throws the exception. \n\nInitial Code:\nThe initial code defines a public method 'cumulativeProbability' that accepts 'x' as input and returns a double value. The method uses the Apache Math library with a 'try-catch' block that handles 'MaxIterationsExceededException'. Some comments in the block note that JDK 1.5 fails at 38, which might suggest there are issues with handling values beyond a certain threshold.\n\nFixed Code:\nIn the fixed version of the code, there's an if statement before the return that handles extreme values of 'dev', which is the difference between 'x' and 'mean'. It checks whether the absolute value of 'dev' is larger than 40 * standardDeviation. If 'dev' is less than 0, it returns 0.0d, if it isn't, it returns 1.0d. The 'if' condition seems to handle the issues found in the test error message where the continued fraction diverged to NaN for value \u221e.\n\nSteps to reproduce the bug:\nTo generate the bug, you need to input a value of 'x' that results in 'MaxIterationsExceededException' and doesn't meet the criteria of the 'if' and 'else if' conditions in the 'catch' block. These conditions are 'x < (mean - 20 * standardDeviation)' and 'x > (mean + 20 * standardDeviation)'. This would cause the code to attempt to throw the exception and result in the given error message.\n\nTo generate similar bugs, developers can artificially throw exceptions that are either not caught correctly, or result in further problems when caught. Additionally, they can simulate situations where mathematical calculations fail to converge, which is the case in this particular incident."
}