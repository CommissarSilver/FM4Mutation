{
    "bug_id": 7,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public int writeValue() {\n        // Most likely, object:\n        if (_type == TYPE_OBJECT) {\n            _gotName = false;\n            ++_index;\n            return STATUS_OK_AFTER_COLON;\n        }\n\n        // Ok, array?\n        if (_type == TYPE_ARRAY) {\n            int ix = _index;\n            ++_index;\n            return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n        }\n        \n        // Nope, root context\n        // No commas within root context, but need space\n        ++_index;\n        return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n    }",
    "fixed_code": "    public int writeValue() {\n        // Most likely, object:\n        if (_type == TYPE_OBJECT) {\n            if (!_gotName) {\n                return STATUS_EXPECT_NAME;\n            }\n            _gotName = false;\n            ++_index;\n            return STATUS_OK_AFTER_COLON;\n        }\n\n        // Ok, array?\n        if (_type == TYPE_ARRAY) {\n            int ix = _index;\n            ++_index;\n            return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n        }\n        \n        // Nope, root context\n        // No commas within root context, but need space\n        ++_index;\n        return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n    }",
    "fixed_lines": "            if (!_gotName) {\n                return STATUS_EXPECT_NAME;\n            }",
    "masked_code": "    public int writeValue() {\n        // Most likely, object:\n        if (_type == TYPE_OBJECT) {\n>>> [ INFILL ] <<<\n            _gotName = false;\n            ++_index;\n            return STATUS_OK_AFTER_COLON;\n        }\n\n        // Ok, array?\n        if (_type == TYPE_ARRAY) {\n            int ix = _index;\n            ++_index;\n            return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n        }\n        \n        // Nope, root context\n        // No commas within root context, but need space\n        ++_index;\n        return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n    }",
    "project": "JacksonCore",
    "test_error_message": "junit.framework.AssertionFailedError: Should not have let com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString() be used in place of 'writeFieldName()': output = {:\"a\"",
    "test_framework": "defects4j",
    "test_line": "            fail(\"Should not have let \"+gen.getClass().getName()+\".writeString() be used in place of 'writeFieldName()': output = \"+json);",
    "test_name": "testFailOnWritingStringNotFieldNameBytes",
    "test_suite": "com.fasterxml.jackson.core.json.GeneratorFailTest",
    "time_buggy": "2015-01-12 14:01:00 -0800",
    "time_fixed": "2015-01-15 16:10:26 -0800",
    "bug_description": "Bug ID: 7\nProject: JacksonCore \nBug Type: SH SF (Single-method, and Single-file)  \n\nStatus: Open\n\nDescription: \n\nThe bug is present in the 'writeValue()' method in the JacksonCore project. This bug specifically revolves around an error with using the 'com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString()' in places where 'writeFieldName()' should have been used. The error is indicated through a `junit.framework.AssertionFailedError`, suggesting that a unit test has failed.\n\nSteps to reproduce: \n\n1. The error seems to occur when the `writeValue()` method is invoked on an object of the type that uses this piece of code.\n2. Within the `writeValue()` function, it first checks for the `_type` of object. \n3. If the `_type` is `TYPE_OBJECT`, it sets `_gotName` to `false` and increments `_index`. \n4. The function then returns `STATUS_OK_AFTER_COLON` even though there seems to be a misuse of `com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString()` function where 'writeFieldName()' was expected.\n5. Since this issue has surfaced during a unit test run, it could be concluded that the test case that tests this specific sequence of operation is failing.\n\nSolution:\nThe bug gets resolved in the fixed code provided, by adding a fix in the `TYPE_OBJECT` block within the `writeValue()` method. Before setting `_gotName` to `false` and incrementing `_index`, a check is added to verify if `_gotName` is `false`. If it is `false`, it indicates that the name has not been received yet, and it returns `STATUS_EXPECT_NAME` instead of `STATUS_OK_AFTER_COLON`. \n\nThis fix enforces the requirement that a name must be written before a value when handling objects. As a result, the function 'writeFieldName()' gets correctly used instead of 'writeString()', thus preventing the `junit.framework.AssertionFailedError` that was happening earlier."
}