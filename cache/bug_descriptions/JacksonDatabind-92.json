{
    "bug_id": 92,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };\n\n    private final static Class<?>[] NO_VIEWS = new Class<?>[0];\n\n    /**\n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     */\n    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;\n    static {\n        Set<String> s = new HashSet<String>();\n        // Courtesy of [https://github.com/kantega/notsoserial]:\n        // (and wrt [databind#1599])\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");\n        // [databind#1680]: may or may not be problem, take no chance\n        s.add(\"com.sun.rowset.JdbcRowSetImpl\");\n        // [databind#1737]; JDK provided\n        // [databind#1737]; 3rd party\n\n        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\n    }",
    "fixed_code": "    private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };\n\n    private final static Class<?>[] NO_VIEWS = new Class<?>[0];\n\n    /**\n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     */\n    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;\n    static {\n        Set<String> s = new HashSet<String>();\n        // Courtesy of [https://github.com/kantega/notsoserial]:\n        // (and wrt [databind#1599])\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");\n        // [databind#1680]: may or may not be problem, take no chance\n        s.add(\"com.sun.rowset.JdbcRowSetImpl\");\n        // [databind#1737]; JDK provided\n        s.add(\"java.util.logging.FileHandler\");\n        s.add(\"java.rmi.server.UnicastRemoteObject\");\n        // [databind#1737]; 3rd party\n        s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");\n        s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");\n        s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n        s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n\n        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\n    }",
    "fixed_lines": "        s.add(\"java.util.logging.FileHandler\");\n        s.add(\"java.rmi.server.UnicastRemoteObject\");\n        s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");\n        s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");\n        s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n        s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
    "masked_code": "    private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };\n\n    private final static Class<?>[] NO_VIEWS = new Class<?>[0];\n\n    /**\n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     */\n    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;\n    static {\n        Set<String> s = new HashSet<String>();\n        // Courtesy of [https://github.com/kantega/notsoserial]:\n        // (and wrt [databind#1599])\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");\n        // [databind#1680]: may or may not be problem, take no chance\n        s.add(\"com.sun.rowset.JdbcRowSetImpl\");\n        // [databind#1737]; JDK provided\n        // [databind#1737]; 3rd party\n>>> [ INFILL ] <<<\n\n        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\n    }",
    "project": "JacksonDatabind",
    "test_error_message": "junit.framework.AssertionFailedError: Should not pass",
    "test_framework": "defects4j",
    "test_line": "            fail(\"Should not pass\");",
    "test_name": "testJDKTypes1737",
    "test_suite": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest",
    "time_buggy": "2017-06-30 09:30:13 -0700",
    "time_fixed": "2017-12-12 15:05:35 -0800",
    "bug_description": "Bug ID: 92\nProject: JacksonDatabind\nBug Type: Serialization Failure (SF)\n\nDescription:\nThe bug is related to the deserialization of certain classes considered \"dangerous\". The project has a fixed set of class names, named `DEFAULT_NO_DESER_CLASS_NAMES`, that the system prevents from deserializing. The bug arises when the project attempts to deserialize these classes, throwing a junit.framework.AssertionFailedError with an error message \"Should not pass\". \n\nHere are the step-by-step details of the bug:\n\n1. Serialized data of certain classes are received or read by the project. The classes of the serialized data include but are not limited to ones listed in `DEFAULT_NO_DESER_CLASS_NAMES`.\n2. The deserialization function attempts to transform the serialized data back into a Java object, specifically an object of the class type of the serialized data.\n3. The function checks whether the class type of the serialized data is present in `DEFAULT_NO_DESER_CLASS_NAMES`.\n4. If present, an error should be thrown or the deserialize operation should immediately be stopped as part of the project's protection against these \"nasty classes\".\n5. However, the issue here is that the filter is not working as expected and allows the deserialization of these classes, in contradiction to the intended behavior.\n\nSolution:\nThe fixed code added more class names into the `DEFAULT_NO_DESER_CLASS_NAMES` set to extend the range of \"nasty classes\". The class names added include \"java.util.logging.FileHandler\", \"java.rmi.server.UnicastRemoteObject\", and more. This suggests the bug was fixed by broadening the scope of class names that the system wouldn't deserialize, hardening the security measures against potential exploits related to deserialization of these classes."
}