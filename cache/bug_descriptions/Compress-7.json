{
    "bug_id": 7,
    "bug_type": "SF",
    "buggy_lines": "            if (buffer[i] == 0) {\n            result.append((char) buffer[i]);",
    "code": "    public static String parseName(byte[] buffer, final int offset, final int length) {\n        StringBuffer result = new StringBuffer(length);\n        int          end = offset + length;\n\n        for (int i = offset; i < end; ++i) {\n            if (buffer[i] == 0) {\n                break;\n            }\n            result.append((char) buffer[i]);\n        }\n\n        return result.toString();\n    }",
    "fixed_code": "    public static String parseName(byte[] buffer, final int offset, final int length) {\n        StringBuffer result = new StringBuffer(length);\n        int          end = offset + length;\n\n        for (int i = offset; i < end; ++i) {\n            byte b = buffer[i];\n            if (b == 0) { // Trailing null\n                break;\n            }\n            result.append((char) (b & 0xFF)); // Allow for sign-extension\n        }\n\n        return result.toString();\n    }",
    "fixed_lines": "            byte b = buffer[i];\n            if (b == 0) { // Trailing null\n            result.append((char) (b & 0xFF)); // Allow for sign-extension",
    "masked_code": "    public static String parseName(byte[] buffer, final int offset, final int length) {\n        StringBuffer result = new StringBuffer(length);\n        int          end = offset + length;\n\n        for (int i = offset; i < end; ++i) {\n                break;\n            }\n>>> [ INFILL ] <<<\n        }\n\n        return result.toString();\n    }",
    "project": "Compress",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<0302-0601-3[\u00b1\u00b1\u00b1F06\u00b1W220\u00b1ZB\u00b1LALALA\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1CAN\u00b1\u00b1DC\u00b1\u00b1\u00b104\u00b1060302\u00b1]MOE.model> but was:<0302-0601-3[\uffb1\uffb1\uffb1F06\uffb1W220\uffb1ZB\uffb1LALALA\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1CAN\uffb1\uffb1DC\uffb1\uffb1\uffb104\uffb1060302\uffb1]MOE.model>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(string, TarUtils.parseName(buff, 0, len));",
    "test_name": "testRoundTripNames",
    "test_suite": "org.apache.commons.compress.archivers.tar.TarUtilsTest",
    "time_buggy": "2010-05-13 15:32:39 +0000",
    "time_fixed": "2010-05-17 14:51:17 +0000",
    "bug_description": "Bug Description:\n\nBug ID: The bug in question is identified by Bug ID#7.\n\nProject: This bug was found in the project named 'Compress'. \n\nBug type: The bug type is SF, which may mean it's a Specific Functional error.\n\nError message: The error message indicating the presence of this bug came from a junit testing framework. The test reported a ComparisonFailure. The specific error message is 'junit.framework.ComparisonFailure: expected:<0302-0601-3[\u00b1\u00b1\u00b1F06\u00b1W220\u00b1ZB\u00b1LALALA\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1CAN\u00b1\u00b1DC\u00b1\u00b1\u00b104\u00b1060302\u00b1]MOE.model> but was:<0302-0601-3[\uffb1\uffb1\uffb1F06\uffb1W220\uffb1ZB\uffb1LALALA\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1\uffb1CAN\uffb1\uffb1DC\uffb1\uffb1\uffb104\uffb1060302\uffb1]MOE.model>'. This error message suggests that the actual output of some operation did not match the expected output. The expected and actual output differ for the characters between square brackets.\n\nBuggy lines: The error can be traced back to the specific lines of code. The code in question lies within the 'parseName' function where it appends character to the result. Specifically, it checks if any element of the buffer array is equal to zero and if so, it appends the ASCII value of that zero to the result. The erroneous code is:\n```\n                if (buffer[i] == 0) {\n            result.append((char) buffer[i]);\n```\n\nBuggy function:\nThe function that has this bug is named 'parseName.' The function has three parameters: a byte array called 'buffer,' and two integers named 'offset,' and 'length'. The function is designed to parse a name from an array of bytes beginning at a specific offset and for a certain length. It does so by appending characters from the byte array to a StringBuffer object. The function stops appending characters once it hits zero in the byte array.\n\nFixed code: The fixed code uses bitwise AND operation \"&\" with 0xFF to ensure that the sign is preserved when casting the byte b to a char. The fixed code is as follows:\n``` \n        public static String parseName(byte[] buffer, final int offset, final int length) {\n        StringBuffer result = new StringBuffer(length);\n        int          end = offset + length;\n\n        for (int i = offset; i < end; ++i) {\n            byte b = buffer[i];\n            if (b == 0) { // Trailing null\n                break;\n            }\n            result.append((char) (b & 0xFF)); // Allow for sign-extension\n        }\n\n        return result.toString();\n    }\n```\nThe fixed code ensures correct character conversion and prevents unexpected results due to sign extension."
}