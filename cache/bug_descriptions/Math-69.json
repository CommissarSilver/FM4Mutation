{
    "bug_id": 69,
    "bug_type": "SL SH SF",
    "buggy_lines": "                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
    "code": "    public RealMatrix getCorrelationPValues() throws MathException {\n        TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n        int nVars = correlationMatrix.getColumnDimension();\n        double[][] out = new double[nVars][nVars];\n        for (int i = 0; i < nVars; i++) {\n            for (int j = 0; j < nVars; j++) {\n                if (i == j) {\n                    out[i][j] = 0d;\n                } else {\n                    double r = correlationMatrix.getEntry(i, j);\n                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                }\n            }\n        }\n        return new BlockRealMatrix(out);\n    }",
    "fixed_code": "    public RealMatrix getCorrelationPValues() throws MathException {\n        TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n        int nVars = correlationMatrix.getColumnDimension();\n        double[][] out = new double[nVars][nVars];\n        for (int i = 0; i < nVars; i++) {\n            for (int j = 0; j < nVars; j++) {\n                if (i == j) {\n                    out[i][j] = 0d;\n                } else {\n                    double r = correlationMatrix.getEntry(i, j);\n                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n                    out[i][j] = 2 * tDistribution.cumulativeProbability(-t);\n                }\n            }\n        }\n        return new BlockRealMatrix(out);\n    }",
    "fixed_lines": "                    out[i][j] = 2 * tDistribution.cumulativeProbability(-t);",
    "masked_code": "    public RealMatrix getCorrelationPValues() throws MathException {\n        TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n        int nVars = correlationMatrix.getColumnDimension();\n        double[][] out = new double[nVars][nVars];\n        for (int i = 0; i < nVars; i++) {\n            for (int j = 0; j < nVars; j++) {\n                if (i == j) {\n                    out[i][j] = 0d;\n                } else {\n                    double r = correlationMatrix.getEntry(i, j);\n                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n>>> [ INFILL ] <<<\n                }\n            }\n        }\n        return new BlockRealMatrix(out);\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "        assertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);",
    "test_name": "testPValueNearZero",
    "test_suite": "org.apache.commons.math.stat.correlation.PearsonsCorrelationTest",
    "time_buggy": "2010-05-16 23:44:51 +0000",
    "time_fixed": "2010-05-16 23:48:07 +0000",
    "bug_description": "Bug ID: 69\nProject: Math\nBug Type: System Level Soft-Hardware Failure (SL SH SF)\n\nDescription:\n\nThis bug in 'Math' project consists of an erroneous line of code in the 'getCorrelationPValues' function, which seems to be a statistical method used to calculate the correlation p-values in a real matrix.\n\nErroneous Code: \n\n    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n    \nCorrect Code:\n\n    out[i][j] = 2 * tDistribution.cumulativeProbability(-t);\n\nGiven the 'junit.framework.AssertionFailedError' error message, it seems that a specific functional assertion was failed during testing, leading to the identification of this bug. \n\nIn the error line, the cumulative probability of the t value is subtracted from 1 and the result is multiplied by 2. However, in terms of statistical analysis, this calculation may be incorrect. Depending on the application, the correct calculation should be the cumulative probability of the negative t value multiplied by 2. Multiplying by 2 implies that it's a two-tailed test, not one-tailed.\n\nSteps to reproduce the bug:\n\n1. Call the method 'getCorrelationPValues'.\n2. Prepare and supply the mathematical complexities needed for the method to run.\n3. The bug might be triggered due to the state of the matrix correlations or the dimension of the matrix. It might create a calculation issue due to the wrong formula being applied.\n4. The error could cause incorrect results returned for the correlation p-values which might affect further statistical analyses or computational procedures.\n\nTo fix this bug, replacing the erroneous code line with the correct code should resolve the junit.framework.AssertionFailedError. It might be ideal to validate this change and cross-verify it with statistically sound tests to make sure it fits the project requirements. In addition, unit tests should be augmented to catch such errors in the future."
}