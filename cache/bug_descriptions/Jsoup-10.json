{
    "bug_id": 10,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "fixed_code": "    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                if (relUrl.startsWith(\"?\"))\n                    relUrl = base.getPath() + relUrl;\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "fixed_lines": "                if (relUrl.startsWith(\"?\"))\n                    relUrl = base.getPath() + relUrl;",
    "masked_code": "    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n>>> [ INFILL ] <<<\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<...tp://jsoup.org/path/[file]?foo> but was:<...tp://jsoup.org/path/[]?foo>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"http://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));",
    "test_name": "absHandlesRelativeQuery",
    "test_suite": "org.jsoup.nodes.NodeTest",
    "time_buggy": "2011-07-02 21:12:02 +1000",
    "time_fixed": "2011-07-02 21:12:02 +1000",
    "bug_description": "Bug Description:\n\n1. Bug ID: The bug has been assigned an ID 10 for tracking and referencing.\n\n2. Project: The bug is found in the Jsoup project. Jsoup is a Java library used for working with real-world HTML. It provides a very convenient API for fetching and parsing HTML documents.\n\n3. Bug Type: The type of the bug is SH SF, which indicates a Software Failure due to a Segment Hide.\n\n4. Test Error Message: The error message received from the test is: \"junit.framework.AssertionFailedError: expected:<...tp://jsoup.org/path/[file]?foo> but was:<...tp://jsoup.org/path/[]?foo>\". This error message indicates a failed assertion in JUnit test where the expected URL was not the same as the actual URL being returned by the 'absUrl()' method.\n\n5. Buggy Lines: The error is located in the 'absUrl()' method in the Jsoup project. Specifically, the error is linked with how the relative URL (relUrl) is computed and used incorrectly to form an absolute URL.\n\n6. Code Strategy: The 'absUrl()' method is designed to return the absolute url for a relative url attribute given as input. It does this by initializing a base URL and then creating a new URL with this base and the relative url.\n\n7. Error: Due to some Java quirks, if the relative url starts with a '?', Java incorrectly resolves the path. This causes the URL to lose its filename and only keep its parameters, causing the path to be incorrectly formed.\n\n8. Solution: The fix is to check if the relative URL starts with '?'. If it does, then the code concatenates the path with the relative url. This explicitly fixes the path of the URL in such scenarios. Now, the final URL is correctly formed and is congruous with the expectations.\n\n9. Fixed Code: The fixed code includes a small if-statement to check for '?' at the beginning of the relative url and appropriately forms the correct absolute URL. This fixed code ensures that the application now passes the junit test that previously failed.\n\nBy following this detailed bug description, developers can gain a clear understanding of what the bug is, why it's occurring, and how to go about replicating it for creating similar Java bugs for testing purposes."
}