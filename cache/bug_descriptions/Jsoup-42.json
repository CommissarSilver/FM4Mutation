{
    "bug_id": 42,
    "bug_type": "SF",
    "buggy_lines": "                    final String val = el.val();",
    "code": "    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val();\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "fixed_code": "    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "fixed_lines": "                    final String val = el.val().length() >  0 ? el.val() : \"on\";",
    "masked_code": "    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n>>> [ INFILL ] <<<\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<6> but was:<7>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(6, data.size());",
    "test_name": "createsFormData",
    "test_suite": "org.jsoup.nodes.FormElementTest",
    "time_buggy": "2015-04-02 18:51:20 -0700",
    "time_fixed": "2015-04-02 19:14:23 -0700",
    "bug_description": "Bug Report:\n\nTitle: Assertion Failure Occurring in Jsoup due to Unexpected Element Values\n\n**Bug ID**: 42\n\n**Project**: Jsoup\n\n**Bug Type:** SF (software failure)\n\n**Details:**\nIn the Jsoup project, while running the unit tests, there was an AssertionFailedError. The expected value was <6> but the returned value was <7>\n  \n**Faulty Code**: \nThe faulty code is in the method 'formData()' of the Jsoup project. The line where the bug seems to be found is: \n   `final String val = el.val();`\nThe issue appears to happen when the form data is being accumulated and added. The method failed to process elements correctly when their values were unexpectedly different or even empty, resulting in incorrect accumulation in the form data.\n\n**Steps to Reproduce:** \nRunning the unit tests that check the correct creation and population of form data can help to reproduce this issue. Pay attention particularly to checks where the number of elements in the form data is assumed to be exact, or where specific values of the form data elements are expected.\n\n**Effected area**: This affects any feature that involves the creation and submission of form data, potentially leading to malformed requests or incorrect handling of form data.\n\n**Fix:**\nThe issue was resolved by the addition of a check in the 'formData()' method to ignore disabled form inputs since their values aren\u2019t submitted with the form. As with checkboxes and radio buttons, to ensure that any checkbox or radio input without a value has the default value of \"on\", a validity check was made as : \n\n`final String val = el.val().length() >  0 ? el.val() : \"on\";`\n\nThese changes ensure that the collected form data is now accurate and matches the expected outcome of the unit tests.\n\n**Fixed Code**: The fixed code is now available in the latest version of the Jsoup project. The changes have been added to the 'formData()' method, which now correctly handles form data accumulating and adding. \n\nThe bug fix was successfully validated via the unit test that previously failed. \n\n**Suggestions for test cases to generate artificial bugs in future:**\n1. Vary or mix the type of form elements being processed to check if the formData() can handle different elements simultaneously.\n2. Deactivate or remove the attributes of some form elements to see if the code can correctly ignore them.\n3. Explicitly set the value of some checkboxes or radio buttons to an empty string to see if the code correctly sets the value to the default."
}