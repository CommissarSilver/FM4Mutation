{
    "bug_id": 102,
    "bug_type": "SF",
    "buggy_lines": "    removeDuplicateDeclarations(root);",
    "code": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "fixed_code": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    removeDuplicateDeclarations(root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "fixed_lines": "    removeDuplicateDeclarations(root);",
    "masked_code": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n>>> [ INFILL ] <<<\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError:",
    "test_framework": "defects4j",
    "test_line": "      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +",
    "test_name": "testIssue115",
    "test_suite": "com.google.javascript.jscomp.CompilerRunnerTest",
    "time_buggy": "2010-02-25 04:37:22 +0000",
    "time_fixed": "2010-02-26 15:11:05 +0000",
    "bug_description": "Bug ID: 102\nProject: Closure\nBug Type: Semantic Fault (SF)\n\nDescription:\n\nThe reported issue resides within the `process` method of an unspecified class working with the Closure project. This method is designed to traverse a tree structure (defined by `Node root`), remove duplicate declarations, mark local names as unique, and propagate constant annotations. \n\nSteps to reproduce:\n\n1. Call the `process` method on an instance of this class, passing as parameters an external node `externs` and a root node `root`.\n2. The first action that this method does is to traverse the root node using `NodeTraversal.traverse(compiler, root, this)`, with no error reported.\n3. If the constant `MAKE_LOCAL_NAMES_UNIQUE` is set to true, the method will then instantiate a `MakeDeclaredNamesUnique` object named `renamer`, use it to instantiate a `NodeTraversal` object `t`, and call `t.traverseRoots(externs, root)`.\n\nThe bug:\n\n4. The error arises when `removeDuplicateDeclarations(root)` is called, causing the test suite to throw a `junit.framework.AssertionFailedError`.\n5. The call to `new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root)` appears not to generate any errors.\n\nGiven the provided fixed code, it seems that `removeDuplicateDeclarations(root)` should be executed before checking if `MAKE_LOCAL_NAMES_UNIQUE` is set to true and making the respective node traversals, rather than after.\n\nThe fix:\n\nThe fixed code swaps the positioning of `removeDuplicateDeclarations(root)` and the `if (MAKE_LOCAL_NAMES_UNIQUE)` conditional. After this change, the `junit.framework.AssertionFailedError` is no longer thrown by the test suite, indicating the bug has been solved.\n\nThis bug is classified as a Semantic Fault (SF) as the logic inside the function `process` was incorrect, resulting in the improper execution order and leading to the test suite failure."
}