{
    "bug_id": 45,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // if the lower value is greater than the length of the string,\n        // set to the length of the string\n        // if the upper value is -1 (i.e. no limit) or is greater\n        // than the length of the string, set to the length of the string\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        // if upper is less than lower, raise it to lower\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            // only if abbreviation has occured do we append the appendToEnd value\n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }",
    "fixed_code": "    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // if the lower value is greater than the length of the string,\n        // set to the length of the string\n        if (lower > str.length()) {\n            lower = str.length();    \n        }\n        // if the upper value is -1 (i.e. no limit) or is greater\n        // than the length of the string, set to the length of the string\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        // if upper is less than lower, raise it to lower\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            // only if abbreviation has occured do we append the appendToEnd value\n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }",
    "fixed_lines": "        if (lower > str.length()) {\n            lower = str.length();    \n        }",
    "masked_code": "    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // if the lower value is greater than the length of the string,\n        // set to the length of the string\n>>> [ INFILL ] <<<\n        // if the upper value is -1 (i.e. no limit) or is greater\n        // than the length of the string, set to the length of the string\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        // if upper is less than lower, raise it to lower\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            // only if abbreviation has occured do we append the appendToEnd value\n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }",
    "project": "Lang",
    "test_error_message": "java.lang.StringIndexOutOfBoundsException: String index out of range: 15",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));",
    "test_name": "testAbbreviate",
    "test_suite": "org.apache.commons.lang.WordUtilsTest",
    "time_buggy": "2008-05-11 04:54:36 +0000",
    "time_fixed": "2008-05-11 05:18:02 +0000",
    "bug_description": "Bug Title: String Index OutOfBoundsException in the abbreviate method in the Lang Project\n\nBug ID: 45\n\nAffected Project: Lang\n\nBug Type: Semantic Error - SH SF\n\nSteps to Reproduce:\n1. Invoke the abbreviate method with the following parameters: \n   - A string that has a length less than the provided upper or lower boundary.\n   - Some lower or upper boundary that exceeds the length of the given string.\n   - An arbitrary string to append to the end.\n2. This causes a call to StringUtils.indexOf with a lower boundary that exceeds the length of the string.\n3. It also results in a call to str.substring(0, upper) where upper might be greater than the actual length of the string.\n\nSymptom (Test Error Message): java.lang.StringIndexOutOfBoundsException: String index out of range: 15\n\nProblematic Code:\nHere the problem lies in condition validation of the lower and upper values. If the lower boundary is more than the length of the string, no adjustments are made to accommodate this situation. Upper boundary adjustment occurs only when the upper boundary is set to -1 or is greater than the length of the string.\n\n```java\nif (upper == -1 || upper > str.length()) {\n    upper = str.length();\n}\n```\n\nFix:\nCheck and adjust the lower boundary values as well - if lower value is greater than the length of the string, set it to the length of the string.\n\n```java\nif (lower > str.length()) {\n    lower = str.length();\n}\n```\n\nIn the fixed version, the lower boundary also is adjusted if it exceeds the string length. \n\nRisk: High - This bug prevents the usage of the 'abbreviate' method with strings shorter than the lower or upper boundary. This could cause a considerable number of failures if the 'abbreviate' method is frequently used in the project.\n\nNote:\nSH (Statement/Method call replacement): Where the error is using the wrong method or statement.\nSF (Statement/Method call parameters modification): Where the error is using a method or statement but the parameters passed to the method or used in the statement operation are incorrect."
}