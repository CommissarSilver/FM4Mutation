{
    "bug_id": 27,
    "bug_type": "SF",
    "buggy_lines": "            return charset;",
    "code": "    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            charset = charset.toUpperCase(Locale.ENGLISH);\n            return charset;\n        }\n        return null;\n    }",
    "fixed_code": "    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            if (Charset.isSupported(charset)) return charset;\n            charset = charset.toUpperCase(Locale.ENGLISH);\n            if (Charset.isSupported(charset)) return charset;\n        }\n        return null;\n    }",
    "fixed_lines": "            if (Charset.isSupported(charset)) return charset;\n            if (Charset.isSupported(charset)) return charset;",
    "masked_code": "    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            charset = charset.toUpperCase(Locale.ENGLISH);\n>>> [ INFILL ] <<<\n        }\n        return null;\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<[utf]-8> but was:<[UTF]-8>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"utf-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=utf-8 \"));",
    "test_name": "testCharset",
    "test_suite": "org.jsoup.helper.DataUtilTest",
    "time_buggy": "2012-07-17 21:16:54 -0700",
    "time_fixed": "2012-07-18 22:33:01 -0700",
    "bug_description": "Bug Description:\n\nBug ID: 27 is located in the Jsoup project. This bug is of the Semantic Failure (SF) type, which refers to the program's execution process that leads to a disagreeable, unexpected outcome.\n\nBug Context:\n\nThe buggy code snippet is sourced from a static method, getCharsetFromContentType, that extracts the Charset from a given content type string. The bug shows up in the return of the string variable charset.\n\nTrigger:\n\nThe error message reveals that during a test, an AssertionFailedError occurred. The test was expecting the Charset to be returned in lowercase (i.e., 'utf-8'), but the method returned it in uppercase (i.e., 'UTF-8').\n\nBuggy Code Explanation:\n\nIn the buggy code, the method takes a contentType string as input. It first checks if this contentType string is null, if it is null, it returns null. If not, a Matcher object 'm' is created by applying the .matcher() method on charsetPattern, using contentType as the argument. If the matcher object 'm' finds a match, it sets this match (after applying a trim method) as the charset string. The string is then converted to uppercase using the toUpperCase method with the Locale.ENGLISH parameter. It computes this regardless of whether the Charset is supported. \n\nFixed Code Explanation:\n\nIn the fixed code version, a critical check has been added to validate whether the Charset is supported before returning the charset string. If the Charset is supported as is, it is returned right away. If it is unsupported, the code still converts the charset string to uppercase but then checks again if the newly converted charset is supported. The method will return the charset if it is supported; else it will return null.\n\nPossible Steps to Artificially Induce the Bug:\n1. Remove the lines that check if the Charset is supported.\n2. Return the charset in uppercase without conducting any validation for support.\n3. Test this function with a valid Charset in lowercase. The function will fail if it expects the return value in lowercase."
}