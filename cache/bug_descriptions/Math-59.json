{
    "bug_id": 59,
    "bug_type": "SL SH SF",
    "buggy_lines": "        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);",
    "code": "    public static float max(final float a, final float b) {\n        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n    }",
    "fixed_code": "    public static float max(final float a, final float b) {\n        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);\n    }",
    "fixed_lines": "        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);",
    "masked_code": "    public static float max(final float a, final float b) {\n>>> [ INFILL ] <<<\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError: max(50.0, -50.0) expected:<50.0> but was:<-50.0>",
    "test_framework": "defects4j",
    "test_line": "            Assert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\",",
    "test_name": "testMinMaxFloat",
    "test_suite": "org.apache.commons.math.util.FastMathTest",
    "time_buggy": "2011-01-17 16:52:23 +0000",
    "time_fixed": "2011-01-17 19:55:01 +0000",
    "bug_description": "\nBug Description:\n\nBug ID: 59\nProject: Math\nBug Type: SL SH SF: Semantic bugs including Statement's logic (SL), semantical hides (SH), and semantical faults (SF).\n\nDescription:\nThe bug resides in the max() function of the Math project. There is a logical error in the method which is designed to return the maximum between two float numbers.\n\nOriginal Statement:\nreturn (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n\nIssue:\nThe condition correctly checks if 'a' is less than or equal to 'b'. If true, the maximum value is 'b', as expected.\nHowever, in the case where 'a' is not less than or equal to 'b', it should return 'a' as it is the greater number. But, due to a logical issue, it still returns 'b'. The function checks if the summation of the two values is NaN but still returns 'b', which is incorrect.\nThe issue is generated when the test case asserts max(50.0, -50.0) to be 50.0 (as it is indeed the maximum value) but the method returns -50.0 due to this logic flaw.\n\nSteps:\n\nHere, the logical error is in the ternary operator:\nThe initial condition \"(a <= b) ? b\" checks if 'a' is less than or equal to 'b', and if true, it returns 'b'.\n\nThe mistake happens in the else part of the logic \" : (Float.isNaN(a + b) ? Float.NaN : b)\", where regardless of whether the sum of 'a' and 'b' is a number or not, the method is programmed to still return 'b', leading to the incorrect result when 'a' is actually greater than 'b'.\n\nSolution:\nIn the ternary operator, if the sum of 'a' and 'b' is a number, the method should return 'a' as it is the higher value. Therefore, the corrected statement will be:\n\"return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);\""
}