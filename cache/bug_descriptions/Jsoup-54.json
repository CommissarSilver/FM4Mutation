{
    "bug_id": 54,
    "bug_type": "SL SH SF",
    "buggy_lines": "",
    "code": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]\n                String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n                    el.setAttribute(key, attribute.getValue());\n            }\n        }",
    "fixed_code": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]\n                String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n                if (key.matches(\"[a-zA-Z_:]{1}[-a-zA-Z0-9_:.]*\"))\n                    el.setAttribute(key, attribute.getValue());\n            }\n        }",
    "fixed_lines": "                if (key.matches(\"[a-zA-Z_:]{1}[-a-zA-Z0-9_:.]*\"))",
    "masked_code": "        private void copyAttributes(org.jsoup.nodes.Node source, Element el) {\n            for (Attribute attribute : source.attributes()) {\n                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]\n                String key = attribute.getKey().replaceAll(\"[^-a-zA-Z0-9_:.]\", \"\");\n>>> [ INFILL ] <<<\n                    el.setAttribute(key, attribute.getValue());\n            }\n        }",
    "project": "Jsoup",
    "test_error_message": "org.w3c.dom.DOMException: INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified.",
    "test_framework": "defects4j",
    "test_line": "        Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);",
    "test_name": "handlesInvalidAttributeNames",
    "test_suite": "org.jsoup.helper.W3CDomTest",
    "time_buggy": "2016-08-05 15:34:17 -0700",
    "time_fixed": "2016-08-05 16:41:40 -0700",
    "bug_description": "Bug Title: Invalid XML character specified in attribute key causing org.w3c.dom.DOMException\n\nBug ID: 54\nProject: Jsoup\nBug Type: Syntax, Semantic and Functional Issues (SL SH SF)\n\nDescription:\n\nThe issue lies within the \"copyAttributes\" method of a not specified class in the Jsoup project. When attempting to set an attribute key-value pair for an XML element, an org.w3c.dom.DOMException is thrown, indicating that an invalid or illegal XML character has been specified.\n\nSteps to Reproduce:\n\n1. A Node element with at least one invalid XML character in its attribute\u2019s key is probably being provided as an input to this \"copyAttributes\" method. \n\n2. The method iterates over the attributes of the source node.\n\n3. It tries to sanitize the key of these attributes by replacing invalid XML characters.\n\n4. However, if the key after replacement is not a valid XML name, it proceeds to set it as an attribute to an Element object, which subsequently fails and throws a DOMException. \n\nExample: If an attribute key is \u20181abc\u2019 (which is invalid starting with a number), it will not be replaced by the replaceAll function and the setAttribute will try to use it and crash.\n\nMisbehavior: The issue appears to be that the key sanitizing method doesn't ensure the final key is a valid XML name for attribute keys. The additional bug is of the type SL/SF as there's an exception when trying to perform a task with an inappropriate argument, then an error of type SH as logic is partially correct but not fully.\n\nCorrect behavior: After keys sanitization, the system should verify that it is a valid XML name before setting as an attribute.\n\nProposed Solution: \n\nThe fixed code, as shown, adds a condition to check if the key after sanitization matches the regular expression pattern for valid XML attribute names, then only it proceeds to set it as an attribute. The corrected regular expression verifies that the key starts with letters, underscore or colon and is followed by any number of alphanumeric characters, underscore, colon, hyphen or period.\n\nThis bug fix is a recommendation to developers to rigorously sanitize and validate attribute keys of XML elements in contexts where such elements may contain inappropriate symbols or characters which could lead to similar exceptions being thrown."
}