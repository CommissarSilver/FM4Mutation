{
    "bug_id": 2,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n            return index != null ? values[index.intValue()] : null;\n    }",
    "fixed_code": "    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n        try {\n            return index != null ? values[index.intValue()] : null;\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\n                    String.format(\n                            \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n                            name, index.intValue(), values.length));\n        }\n    }",
    "fixed_lines": "        try {\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException(\n                    String.format(\n                            \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n                            name, index.intValue(), values.length));\n        }",
    "masked_code": "    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n            return index != null ? values[index.intValue()] : null;\n>>> [ INFILL ] <<<\n    }",
    "project": "Csv",
    "test_error_message": "java.lang.Exception: Unexpected exception, expected<java.lang.IllegalArgumentException> but was<java.lang.ArrayIndexOutOfBoundsException>",
    "test_framework": "defects4j",
    "test_line": "        recordWithHeader.get(\"fourth\");",
    "test_name": "testGetStringInconsistentRecord",
    "test_suite": "org.apache.commons.csv.CSVRecordTest",
    "time_buggy": "2013-04-08 18:55:58 +0000",
    "time_fixed": "2013-04-08 19:34:38 +0000",
    "bug_description": "Bug Description:\n\nID: 2\nProject: CSV\nBug Type: SF\n\n1. Overview:\nThe problem is occurring in the 'Csv' project, with a system failure (SF) bug type found. The unexpected exception raised during the test invocation was 'java.lang.ArrayIndexOutOfBoundsException' when 'java.lang.IllegalArgumentException' was expected.\n\n2. Bug context:\nThis bug appears in the 'get' method of an unknown class, where an improper ordering of the actions leads to an 'ArrayIndexOutOfBoundsException'. Specifically, the bug appears when attempting to access an array element using an index derived from a 'mapping' object associated with the input 'name' String. \n\n3. Erroneous code:\nThe error occurs in the line \n'return index != null ? values[index.intValue()] : null;'\nThe issue resides in cases where 'index' points to a non-existing position in the 'values' array, leading to an 'ArrayIndexOutOfBoundsException'.\n\n4. Expected vs. Actual Result:\nThe expected behavior would be to throw an 'IllegalArgumentException' whenever the mapping does not properly correspond to the array indices. The actual result is an 'ArrayIndexOutOfBoundsException' due to the lack of proper handling for cases where index returned from 'mapping.get(name)' is not a valid index for the 'values' array.\n\n5. Fix: \nA try-catch block is added to handle 'ArrayIndexOutOfBoundsException'. When the exception occurs, an 'IllegalArgumentException' is thrown with a detailed message, including the name associated with the incorrect index, the incorrect index value, and the size of 'values'. This way, the method maintains its contract to throw an 'IllegalArgumentException' in cases of name-index incompatibility.\n\nFixed code segment:\n\n```java\ntry {\n    return index != null ? values[index.intValue()] : null;\n} catch (ArrayIndexOutOfBoundsException e) {\n    throw new IllegalArgumentException(\n        String.format(\n            \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n            name, index.intValue(), values.length));\n}\n```\n\n6. To reproduce this bug,\n   Firstly, invoke the 'get' method with a 'name' parameter that corresponds to an invalid index in the 'mapping' object. Then, you will obtain an 'ArrayIndexOutOfBoundsException' instead of the expected 'IllegalArgumentException'. \n\nOnce the fix is applied, the returned exception should correctly be an 'IllegalArgumentException' detailing the nature of the index error."
}