{
    "bug_id": 25,
    "bug_type": "SL SH SF",
    "buggy_lines": "            nextLineTabStop = width - 1;",
    "code": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n            nextLineTabStop = width - 1;\n        }\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "fixed_code": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n            nextLineTabStop = 1;\n        }\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "fixed_lines": "            nextLineTabStop = 1;",
    "masked_code": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n>>> [ INFILL ] <<<\n        }\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n            \n            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n            {\n                pos = width;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }",
    "project": "Cli",
    "test_error_message": "junit.framework.ComparisonFailure: Long arguments did not split as expected expected:<...",
    "test_framework": "defects4j",
    "test_line": "        assertEquals( \"Long arguments did not split as expected\", expected, sw.toString() );",
    "test_name": "testLongLineChunkingIndentIgnored",
    "test_suite": "org.apache.commons.cli.bug.BugCLI162Test",
    "time_buggy": "2009-02-27 09:34:11 +0000",
    "time_fixed": "2009-02-27 09:38:10 +0000",
    "bug_description": "Bug Title: Long arguments not splitting as expected in renderWrappedText method under the Cli project\n\nBug ID: 25\nProject: Cli\nBug Type: SL SH SF\nTest Error Message: junit.framework.ComparisonFailure: Long arguments did not split as expected expected:<...\n\nDescription:\n\nThe reported issue lies in the `renderWrappedText` method of the `Cli` project. As observable from the test error message, long arguments do not split as per the expected requirement.\n\nBuggy line(s) in the Code: \n\nComponents such as the following line seem to contribute to the issue:\n\n`nextLineTabStop = width - 1;` \n\nDetailed walk-through of the suspected faulty behavior:\n\nThis method, `renderWrappedText`, is designed to render the text by following the logic provided for wrapping of text. If the length of the 'nextLineTabStop' becomes greater than or equal to 'width', it sets the 'nextLineTabStop' to 'width - 1', it potentially makes the text line too long, causing the unit tests to fail.\n\nSteps to reproduce:\n\nUnfortunately, there's no clear step-by-step reproduction steps available from the given information. However, a generalized approach would be:\n\n1. Use the `renderWrappedText` method with a text of length greater than the 'width' and with 'nextLineTabStop' equal to or greater than 'width'.\n2. The error will occur when the text is not properly wrapped.\n\nThe fix is delivered by replacing the buggy line 'nextLineTabStop = width - 1;' with 'nextLineTabStop = 1;' which ensures that the 'nextLineTabStop' does not exceed the 'width', which in turn correctly splits the long arguments of text.\n\nFollowing the fix, the code will set the 'nextLineTabStop' to '1' instead of 'width - 1', so that it correctly wraps the long text line.\n\nThe provided fix needs to be tested thoroughly to ensure it doesn't introduce any additional issues or regressions in the functionality."
}