{
    "bug_id": 18,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }",
    "fixed_code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n        try {\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalFieldValueException ex) {\n            if (monthOfYear != 2 || dayOfMonth != 29) {\n                throw ex;\n            }\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, 28,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                throw ex;\n            }\n        }\n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }",
    "fixed_lines": "        try {\n        } catch (IllegalFieldValueException ex) {\n            if (monthOfYear != 2 || dayOfMonth != 29) {\n                throw ex;\n            }\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, 28,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                throw ex;\n            }\n        }",
    "masked_code": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n>>> [ INFILL ] <<<\n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }",
    "project": "Time",
    "test_error_message": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_framework": "defects4j",
    "test_line": "        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());",
    "test_name": "testLeapYearRulesConstruction",
    "test_suite": "org.joda.time.chrono.TestGJChronology",
    "time_buggy": "2011-12-04 11:46:04 +0000",
    "time_fixed": "2011-12-04 12:10:35 +0000",
    "bug_description": "Bug ID: 18\nProject: Time\nBug Type: System Failure (SF)\n\nDescription:\n\nThe current problem encountered in the 'Time' project relates to a faulty logic in the getDateTimeMillis method. When the dayOfMonth value of 29 is passed, and the monthOfYear is not set to 2 (February), the method throws an IllegalFieldValueException. This is because the method seems to not correctly handle the extra day in February during a leap year (dayOfMonth 29).\n\nCorrect Behavior:\n\nIn the event of a leap year, the code should correctly calculate the time in milliseconds for February 29th.\n\nObserved Faulty Behavior :\n\nThe code is not able to handle the February 29th case during a leap year, and it tends to throw an IllegalFieldValueException error. The error message is: \"org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\".\n\nSteps to reproduce:\n\n1 - Call the method getDateTimeMillis, passing the parameters as follows: any year, 2 for monthOfYear to represent February, 29 for dayOfMonth, and any valid values for hourOfDay, minuteOfHour, secondOfMinute, and millisOfSecond.\n\n2 - Since February has 29 days in a leap year, instead of the expected behavior, the method throws an exception.\n\nSteps to fix:\n\nThe corrective action taken here was to handle the IllegalFieldValueException in a try/catch block in the getDateTimeMillis() method. If an IllegalFieldValueException is thrown, the method checks if MonthOfYear is 2 (February) and dayOfMonth is 29. If so, it re-attempts to execute the iGregorianChronology.getDateTimeMillis() method, but with 28 as the dayOfMonth argument. If any other date throws the IllegalFieldValueException, the exception is simply re-thrown. This fix allows the method to handle the edge case of a leap year correctly while also accurately throwing exceptions for genuinely illegal field values."
}