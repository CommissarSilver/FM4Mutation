{
    "bug_id": 15,
    "bug_type": "SL SH SF",
    "buggy_lines": "    if (Double.isNaN(value) || Double.isInfinite(value)) {",
    "code": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
    "fixed_code": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
    "fixed_lines": "    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {",
    "masked_code": "  public JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n>>> [ INFILL ] <<<\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }",
    "project": "Gson",
    "test_error_message": "java.lang.IllegalArgumentException: Numeric values must be finite, but was NaN",
    "test_framework": "defects4j",
    "test_line": "    jsonWriter.value(Double.NaN);",
    "test_name": "testNonFiniteDoublesWhenLenient",
    "test_suite": "com.google.gson.stream.JsonWriterTest",
    "time_buggy": "2017-05-30 18:38:01 -0700",
    "time_fixed": "2017-05-31 09:50:44 -0700",
    "bug_description": "Bug ID: 15\n\nProject: Gson\n\nBug Type: SL SH SF\n\nError Type: IllegalArgumentException \n\nBuggy Code: \n\n```\npublic JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n```\n\nFixed Code: \n\n```\npublic JsonWriter value(double value) throws IOException {\n    writeDeferredName();\n    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(Double.toString(value));\n    return this;\n  }\n```\n\nBug Description:\n\nIn this bug, the 'value' method of the 'JsonWriter' class accepts a 'double' value as its parameter and generates an IllegalArgumentException with the error message: \"Numeric values must be finite, but was NaN\", if this value is either not a number (NaN) or is infinite.\n\nThe bug occurs in the check for NaN or infinite values, where the method erroneously throws an exception for these values even when the JSON writer should handle these cases leniently. In the context of Gson's JSON writing, 'lenient' refers to the writer tolerating NaN and infinite values or not.\n\nThis exception is thrown due to the execution of the line `if (Double.isNaN(value) || Double.isInfinite(value))`, which should have evaluated against the 'lenient' property of the class, a feature that was missing in the code.\n\nThe correction of the bug involves modifying this line to `if (!lenient && (Double.isNaN(value) || Double.isInfinite(value)))`. Therefore, the exception is now thrown only when the writer is not operating in a lenient mode, and the value is either NaN or infinite.\n\nThe fix ensures that the method operates correctly when the lenient mode is set and the provided double value is NaN or infinite. Hence, in lenient mode, these values no longer lead to an IllegalArgumentException."
}