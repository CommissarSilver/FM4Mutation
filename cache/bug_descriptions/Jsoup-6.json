{
    "bug_id": 6,
    "bug_type": "SF",
    "buggy_lines": "                m.appendReplacement(accum, c);\n                m.appendReplacement(accum, m.group(0));",
    "code": "        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3);\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip\n            } else {\n                String name = m.group(1);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            if (charval != -1 || charval > 0xFFFF) { // out of range\n                String c = Character.toString((char) charval);\n                m.appendReplacement(accum, c);\n            } else {\n                m.appendReplacement(accum, m.group(0));\n            }\n        }",
    "fixed_code": "        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3);\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip\n            } else {\n                String name = m.group(1);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            if (charval != -1 || charval > 0xFFFF) { // out of range\n                String c = Character.toString((char) charval);\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string\n            }\n        }",
    "fixed_lines": "                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string",
    "masked_code": "        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\n        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required\n\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3);\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                } // skip\n            } else {\n                String name = m.group(1);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n\n            if (charval != -1 || charval > 0xFFFF) { // out of range\n                String c = Character.toString((char) charval);\n            } else {\n>>> [ INFILL ] <<<\n            }\n        }",
    "project": "Jsoup",
    "test_error_message": "java.lang.IllegalArgumentException: Illegal group reference: group index is missing",
    "test_framework": "defects4j",
    "test_line": "        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china\");",
    "test_name": "testYahooArticle",
    "test_suite": "org.jsoup.integration.ParseTest",
    "time_buggy": "2011-07-02 21:12:01 +1000",
    "time_fixed": "2011-07-02 21:12:01 +1000",
    "bug_description": "Bug ID: 6\n\nProject: Jsoup\n\nBug Type: Special Function (SF)\n\nTest Error Message: java.lang.IllegalArgumentException: Illegal group reference: group index is missing\n\nDetailed Bug Description:\n\nThe bug exists in the JSoup project, specifically tied to a special function error. The error stems from the use of java.util.regex.Matcher's appendReplacement method. The matcher m's group index which is used as a reference in the appendReplacement() arguments are the root cause behind the issue.\n    \nIn the buggy code:\n- The appendReplacement method of a matcher object 'm' is used twice with first parameter as a StringBuffer 'accum' and the second parameter is a string.\n- In first use case, it tries to append the character 'c', represented as a string to the 'accum' StringBuffer if 'charval' is not -1 or if it's greater than 0xFFFF.\n- On the second use case, it tries to append the entire group from matcher object 'm' to the 'accum' StringBuffer in case the 'charval' doesn't meet the condition specified in the first use case.\n- However if the group index specified for matcher was not found or if it's missing then it will throw an IllegalArgumentException with the message \"Illegal group reference: group index is missing\".\n\nIn order to reproduce this bug, a string has to be parsed that leads to an illegal group reference. Specifically, when the appended part of the string in the match contains a dollar sign ($) followed by a non-digit character. The Matcher.appendReplacement doesn't properly handle this condition.\n\nThe developer has provided a fix for this in the code:\n- Instead of directly appending the 'charval' or the entire group from matcher to 'accum', they wrapped it with Matcher.quoteReplacement().\n- So, if a dollar sign or a backslash appears in the replacement string then this method will prepend the backslash to those characters.\n- quoteReplacement method replaces each substring of the input sequence that matches the pattern with the given replacement string.\n\nThis proper error handling of special characters in the replacement allows the algorithm to avoid IllegalArgumentExceptions. Developers intending to generate artificial bugs could consider incorrect or missing handling around the special characters and method's replacement string. Misusing the dollar sign ($) or backslash (\\) in replacement strings is one way to generate similar bugs."
}