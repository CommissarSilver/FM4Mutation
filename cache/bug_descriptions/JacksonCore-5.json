{
    "bug_id": 5,
    "bug_type": "SL SH SF",
    "buggy_lines": "            char c = str.charAt(i++);",
    "code": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i++);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }",
    "fixed_code": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }",
    "fixed_lines": "            char c = str.charAt(i);",
    "masked_code": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n>>> [ INFILL ] <<<\n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n        }\n        return NumberInput.parseInt(str);\n    }",
    "project": "JacksonCore",
    "test_error_message": "java.lang.NumberFormatException: For input string: \"1e0\"",
    "test_framework": "defects4j",
    "test_line": "        JsonPointer ptr = JsonPointer.compile(\"/1e0\");",
    "test_name": "testWonkyNumber173",
    "test_suite": "com.fasterxml.jackson.core.TestJsonPointer",
    "time_buggy": "2014-11-24 18:16:45 -0800",
    "time_fixed": "2014-12-07 10:16:55 -0800",
    "bug_description": "Bug Title: NumberFormatException error for input string \"1e0\" in _parseIndex function \n\nBug ID: 5\n\nProject: JacksonCore\n\nBug Type: SL SH SF (Sequential Logical Errors, Syntax errors with Homologe Type, and Syntax errors Filled/Unfilled slots)\n\nBug Description:\n\nIn the 'JacksonCore' project, a 'java.lang.NumberFormatException' is thrown when the input string is \"1e0\". The issue arises in the '_parseIndex' function located in the main program body. This function seems to aim at parsing a string into an integer.\n\nFurther, when the length of the input string is 10, it tries to parse the string into a long and then checks if it's greater than Integer's MAX_VALUE. If yes, it returns -1. Finally, it again tries to parse the returned string into an integer. \n\nWhile the functionality seems reasonable, there is a potential bug in the for-loop iterating over the string's length.\n\nTest Error Message: java.lang.NumberFormatException: For input string: \"1e0\"\n\nSteps to Reproduce:\n1. Call the `_parseIndex` function with input as \"1e0\".\n2. A `NumberFormatException` will be thrown.\n\nRoot cause and Fix:\nThe code `char c = str.charAt(i++);` inside the for loop is causing the bug. The increment of 'i' in the character extraction is unnecessary and is causing the iteration to miss some characters in the string.\n\nIn the fixed code, the line should instead be `char c = str.charAt(i);`. This allows all characters in the string to be correctly checked for numeral conformity in the subsequent condition, and the function thus runs as expected without any errors.\n\nIt's noteworthy to point out that while this specific fix addresses the current bug, the method might still fail for other non-integer strings or for integers that are beyond the Integer's MAX_VALUE limitation. A more robust error handling should be considered. \n\nImpact: Medium. This bug might impact all the functionalities that use this parsing function. While the effect of a single execution might not be substantial, issues could cumulate under intensive usage."
}