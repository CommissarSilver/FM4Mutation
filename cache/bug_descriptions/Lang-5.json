{
    "bug_id": 5,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 2) {\n                return new Locale(str);\n            }\n            if (len < 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            final char ch4 = str.charAt(4);\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            if (len < 7) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(5) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }",
    "fixed_code": "    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n        if (ch0 == '_') {\n            if (len < 3) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) {\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            if (len < 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(3) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n        } else {\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 2) {\n                return new Locale(str);\n            }\n            if (len < 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            final char ch4 = str.charAt(4);\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            if (len < 7) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(5) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }",
    "fixed_lines": "        }",
    "masked_code": "    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 2) {\n                return new Locale(str);\n            }\n            if (len < 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            final char ch4 = str.charAt(4);\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            if (len < 7) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(5) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n>>> [ INFILL ] <<<\n    }",
    "project": "Lang",
    "test_error_message": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_framework": "defects4j",
    "test_line": "        Locale locale = LocaleUtils.toLocale(localeString);",
    "test_name": "testLang865",
    "test_suite": "org.apache.commons.lang3.LocaleUtilsTest",
    "time_buggy": "2012-12-17 12:29:12 +0000",
    "time_fixed": "2013-01-03 06:19:52 +0000",
    "bug_description": "Bug ID: 5\nProject: Lang\nBug Type: SF (Semantic Fault)\n\nSummary: The issue is related to the conversion of string to locale in the code. The error arises when the string contains invalid locale format especially for string starting with a underscore followed by uppercase locale.\n\nSteps to Reproduce:\n\n1. When the method toLocale is called with a locale string parameter and if the string starts with a underscore and contains an uppercase character as locale, the code fails and throws the exception \"java.lang.IllegalArgumentException: Invalid locale format: _GB\".\n2. This problem arises specifically in the part of the given code:\n\n```\nif (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\n```\n\nHere, the if condition only checks if the first two characters of the locale string are not lowercase, without considering the possibility of underscore as the start of the locale string. The code then throws an exception for valid locale strings such as \"_GB\".\n\nExpected Behaviour :\n\nThe application code should have the ability to handle such scenarios where locale can be in an uppercase format and it should not result in exception.\n\nActual Behavior:\n\nWhen the toLocale function is invoked with strings starting with underscores followed by uppercase characters, an IllegalArgumentException is thrown.\n\nCode Fix:\n\nDevelopers solved this issue by adding an additional condition to check if the first character in a string is underscore. If the first char is underscore and subsequent two characters are uppercase letters, it's considered a valid locale format:\n\n```\nif (ch0 == '_') {\n    if (len < 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch1 = str.charAt(1);\n    final char ch2 = str.charAt(2);\n    if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    ...\n}\n```\nThis patch handles cases like \"_GB\" without throwing any exceptions. If the first character isn't underscore, then it follows the old code flow."
}