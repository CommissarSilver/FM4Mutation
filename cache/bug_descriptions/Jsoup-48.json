{
    "bug_id": 48,
    "bug_type": "SF",
    "buggy_lines": "                    if (!values.isEmpty())",
    "code": "        void processResponseHeaders(Map<String, List<String>> resHeaders) {\n            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n                String name = entry.getKey();\n                if (name == null)\n                    continue; // http/1.1 line\n\n                List<String> values = entry.getValue();\n                if (name.equalsIgnoreCase(\"Set-Cookie\")) {\n                    for (String value : values) {\n                        if (value == null)\n                            continue;\n                        TokenQueue cd = new TokenQueue(value);\n                        String cookieName = cd.chompTo(\"=\").trim();\n                        String cookieVal = cd.consumeTo(\";\").trim();\n                        // ignores path, date, domain, validateTLSCertificates et al. req'd?\n                        // name not blank, value not null\n                        if (cookieName.length() > 0)\n                            cookie(cookieName, cookieVal);\n                    }\n                } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n                    if (!values.isEmpty())\n                        header(name, values.get(0));\n                }\n            }\n        }",
    "fixed_code": "        void processResponseHeaders(Map<String, List<String>> resHeaders) {\n            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n                String name = entry.getKey();\n                if (name == null)\n                    continue; // http/1.1 line\n\n                List<String> values = entry.getValue();\n                if (name.equalsIgnoreCase(\"Set-Cookie\")) {\n                    for (String value : values) {\n                        if (value == null)\n                            continue;\n                        TokenQueue cd = new TokenQueue(value);\n                        String cookieName = cd.chompTo(\"=\").trim();\n                        String cookieVal = cd.consumeTo(\";\").trim();\n                        // ignores path, date, domain, validateTLSCertificates et al. req'd?\n                        // name not blank, value not null\n                        if (cookieName.length() > 0)\n                            cookie(cookieName, cookieVal);\n                    }\n                } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n                    if (values.size() == 1)\n                        header(name, values.get(0));\n                    else if (values.size() > 1) {\n                        StringBuilder accum = new StringBuilder();\n                        for (int i = 0; i < values.size(); i++) {\n                            final String val = values.get(i);\n                            if (i != 0)\n                                accum.append(\", \");\n                            accum.append(val);\n                        }\n                        header(name, accum.toString());\n                    }\n                }\n            }\n        }",
    "fixed_lines": "                    if (values.size() == 1)\n                    else if (values.size() > 1) {\n                        StringBuilder accum = new StringBuilder();\n                        for (int i = 0; i < values.size(); i++) {\n                            final String val = values.get(i);\n                            if (i != 0)\n                                accum.append(\", \");\n                            accum.append(val);\n                        }\n                        header(name, accum.toString());\n                    }",
    "masked_code": "        void processResponseHeaders(Map<String, List<String>> resHeaders) {\n            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n                String name = entry.getKey();\n                if (name == null)\n                    continue; // http/1.1 line\n\n                List<String> values = entry.getValue();\n                if (name.equalsIgnoreCase(\"Set-Cookie\")) {\n                    for (String value : values) {\n                        if (value == null)\n                            continue;\n                        TokenQueue cd = new TokenQueue(value);\n                        String cookieName = cd.chompTo(\"=\").trim();\n                        String cookieVal = cd.consumeTo(\";\").trim();\n                        // ignores path, date, domain, validateTLSCertificates et al. req'd?\n                        // name not blank, value not null\n                        if (cookieName.length() > 0)\n                            cookie(cookieName, cookieVal);\n                    }\n                } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n                        header(name, values.get(0));\n>>> [ INFILL ] <<<\n                }\n            }\n        }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<no-cache[, no-store]> but was:<no-cache[]>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"no-cache, no-store\", res.header(\"Cache-Control\"));",
    "test_name": "sameHeadersCombineWithComma",
    "test_suite": "org.jsoup.helper.HttpConnectionTest",
    "time_buggy": "2015-08-30 13:44:55 -0700",
    "time_fixed": "2015-08-30 15:47:43 -0700",
    "bug_description": "Bug ID: 48\n\nProject: Jsoup\n\nBug Type: SF (Statement Faults)\n\nTest Error Message: junit.framework.AssertionFailedError: expected:<no-cache[, no-store]> but was:<no-cache[]>\n\n1. Description: \n\nIn the project Jsoup, a bug (ID: 48) of type SF (Statement Faults) was found. The error is located at the line checking whether the list 'values' is empty or not (`if (!values.isEmpty())`). An AssertionFailedError has been thrown by the unit test, where the expected result was 'no-cache, no-store', but the actual result returned was 'no-cache'.\n\n2. Steps to reproduce:\n\nIn the provided code, the 'processResponseHeaders' method processes headers of an HTTP response, where each header name is associated with a list of values.\n\nWhen the encountered HTTP header is 'Set-Cookie', the code correctly processes multiple values. \n\nHowever, for any other HTTP headers, if their values contain multiple items, the original buggy code only extracts and processes the first value in the list, ignoring the rest.\n\n3. The faulty statement:\n\nThe faulty portion is the condition (`if (!values.isEmpty())`) which only checks if the value list is not empty and then assigns the first item of the list as the header. This didn't account for headers with multiple parameters.\n\n4. Correction:\n\nIn the corrected code, this issue has been addressed. If there's only 1 value for a particular header, it's processed as before. \n\nIf there are multiple values for a header, the code creates a StringBuilder. It accumulates all values into a comma-separated string. This string is then set as the value for the HTTP header. \n\nThis way, all values associated with a header are correctly processed, regardless of whether there is one value or multiple. \n\nNow the code aligns with the HTTP/1.1 specification which allows for headers to have multiple comma-separated values. This fixes the AssertionFailedError as 'no-cache, no-store' is now correctly returned instead of just 'no-cache'."
}