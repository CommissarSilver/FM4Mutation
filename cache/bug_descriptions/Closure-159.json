{
    "bug_id": 159,
    "bug_type": "SH SF",
    "buggy_lines": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());",
    "code": "  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "fixed_code": "  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.NAME) {\n      if (isCandidateUsage(node)) {\n        changed.add(node.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "fixed_lines": "    if (node.getType() == Token.NAME) {\n      if (isCandidateUsage(node)) {\n        changed.add(node.getString());",
    "masked_code": "  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n>>> [ INFILL ] <<<\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError:",
    "test_framework": "defects4j",
    "test_line": "    test(",
    "test_name": "testIssue423",
    "test_suite": "com.google.javascript.jscomp.InlineFunctionsTest",
    "time_buggy": "2011-04-14 03:58:25 +0000",
    "time_fixed": "2011-04-14 17:48:58 +0000",
    "bug_description": "Bug ID: 159\n\nProject: Closure\n\nBug Type: Symbol Hiding (SH) and Scope Fallacy (SF)\n\n1. Description: \n   In the method `findCalledFunctions`, there's an assertion error caused due to a logic error in the code. While trying to reference a function, it is expected for the node type to be a `Token.CALL`, after which it fetches the function name. However, in some instances, the node type might not be a `Token.CALL`, which results to an assertion error.\n\n2. Preconditions:\n   a) The program starts execution.\n   b) It attempts to find the functions called in a given node, by passing it into the `findCalledFunctions` method.\n\n3. Steps to Reproduce:\n   a) The `findCalledFunctions` method is called, it checks whether the passed `changed` set is null.\n   b) Proceeding further, the code checks whether the node type is `Token.CALL`.\n   c) When this condition is met, it gets the first child of the node.\n   d) Again, the code checks whether the child node type is `Token.NAME`.\n   e) If true, it tries to add the string name of the node to the `changed` set.\n   f) The same method is applied recursively on each child of the `node`.\n\n4. Actual Result:\n   The condition where the node type is `Token.CALL` seems not to accommodate all possible cases, hence an junit.framework.AssertionFailedError is triggered.\n\n5. Expected Result:\n   The code should have considered cases where the node type might not be `Token.CALL`, but still need to be processed.\n\n6. Proposed Fix:\n   In the fixed code, this bug is rectified by checking if the node type is `Token.NAME`, i.e., if it's a name token, it infers the node as a function call. After this, it analyzes if it's a candidate usage, then it adds the string name of the node to the `changed` set. The method then recursively operates the same on each child node of the `node`."
}