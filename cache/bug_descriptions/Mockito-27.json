{
    "bug_id": 27,
    "bug_type": "SH SF",
    "buggy_lines": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));",
    "code": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallback(0, newFilter);\n    }",
    "fixed_code": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());\n        ((Factory) mock).setCallback(0, newFilter);\n    }",
    "fixed_lines": "        MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());",
    "masked_code": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n>>> [ INFILL ] <<<\n        ((Factory) mock).setCallback(0, newFilter);\n    }",
    "project": "Mockito",
    "test_error_message": "junit.framework.AssertionFailedError:",
    "test_framework": "defects4j",
    "test_line": "        verify(invocationListener).reportInvocation(any(MethodInvocationReport.class));",
    "test_name": "listener",
    "test_suite": "org.mockitousage.bugs.ListenersLostOnResetMockTest",
    "time_buggy": "2011-09-13 08:54:00 +0200",
    "time_fixed": "2011-10-01 17:09:50 +0200",
    "bug_description": "Bug Title: Assertion Error Due to OldMock Hanlder Recursion in the MockReset Method \n\nBug ID: 27\n\nProject: Mockito\n\nBug Description:\n\nThe bug is found in the `resetMock` method of the Mockito project. In this method, an `AssertionFailedError` is encountered while trying to execute unit tests. The specific error message returned is `junit.framework.AssertionFailedError`. An investigation into this bug reveals that the problem lies in the two lines where `newMockHandler` and `newFilter` objects are created. \n\nThe code snippet that leads to this error is:\n```java\nMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n```\n\nDetailed Bug Description:\n\nIn the `resetMock` method, two objects are created. The first one is `newMockHandler` which takes the `oldMockHandler` as a parameter. The `oldMockHandler` retains old settings that should be discarded during reset. The `newMockHandler` is then used as a parameter to create the `newFilter` object, along with the `MethodInterceptorFilter` method. The error is thrown because the `newFilter` applies the old, outdated mock settings to the mock object.\n\nThis results in incorrect and unexpected behavior as the unit test fails, thus the initial test error message - `junit.framework.AssertionFailedError`.\n\nSteps to Reproduce:\n\n1. Run a unit test on a mock object\n2. Ensure that the mock object has pre-existing settings in `oldMockHandler`\n3. Utilize the `MockHandler` class to create a `newMockHandler` with `oldMockHandler` as a parameter\n4. Create a `newFilter` using the `MethodInterceptorFilter` method. This should contain the `newMockHandler` and the default answer for `Mockito.withSettings()`\n5. Call the `resetMock` method on the mock object\n6. Monitor the `resetMock` method for the `AssertionFailedError` during unit test execution.\n\nResolution:\n\nThe bug was fixed by reimplementing the `resetMock` method to use the `MethodInterceptorFilter` method that processes the settings from `oldMockHandler`. As a result, instead of passing the `newMockHandler` object into `newFilter`, the fixed code processes the old settings hence removing the assertion error. \n\nHence, the fixed code is:\n```java\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());\n    ((Factory) mock).setCallback(0, newFilter);\n}\n```\nEnsure to correct unit tests to check if no AssertionFailedError is generated after the code fix."
}