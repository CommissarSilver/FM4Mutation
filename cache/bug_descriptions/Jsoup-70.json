{
    "bug_id": 70,
    "bug_type": "SF",
    "buggy_lines": "                else\n                    return el.parent() != null && el.parent().tag.preserveWhitespace();",
    "code": "    static boolean preserveWhitespace(Node node) {\n        // looks only at this element and five levels up, to prevent recursion & needless stack searches\n        if (node != null && node instanceof Element) {\n            Element el = (Element) node;\n                if (el.tag.preserveWhitespace())\n                    return true;\n                else\n                    return el.parent() != null && el.parent().tag.preserveWhitespace();\n        }\n        return false;\n    }",
    "fixed_code": "    static boolean preserveWhitespace(Node node) {\n        // looks only at this element and five levels up, to prevent recursion & needless stack searches\n        if (node != null && node instanceof Element) {\n            Element el = (Element) node;\n            int i = 0;\n            do {\n                if (el.tag.preserveWhitespace())\n                    return true;\n                el = el.parent();\n                i++;\n            } while (i < 6 && el != null);\n        }\n        return false;\n    }",
    "fixed_lines": "            int i = 0;\n            do {\n                el = el.parent();\n                i++;\n            } while (i < 6 && el != null);",
    "masked_code": "    static boolean preserveWhitespace(Node node) {\n        // looks only at this element and five levels up, to prevent recursion & needless stack searches\n        if (node != null && node instanceof Element) {\n            Element el = (Element) node;\n                if (el.tag.preserveWhitespace())\n                    return true;\n>>> [ INFILL ] <<<\n        }\n        return false;\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<code[",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(\"code\\n\\ncode\", doc.text());",
    "test_name": "testKeepsPreTextAtDepth",
    "test_suite": "org.jsoup.nodes.ElementTest",
    "time_buggy": "2017-11-12 14:23:10 -0800",
    "time_fixed": "2017-11-12 16:02:31 -0800",
    "bug_description": "Bug ID: 70\nProject: Jsoup\nBug Type: SF (Statement/Function)\n\nDescription:\n\nThe issue lies in the method `preserveWhitespace(Node node)`, within the condition `(el.tag.preserveWhitespace())`. The buggy code is not considering all parent elements for checking if they have whitespace preservation enabled in their tags.\n\nDetailed Analysis:\n\nStep 1: The project implements a method to consider if the whitespace should be preserved based on the `tag.preserveWhitespace()` function's returned value.\n\nStep 2: When considering the preservation of whitespace on any particular node, the code initially checks to see if the node is an instance of Element. If so, it checks whether the tag of that element preserves white space. \n\nStep 3: If the tag itself does not preserve whitespace, then the code checks to see if the parent tag preserves whitespace. This is intended to prevent infinite recursion by looking only at this element and its direct parent.\n\nStep 4: However, this approach is faulty because it considers only the immediate parent of the node. As a result, an AssertionFailedError occurs, according to the test error message.\n\nSolution:\n\nThe fix lies in adding a do-while loop that enables checking of whether the element/tag preserve whitespaces up to five (5) levels, starting from `el`, the immediate element, and then traverses to its parent -- a total of 6 levels (count starting from 0). If at any point, there is a tag that preserves whitespace, the method should return `true`. This avoids any infinite recursions as it has a cutoff at six levels. After six levels, or if there are no more parental elements (`el == null`), the loop terminates and the function returns `false`.\n\nThis bug report directs towards generating artificial Java bugs that can be focused on implementations that lack thorough consideration of the requirement and disregard some possible scenarios."
}