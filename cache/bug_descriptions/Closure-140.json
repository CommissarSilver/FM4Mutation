{
    "bug_id": 140,
    "bug_type": "SL SH SF",
    "buggy_lines": "    for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n      inputs = m.getInputs();\n      if (inputs.size() > 0) {\n        return inputs.get(0).getAstRoot(this);\n      }\n    }",
    "code": "  public Region getSourceRegion(String sourceName, int lineNumber) {\n    if (lineNumber < 1) {\n      return null;\n    }\n    SourceFile input = getSourceFileByName(sourceName);\n    if (input != null) {\n      return input.getRegion(lineNumber);\n    }\n    return null;\n  }\n\n  //------------------------------------------------------------------------\n  // Package-private helpers\n  //------------------------------------------------------------------------\n\n  @Override\n  Node getNodeForCodeInsertion(JSModule module) {\n    if (module == null) {\n      if (inputs.length == 0) {\n        throw new IllegalStateException(\"No inputs\");\n      }\n\n      return inputs[0].getAstRoot(this);\n    }\n\n    List<CompilerInput> inputs = module.getInputs();\n    if (inputs.size() > 0) {\n      return inputs.get(0).getAstRoot(this);\n    }\n    for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n      inputs = m.getInputs();\n      if (inputs.size() > 0) {\n        return inputs.get(0).getAstRoot(this);\n      }\n    }\n    throw new IllegalStateException(\"Root module has no inputs\");\n  }",
    "fixed_code": "  public Region getSourceRegion(String sourceName, int lineNumber) {\n    if (lineNumber < 1) {\n      return null;\n    }\n    SourceFile input = getSourceFileByName(sourceName);\n    if (input != null) {\n      return input.getRegion(lineNumber);\n    }\n    return null;\n  }\n\n  //------------------------------------------------------------------------\n  // Package-private helpers\n  //------------------------------------------------------------------------\n\n  @Override\n  Node getNodeForCodeInsertion(JSModule module) {\n    if (module == null) {\n      if (inputs.length == 0) {\n        throw new IllegalStateException(\"No inputs\");\n      }\n\n      return inputs[0].getAstRoot(this);\n    }\n\n    List<CompilerInput> inputs = module.getInputs();\n    if (inputs.size() > 0) {\n      return inputs.get(0).getAstRoot(this);\n    }\n    throw new IllegalStateException(\"Root module has no inputs\");\n  }",
    "fixed_lines": "",
    "masked_code": "  public Region getSourceRegion(String sourceName, int lineNumber) {\n    if (lineNumber < 1) {\n      return null;\n    }\n    SourceFile input = getSourceFileByName(sourceName);\n    if (input != null) {\n      return input.getRegion(lineNumber);\n    }\n    return null;\n  }\n\n  //------------------------------------------------------------------------\n  // Package-private helpers\n  //------------------------------------------------------------------------\n\n  @Override\n  Node getNodeForCodeInsertion(JSModule module) {\n    if (module == null) {\n      if (inputs.length == 0) {\n        throw new IllegalStateException(\"No inputs\");\n      }\n\n      return inputs[0].getAstRoot(this);\n    }\n\n    List<CompilerInput> inputs = module.getInputs();\n    if (inputs.size() > 0) {\n      return inputs.get(0).getAstRoot(this);\n    }\n>>> [ INFILL ] <<<\n    throw new IllegalStateException(\"Root module has no inputs\");\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError: compiler.reportCodeChange() was called even though nothing changed",
    "test_framework": "defects4j",
    "test_line": "    test(new JSModule[] {m1,empty,m2,m3},",
    "test_name": "testEmptyModule",
    "test_suite": "com.google.javascript.jscomp.CrossModuleCodeMotionTest",
    "time_buggy": "2010-03-22 22:55:34 +0000",
    "time_fixed": "2010-03-23 05:51:47 +0000",
    "bug_description": "Bug ID: 140\n\nProject: Closure\n\nBug Type: SL SH SF\n\nTest Error Message: junit.framework.AssertionFailedError: compiler.reportCodeChange() was called even though nothing changed.\n\nBug Description: The bug is in the Closure project in Java. The test error message suggests that a function was invoked when there wasn't a need to because there was no change in the compiler. The affected section of the code is within the method getNodeForCodeInsertion(JSModule module), particularly within the for loop. Here, the code is trying to get inputs from JSModule m by calling getModuleGraph().getTransitiveDepsDeepestFirst(module) method.\n\nFor each JSModule m, if the size of the inputs is more than zero, the code returns the Abstract Syntax Tree (AST) root of the first input input.get(0).getAstRoot(this). If there are no inputs, an unexpected change is reported (even though there was none) and causes a junit.framework.AssertionFailedError. \n\nStep-by-Step Description:\n\n1. Upon calling the getNodeForCodeInsertion(JSModule module) method, the code first checks if the module is null and if the length of the inputs is zero, it throws an IllegalStateException with the message \"No inputs\".\n\n2. If the module is not null, it retrieves a list of the module's inputs. Again, if the size of the inputs is more than 0, it returns the first input's AST root.\n\n3. Then the buggy part of the code: for every JSModule m from the deepest first transitive dependencies of the module (getTransitiveDepsDeepestFirst(module), the code tries to retrieve its inputs.\n\n4. If the inputs' size is more than zero, it returns the AST root of the first input.\n\n5. If after iterating through all JSModules m in getTransitiveDepsDeepestFirst(module) and finding no input with size more than 0, it throws an IllegalStateException that \"Root module has no inputs\". But, in this scenario, the function compiler.reportCodeChange() was apparently being called even though no changes occurred, causing the AssertionFailedError.\n\nFinally, this bug was fixed by removing the loop referring to the JSModule m and keeping the IllegalStateException if there are no inputs for the root module. That action seems not to affect the logic of the code, and it prevents the assertion error by not invoking the unnecessary compiler.reportCodeChange()."
}