{
    "bug_id": 87,
    "bug_type": "SF",
    "buggy_lines": "            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                if (row == null) {\n                } else {\n                }",
    "code": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                if (row == null) {\n                row = i;\n                } else {\n                return null;\n                }\n            }\n        }\n        return row;\n    }",
    "fixed_code": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }",
    "fixed_lines": "            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",
    "masked_code": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n                row = i;\n                return null;\n>>> [ INFILL ] <<<\n            }\n        }\n        return row;\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(10.0, solution.getPoint()[0], 0.0);",
    "test_name": "testSingleVariableAndConstraint",
    "test_suite": "org.apache.commons.math.optimization.linear.SimplexSolverTest",
    "time_buggy": "2009-06-02 21:02:14 +0000",
    "time_fixed": "2009-06-03 09:06:08 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 87 is a Semantic Fault (SF) in the 'Math' Project. The bug is associated with a failure during an assertion in a JUnit test which expected the value returned by a function to be '10.0', but it was returning '0.0'.\n\nThe error was occurring in the 'getBasicRow' method in the following condition-like lines of code:\n\n\t```\n\tif (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n\t\tif (row == null) {\n\t\t...\n\t}\n\t```\n\t\nThese lines of code were intended to execute a block of code if the value, obtained from the method 'getEntry' with parameters 'i' (which is representative of the current iteration in a for loop) and 'col' (which is an input parameter of the 'getBasicRow' method), is not equal to '0.0'.\n\nGiven that these lines of code incorporate the use of a conditional if statement, it is safe to say that the execution of certain pieces of code is dependent on the evaluation of the condition.\n\nThe bug was fixed by replacing the problematic if statement in the code with the following lines:\n\n\t```\n\tif (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n\t\trow = i;\n\t} else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n\t\treturn null;\n\t}\n\t```\n\t\nThe first condition checks whether 'getEntry(i, col)' equals '1.0' and if 'row' is null, in which case it assigns 'i' to 'row'. The second condition, which seems to be the one causing the bug, checks if 'getEntry(i, col)' is not equal to '0.0', and if it's true it immediately returns 'null'.\n\nThis fix ensures that the value of the particular 'getEntry(i, col)' being checked in the loop will now need to be '1.0' for the 'row' to get the index 'i'. The fix also ensures that when 'getEntry(i, col)' is not equal to '0.0' and 'row' has already been assigned a value then the method returns 'null'. These modifications fix the issue which caused the bug."
}