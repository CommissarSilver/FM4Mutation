{
    "bug_id": 28,
    "bug_type": "SH SF",
    "buggy_lines": "            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();",
    "code": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        }\n    }",
    "fixed_code": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            mocks.remove(injected);\n        }\n    }",
    "fixed_lines": "            Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            mocks.remove(injected);",
    "masked_code": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n>>> [ INFILL ] <<<\n        }\n    }",
    "project": "Mockito",
    "test_error_message": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@74cc987a> was not:<mockedBean>",
    "test_framework": "defects4j",
    "test_line": "        assertSame(REFERENCE, illegalInjectionExample.mockShouldNotGoInHere);",
    "test_name": "mock_should_be_injected_once_and_in_the_best_matching_type",
    "test_suite": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest",
    "time_buggy": "2010-12-17 17:50:55 +0100",
    "time_fixed": "2010-12-20 20:11:06 +0100",
    "bug_description": "Bug ID: 28\n\nProject: Mockito\n\nBug Type: Serenity/hamcrest SH SF\n\nTest Error Message: junit.framework.AssertionFailedError: expected same:<java.lang.Object@74cc987a> was not:<mockedBean>\n\nDescription:\n\nIn the Mockito project, the code had a SH SF (Serenity/hamcrest type mismatch) error identified by the ID 28.\n\nThe faulty code snippet was located in the 'injectMockCandidate' method which iterates over all the fields from 'awaitingInjectionClazz' class. In the loop, every field was being processed by 'filterCandidate' method from 'mockCandidateFilter' object which selects a mock candidate for future injections.\n\nError Detail:\n\nThe error was an AssertionError raised by JUnit that indicates when a test fails due to an unmet expectation. Specifically, the test expected the actual result to be the same instance as the expected result, but it was not. The expected value was a 'java.lang.Object@74cc987a' but the actual value was a 'mockedBean'. \n\nThis unexpected behavior was caused by the line:\n\n        `mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();`\n\nThe wrong part of this code is the fact that the injected result from 'filterCandidate' was not being used intuitively and the mocked object was not removed from the original 'mocks' Set collection after injection. \n\nSolution to the problem:\n\nIn the fixed version of the code, an Object 'injected' was introduced.\n\n    `Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();`\n\nAfter the method 'thenInject()' is called on filtered candidate, its result was stored in the 'injected' object.\n\n    `mocks.remove(injected);`\n\nThen, the 'injected' mock object was removed from the 'mocks' Set collection, thus making sure that previously injected mock does not interfere with subsequent injections.\n\nStep by step for Developers to reproduce the bug artificially:\n\n1. Have a Set collection of mock objects, 'mocks'.\n2. Create an instance for a field from a class.\n3. Pass these parameters into a method that injects mocks without removing them from the original Set.\n4. Have a test that expects the method to return the same object instance as one specifically pointed in 'mocks' set.\n5. The result will be different as the mocked object was not correctly managed in terms of handling its existence in the original 'mocks' Set after injection."
}