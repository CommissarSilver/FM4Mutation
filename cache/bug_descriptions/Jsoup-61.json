{
    "bug_id": 61,
    "bug_type": "SL SH SF",
    "buggy_lines": "        final String classAttr = attributes.get(\"class\");",
    "code": "    public boolean hasClass(String className) {\n        final String classAttr = attributes.get(\"class\");\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }",
    "fixed_code": "    public boolean hasClass(String className) {\n        final String classAttr = attributes.getIgnoreCase(\"class\");\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }",
    "fixed_lines": "        final String classAttr = attributes.getIgnoreCase(\"class\");",
    "masked_code": "    public boolean hasClass(String className) {\n>>> [ INFILL ] <<<\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "        assertTrue(one.hasClass(\"One\"));",
    "test_name": "hasClassCaseInsensitive",
    "test_suite": "org.jsoup.select.ElementsTest",
    "time_buggy": "2017-01-18 13:35:52 -0800",
    "time_fixed": "2017-01-21 15:26:56 -0800",
    "bug_description": "Bug Description:\n\n- Bug ID: 61\n- Project: Jsoup\n- Bug Type: SL SH SF (Suspicious locations, suspicious hiding, suspicious function)\n\nBug Manifestation:\n\nThe bug is manifested as the test error: junit.framework.AssertionFailedError, implying that an assertion used in a unit test has failed, and the test framework has thrown an exception.\n\nProblematic Code:\n\nThe buggy line of code is:\n\n```java\nfinal String classAttr = attributes.get(\"class\");\n```\n\nThis line is attempting to fetch an attribute named \"class\" from the 'attributes' object. It is unclear from the provided code what the exact type of 'attributes' is, but the suggested bug-fix implies that it may not account for case-sensitive matching for the attribute name.\n\nBug Fix:\n\nThe revised line of code in the bug-fix is:\n\n```java\nfinal String classAttr = attributes.getIgnoreCase(\"class\");\n```\n\nThe revised method call, `getIgnoreCase(\"class\")`, implies that the attribute retrieval should be case-insensitive, meaning it will correctly return an attribute named \"Class\", \"CLASS\", etc., and not just \"class\". \n\nDetailed Steps:\n\n1. The original code was trying to retrieve an attribute from the 'attributes' object using a case-sensitive key \"class\".\n2. If there was an attribute with the key \"Class\" or \"CLASS\" or any other case-sensitive variant, the original code would not retrieve it. As a result, it is considered a bug in the code.\n3. To address this bug, the line of code was changed to retrieve the attribute using a case-insensitive key.\n4. After fixing, the method call was changed to `getIgnoreCase(\"class\")` to ensure the attribute retrieval is case-insensitive. This allows to correctly fetch attributes regardless of the case of their key, thus fixing the bug.\n\nIn context of artificial bug generation, developers may reproduce this bug by artificially creating a situation where the attribute retrieval only works with a specific case, leading to failed retrievals when different case variants are used. The developers can then use this scenario to create and test potential fixes."
}