{
    "bug_id": 54,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }",
    "fixed_code": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }",
    "fixed_lines": "            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }",
    "masked_code": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len != 5 && len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n>>> [ INFILL ] <<<\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                if (str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n            }\n        }\n    }",
    "project": "Lang",
    "test_error_message": "java.lang.IllegalArgumentException: Invalid locale format: fr__POSIX",
    "test_framework": "defects4j",
    "test_line": "        Locale locale = LocaleUtils.toLocale(localeString);",
    "test_name": "testLang328",
    "test_suite": "org.apache.commons.lang.LocaleUtilsTest",
    "time_buggy": "2007-04-20 05:11:46 +0000",
    "time_fixed": "2007-05-01 23:50:01 +0000",
    "bug_description": "Bug ID: 54\nProject: Lang\nBug Type: SH SF\n\nDescription:\nThe bug appears in the `toLocale(String str)` method of the Lang project. This is an SH SF (Syntactic and Semantic faults) type bug where the syntactic and semantic structure of the input locale string is not properly validated. \n\nThe test error message shows us that the locale string 'fr__POSIX' is not being considered as a valid format which is incorrect as double underscores imply a missing country as per standard locale structures.\n\nError Source:\nThis error occurs in the following lines of code:\n\n    if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch3 = str.charAt(3);\n    char ch4 = str.charAt(4);\n    if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\nIssue Explanation: \nThe code above assumes that the 3rd and 4th char of a locale string must be uppercase letters representing a country, When it encounters the second underscore it throws the exception. However, in some locale strings like \"fr__POSIX\", a double underscore is used to indicate a missing 'country' code. The current implementation is hence failing for such cases. \n\nSteps to reproduce:\nThis bug can be reproduced by passing a String argument with double underscores, such as 'fr__POSIX' to the `toLocale(String)` method of the Lang project.\n\nResolution: \nThis bug is fixed by adding a condition to handle this specific case:\n\n    char ch3 = str.charAt(3);\n    if (ch3 == '_') {\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n    }\n\nThis will check if the third character is also an underscore and if true, it will create a new Locale instance with an empty country string between the underscores. Now passing 'fr__POSIX' as a String argument won't throw an invalid exception and will handle it properly."
}