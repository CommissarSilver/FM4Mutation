{
    "bug_id": 12,
    "bug_type": "SL SH SF",
    "buggy_lines": "        this.dataset = dataset;",
    "code": "    public MultiplePiePlot(CategoryDataset dataset) {\n        super();\n        this.dataset = dataset;\n        PiePlot piePlot = new PiePlot(null);\n        this.pieChart = new JFreeChart(piePlot);\n        this.pieChart.removeLegend();\n        this.dataExtractOrder = TableOrder.BY_COLUMN;\n        this.pieChart.setBackgroundPaint(null);\n        TextTitle seriesTitle = new TextTitle(\"Series Title\",\n                new Font(\"SansSerif\", Font.BOLD, 12));\n        seriesTitle.setPosition(RectangleEdge.BOTTOM);\n        this.pieChart.setTitle(seriesTitle);\n        this.aggregatedItemsKey = \"Other\";\n        this.aggregatedItemsPaint = Color.lightGray;\n        this.sectionPaints = new HashMap();\n    }",
    "fixed_code": "    public MultiplePiePlot(CategoryDataset dataset) {\n        super();\n        setDataset(dataset);\n        PiePlot piePlot = new PiePlot(null);\n        this.pieChart = new JFreeChart(piePlot);\n        this.pieChart.removeLegend();\n        this.dataExtractOrder = TableOrder.BY_COLUMN;\n        this.pieChart.setBackgroundPaint(null);\n        TextTitle seriesTitle = new TextTitle(\"Series Title\",\n                new Font(\"SansSerif\", Font.BOLD, 12));\n        seriesTitle.setPosition(RectangleEdge.BOTTOM);\n        this.pieChart.setTitle(seriesTitle);\n        this.aggregatedItemsKey = \"Other\";\n        this.aggregatedItemsPaint = Color.lightGray;\n        this.sectionPaints = new HashMap();\n    }",
    "fixed_lines": "        setDataset(dataset);",
    "masked_code": "    public MultiplePiePlot(CategoryDataset dataset) {\n        super();\n>>> [ INFILL ] <<<\n        PiePlot piePlot = new PiePlot(null);\n        this.pieChart = new JFreeChart(piePlot);\n        this.pieChart.removeLegend();\n        this.dataExtractOrder = TableOrder.BY_COLUMN;\n        this.pieChart.setBackgroundPaint(null);\n        TextTitle seriesTitle = new TextTitle(\"Series Title\",\n                new Font(\"SansSerif\", Font.BOLD, 12));\n        seriesTitle.setPosition(RectangleEdge.BOTTOM);\n        this.pieChart.setTitle(seriesTitle);\n        this.aggregatedItemsKey = \"Other\";\n        this.aggregatedItemsPaint = Color.lightGray;\n        this.sectionPaints = new HashMap();\n    }",
    "project": "Chart",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "    \tassertTrue(dataset.hasListener(plot));",
    "test_name": "testConstructor",
    "test_suite": "org.jfree.chart.plot.junit.MultiplePiePlotTests",
    "time_buggy": "2008-04-11 08:24:17 -0700 ",
    "time_fixed": "2008-04-18 06:49:16 -0700 ",
    "bug_description": "Bug ID: 12\n\nTitle: junit.framework.AssertionFailedError due to Direct Variable Assignment\n\nProject: Chart\n\nBug Type: Software Languages, Software Hardware, Software Fault\n(SL SH SF)\n\nDescription:\n\nIn the 'Chart' project, a error of type junit.framework.AssertionFailedError has been discovered. The bug is contained in the MultiplePiePlot function inside the code. This bug has been classified under the categories: Software Languages, Software Hardware, Software Fault (SL SH SF).\n\nThe bug arises from the line of code:\n`this.dataset = dataset;` \n\nDetails:\n\nThe direct assignment of the 'dataset' variable to 'this.dataset' is the primary cause of the bug. Instead of using a setter method to adjust 'this.dataset', the 'dataset' is immediately set which is generating an AssertionFailedError in the test case.\n\nSteps to reproduce:\n\n1. Run the MultiplePiePlot method with an instance of CategoryDataset as the argument.\n2. Monitor the direct assignment of the dataset to this.dataset.\n3. Observe the AssertionFailedError.\n\nFix:\n\nThe bug has been fixed by replacing the direct assignment of the dataset with a setter function. The updated line of code is:\n\n`setDataset(dataset);`\n\nAfter this change, the bug is not reproduced and there is no AssertionFailedError. \n\nThis bug essentially teaches developers that direct assignment of variables can sometimes lead to failures, and utilizing methods to assign values can prove more stable. As a part of guiding developers to generate artificial Java bugs, this bug can act as a standard for creating bugs related to direct variable assignment vs method utilization for variable assignment."
}