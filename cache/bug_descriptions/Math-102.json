{
    "bug_id": 102,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }",
    "fixed_code": "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumExpected = 0d;\n        double sumObserved = 0d;\n        for (int i = 0; i < observed.length; i++) {\n            sumExpected += expected[i];\n            sumObserved += observed[i];\n        }\n        double ratio = 1.0d;\n        boolean rescale = false;\n        if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n            ratio = sumObserved / sumExpected;\n            rescale = true;\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            if (rescale) {\n                dev = ((double) observed[i] - ratio * expected[i]);\n                sumSq += dev * dev / (ratio * expected[i]);\n            } else {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n            }\n        }\n        return sumSq;\n    }",
    "fixed_lines": "        double sumExpected = 0d;\n        double sumObserved = 0d;\n        for (int i = 0; i < observed.length; i++) {\n            sumExpected += expected[i];\n            sumObserved += observed[i];\n        }\n        double ratio = 1.0d;\n        boolean rescale = false;\n        if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n            ratio = sumObserved / sumExpected;\n            rescale = true;\n        }\n            if (rescale) {\n                dev = ((double) observed[i] - ratio * expected[i]);\n                sumSq += dev * dev / (ratio * expected[i]);\n            } else {\n            }",
    "masked_code": "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n>>> [ INFILL ] <<<\n        }\n        return sumSq;\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>",
    "test_framework": "defects4j",
    "test_line": "",
    "test_name": "testChiSquareLargeTestStatistic",
    "test_suite": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest",
    "time_buggy": "2008-01-07 03:15:46 +0000",
    "time_fixed": "2008-01-09 05:16:00 +0000",
    "bug_description": "Bug ID: 102\n\nStep 1: Bug Description\n=======================\nThe application is not providing the expected output when performing the chi-square test statistic. Instead of getting an expected chi-square value of 114875.90421929007, the code is producing an inflated value of 3624883.3429077636. This discrepancy in output values suggests an issue in the computation or scaling logic of the chi-square function.\n\nStep 2: Bug Location\n====================\nThe bug was encountered in the Math project, particularly within the method \"public double chiSquare(double[] expected, long[] observed)\".\n\nIn this case, the calculation for the chi-square (sumSq) is problematic. The application is using a simple difference computation between the expected and observed values, without any form of scaling or normalization. This could be leading to inflated chi-square values because a simple difference may not always accurately represent the deviation when data scales are vastly different.\n\nStep 3: Steps To Reproduce Bug\n==============================\nTo reproduce this bug, a developer would need to pass two arrays to the chiSquare method: one for the expected values and another for the observed values. The sizes of both arrays should be identical and contain more than two elements. The observed values should be non-negative, and expected values should be positive. Upon execution, a higher than expected chi-square value would be returned.\n\nStep 4: Bug Fix\n=============== \nThe fix for this bug requires adding logic to rescale the data if the sums of the observed and expected arrays are significantly different. A ratio of the sums should be computed and checked against a small threshold (10E-6 in this case). If the difference is above this value, a \"rescale\" flag is set to true, and this ratio is then used to proportionately scale the expected values down in line with the observed values when calculating the chi-square statistic.\n\nThe corrected method now compares the scaled deviation (when required) or simply the deviation and sums these squared values to compute sumSq, providing a more accurate chi-square output. The use of a rescaling ratio ensures the deviation is proportional to the overall distribution of data. This results in a much accurate calculation of chi-square, which is closer to the expected result."
}