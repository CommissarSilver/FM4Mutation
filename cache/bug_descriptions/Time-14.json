{
    "bug_id": 14,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "fixed_code": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {\n            // month is largest field and being added to, such as month-day\n            int curMonth0 = partial.getValue(0) - 1;\n            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;\n            return set(partial, 0, values, newMonth);\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "fixed_lines": "        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {\n            int curMonth0 = partial.getValue(0) - 1;\n            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;\n            return set(partial, 0, values, newMonth);\n        }",
    "masked_code": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n>>> [ INFILL ] <<<\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "project": "Time",
    "test_error_message": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_framework": "defects4j",
    "test_line": "        MonthDay result = test.plusMonths(-1);",
    "test_name": "testPlusMonths_int_negativeFromLeap",
    "test_suite": "org.joda.time.TestMonthDay_Basics",
    "time_buggy": "2012-04-30 12:36:02 +0100",
    "time_fixed": "2012-05-23 12:45:41 +0100",
    "bug_description": "Bug Description:\n\nThis bug ID 14 is associated with the project named 'Time', under the bug type of 'SF' (Syntax/Formation). It pertains to a specific logic error when calculating dates using the Joda-Time library, specifically when adding months to the date 2004-02-29.\n\nThe error message received is 'org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]'. This implies that the application is not able to handle specific edge cases, such as leap years containing 29 days for the month of February, when adding months to it.\n\nThe Buggy Code:\n\nIn the code snippet, the 'add' function allows adding values to fields of a 'ReadablePartial' date-time, but seems to fail when the value to add equals zero, or when the new calculated date surpasses the maximum date value of 28 in some months like February in non-leap years.\n\nThe Fix:\n\nThe corrected function addresses this condition by adding specific logic to handle when the 'fieldIndex' equals zero (the largest field, i.e., the year) and the 'valueToAdd' is a multiple of 12 months.\n\nIn such cases, it calculates the new Month value considering edge cases like leap years, and then calls the 'set' function to apply the changes. The logic works correctly for leap years and does not break when adding a year to the date '2004-02-29'.\n\nJust to Clarify:\n\nThe error was caused due to the design limitation of the application not being able to handle the addition of months to a leap year date specifically on February 29th. The attempt to resolve this was by adding a consideration for 'fieldIndex' to be zero and the value to be added as 'valueToAdd' as a multiple of 12. This fix ensures that the addition logic is correct in handling dates during leap years."
}