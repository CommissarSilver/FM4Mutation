{
    "bug_id": 90,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) {\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) {\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) {\n                    end = i + 3;\n                } else {\n                    return false;\n                }\n\n\n                while (i < end) {\n                    i++;\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }",
    "fixed_code": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) {\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) {\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) {\n                    end = i + 3;\n                } else {\n                    return false;\n                }\n\n                if (end >= input.length)\n                    return false;\n\n                while (i < end) {\n                    i++;\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }",
    "fixed_lines": "                if (end >= input.length)\n                    return false;",
    "masked_code": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) {\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) {\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) {\n                    end = i + 3;\n                } else {\n                    return false;\n                }\n\n>>> [ INFILL ] <<<\n\n                while (i < end) {\n                    i++;\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }",
    "project": "Jsoup",
    "test_error_message": "java.lang.ArrayIndexOutOfBoundsException: 1",
    "test_framework": "defects4j",
    "test_line": "        req.addHeader(\"xxx\", \"\u00e9\");",
    "test_name": "handlesHeaderEncodingOnRequest",
    "test_suite": "org.jsoup.helper.HttpConnectionTest",
    "time_buggy": "2019-05-12 11:00:33 -0700",
    "time_fixed": "2019-05-12 11:37:10 -0700",
    "bug_description": "Bug ID: 90\n\nProject: Jsoup\n\nType of Bug: SH SF (Statement/Scope of Influence)\n\nTest Error Message: java.lang.ArrayIndexOutOfBoundsException: 1\n\nBuggy Lines: N/A - specific line numbers not provided\n\nBUG DESCRIPTION:\n\nIn the Jsoup project, an issue resulted in a java.lang.ArrayIndexOutOfBoundsException. This exception is thrown to indicate that an array has been accessed with an illegal index. \n\nThis error occurred within a method named \"looksLikeUtf8\". The method is used to check if the passed byte array can be interpreted as a UTF-8 string. The bug occurred because there is no check to confirm that the calculated end index does not exceed the length of the input array. As a result, an ArrayIndexOutOfBoundsException was thrown when trying to access the array with an index greater than its length.\n\nSTEPS TO REPRODUCE:\n\n    1. The method \"looksLikeUtf8\" receives a byte array as input.\n    2. The method checks for the UTF-8 Byte Order Mark at the beginning of the input. \n    3. It then attempts to validate that the rest of the bytes conform to UTF-8 standard.\n    4. If it encounters a byte that starts a multi-byte UTF-8 sequence, it calculates an end index for the sequence.\n    5. However, the code does not ensure that this end index is legal\u2014it does not check whether the end index is less than the length of the input array.\n    6. As a result, the code can try to access the input array with an illegal index, causing an ArrayIndexOutOfBoundsException.\n\nTHE FIX:\n\nThe error is rectified in the fixed code by adding a new condition immediately after the end index for a UTF-8 sequence is calculated. Before the loop that iterates through the rest of the UTF-8 sequence, it checks if the end index exceeds the length of the input array. If it does, the method immediately returns false, preventing an ArrayIndexOutOfBoundsException from being thrown.\n\nUltimately, this bug is associated with a lack of input validation. When writing code that interacts with arrays or other data structures with strict indexing rules, it is crucial to ensure that any index calculations result in valid indices to prevent out-of-bounds exceptions. Always check that indices are within the legal range for the array they are accessing, i.e., greater than or equal to zero and less than the length of the array."
}