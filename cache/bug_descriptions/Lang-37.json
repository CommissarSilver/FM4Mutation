{
    "bug_id": 37,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        final Class<?> type1 = array1.getClass().getComponentType();\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n            // Check if problem is incompatible types\n        return joinedArray;\n    }",
    "fixed_code": "    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        final Class<?> type1 = array1.getClass().getComponentType();\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        try {\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } catch (ArrayStoreException ase) {\n            // Check if problem is incompatible types\n            final Class<?> type2 = array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)){\n                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName());\n            }\n            throw ase; // No, so rethrow original\n        }\n        return joinedArray;\n    }",
    "fixed_lines": "        try {\n        } catch (ArrayStoreException ase) {\n            final Class<?> type2 = array2.getClass().getComponentType();\n            if (!type1.isAssignableFrom(type2)){\n                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName());\n            }\n            throw ase; // No, so rethrow original\n        }",
    "masked_code": "    public static <T> T[] addAll(T[] array1, T... array2) {\n        if (array1 == null) {\n            return clone(array2);\n        } else if (array2 == null) {\n            return clone(array1);\n        }\n        final Class<?> type1 = array1.getClass().getComponentType();\n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n            // Check if problem is incompatible types\n>>> [ INFILL ] <<<\n        return joinedArray;\n    }",
    "project": "Lang",
    "test_error_message": "java.lang.ArrayStoreException",
    "test_framework": "defects4j",
    "test_line": "               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});",
    "test_name": "testJira567",
    "test_suite": "org.apache.commons.lang3.ArrayUtilsAddTest",
    "time_buggy": "2009-12-17 11:13:39 +0000",
    "time_fixed": "2009-12-18 02:50:21 +0000",
    "bug_description": "Bug ID: 37\nProject: Lang\nBug Type: SF (Software Fault)\nTest Error Message: java.lang.ArrayStoreException\n\nDescription:\n\nThe function `addAll` aims to merge two arrays of a generic type `T`. The function checks if either of the two input arrays is null, and in such a case, it returns a clone of the non-null array. If both arrays are not null, it tries to create a third array, `joinedArray`, which would hold all the elements from both arrays. \n\nThe bug lies at the point where the function tries to copy the elements from second array `array2` to the `joinedArray`. There might be a possibility that the types of the elements in `array1` and `array2` are not compatible, causing a java.lang.ArrayStoreException to occur. The exception happens when an application attempts to store an object of an incorrect type into an array.\n\nThis potential issue was not handled in the buggy lines of the code causing the software to crash if an exception occurs.\n\nSteps to replicate:\n\nSimply passing two incompatible arrays to the `addAll` function would trigger the bug. For example, if `array1` is of type Integer and `array2` is of type String, the function would fail when trying to store the elements of `array2` into the `joinedArray` .\n\nKnown Fix:\n\nIncorporating a try-catch block around the potential code that could cause an `ArrayStoreException` would handle the possible error correctly. In the fixed code, the error is caught and checked whether the type of elements in `array2` is assignable to the type of elements in `array1`. If not, it throws an `IllegalArgumentException` with a detailed message explaining the error. If the types are assignable, the original `ArrayStoreException` is thrown, as there might be some other issue causing the exception."
}