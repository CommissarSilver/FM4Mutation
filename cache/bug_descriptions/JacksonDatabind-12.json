{
    "bug_id": 12,
    "bug_type": "SH SF",
    "buggy_lines": "        return (_valueTypeDeserializer == null)",
    "code": "    public boolean isCachable() {\n        /* As per [databind#735], existence of value or key deserializer (only passed\n         * if annotated to use non-standard one) should also prevent caching.\n         */\n        return (_valueTypeDeserializer == null)\n                && (_ignorableProperties == null);\n    }",
    "fixed_code": "    public boolean isCachable() {\n        /* As per [databind#735], existence of value or key deserializer (only passed\n         * if annotated to use non-standard one) should also prevent caching.\n         */\n        return (_valueDeserializer == null)\n                && (_keyDeserializer == null)\n                && (_valueTypeDeserializer == null)\n                && (_ignorableProperties == null);\n    }",
    "fixed_lines": "        return (_valueDeserializer == null)\n                && (_keyDeserializer == null)\n                && (_valueTypeDeserializer == null)",
    "masked_code": "    public boolean isCachable() {\n        /* As per [databind#735], existence of value or key deserializer (only passed\n         * if annotated to use non-standard one) should also prevent caching.\n         */\n>>> [ INFILL ] <<<\n                && (_ignorableProperties == null);\n    }",
    "project": "JacksonDatabind",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<1> but was:<100>",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(1, bean.map2.get(\"a\").intValue());",
    "test_name": "testCustomMapValueDeser735",
    "test_suite": "com.fasterxml.jackson.databind.deser.TestCustomDeserializers",
    "time_buggy": "2015-02-17 12:55:20 -0800",
    "time_fixed": "2015-03-26 12:49:58 -0700",
    "bug_description": "Bug Description:\n\nBug ID: 12\nProject: JacksonDatabind\nBug Type: Syntaxic and Semantic Fault (SH SF)\n\nDescription:\nThe bug identified under bug ID:12 belongs to the JacksonDatabind project. The error is categorized under Syntaxic and Semantic Fault (SH SF). The test error message shows \"junit.framework.AssertionFailedError: expected:<1> but was:<100>\". This error occurred due to the mismatched expected output and actual output.\n\nDetails:\nThere is an issue in the 'isCachable()' function. This function should return true only when there is no value or key deserializer has been declared, indicating that it is safe to cache values. However, the problem lies in the check being done using '_valueTypeDeserializer' variable, leaving out the possible existence of '_valueDeserializer' and '_keyDeserializer'. \n\nBuggy Code:\nIn the buggy code, the 'isCachable()' function returns `_valueTypeDeserializer == null` but does not take into account '_valueDeserializer' and '_keyDeserializer'. This could result in incorrect boolean output if either '_valueDeserializer' or '_keyDeserializer' are different from null.\n\n    public boolean isCachable() {\n    //....some comments\n      return (_valueTypeDeserializer == null)\n            && (_ignorableProperties == null);\n    }\n    \nFixed Code:\nIn the corrected version of the code, the defects have been corrected by incorporating checks for `_valueDeserializer`, `_keyDeserializer` in the return condition. The revised 'isCachable()' function returns true only when all of the deserializers and '_ignorableProperties' are null.\n\n    public boolean isCachable() {\n    //....some comments\n      return (_valueDeserializer == null)\n            && (_keyDeserializer == null)\n            && (_valueTypeDeserializer == null)\n            && (_ignorableProperties == null);\n    }\n\nInference:\nA complete check of all deserializers state ensures that the caching of the values only happens when there are no custom deserializers or ignorable properties present, thus resolving the junit.framework.AssertionFailedError."
}