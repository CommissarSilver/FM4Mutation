{
    "bug_id": 30,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public int read(final byte[] dest, final int offs, final int len)\n        throws IOException {\n        if (offs < 0) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");\n        }\n        if (len < 0) {\n            throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");\n        }\n        if (offs + len > dest.length) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");\n        }\n        if (this.in == null) {\n            throw new IOException(\"stream closed\");\n        }\n\n        final int hi = offs + len;\n        int destOffs = offs;\n        int b;\n        while (destOffs < hi && ((b = read0()) >= 0)) {\n            dest[destOffs++] = (byte) b;\n            count(1);\n        }\n\n        int c = (destOffs == offs) ? -1 : (destOffs - offs);\n        return c;\n    }",
    "fixed_code": "    public int read(final byte[] dest, final int offs, final int len)\n        throws IOException {\n        if (offs < 0) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");\n        }\n        if (len < 0) {\n            throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");\n        }\n        if (offs + len > dest.length) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");\n        }\n        if (this.in == null) {\n            throw new IOException(\"stream closed\");\n        }\n        if (len == 0) {\n            return 0;\n        }\n\n        final int hi = offs + len;\n        int destOffs = offs;\n        int b;\n        while (destOffs < hi && ((b = read0()) >= 0)) {\n            dest[destOffs++] = (byte) b;\n            count(1);\n        }\n\n        int c = (destOffs == offs) ? -1 : (destOffs - offs);\n        return c;\n    }",
    "fixed_lines": "        if (len == 0) {\n            return 0;\n        }",
    "masked_code": "    public int read(final byte[] dest, final int offs, final int len)\n        throws IOException {\n        if (offs < 0) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");\n        }\n        if (len < 0) {\n            throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");\n        }\n        if (offs + len > dest.length) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");\n        }\n        if (this.in == null) {\n            throw new IOException(\"stream closed\");\n        }\n>>> [ INFILL ] <<<\n\n        final int hi = offs + len;\n        int destOffs = offs;\n        int b;\n        while (destOffs < hi && ((b = read0()) >= 0)) {\n            dest[destOffs++] = (byte) b;\n            count(1);\n        }\n\n        int c = (destOffs == offs) ? -1 : (destOffs - offs);\n        return c;\n    }",
    "project": "Compress",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<0> but was:<-1>",
    "test_framework": "defects4j",
    "test_line": "        Assert.assertEquals(0, bzipIn.read(buffer, 1024, 0));",
    "test_name": "readOfLength0ShouldReturn0",
    "test_suite": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStreamTest",
    "time_buggy": "2015-02-17 17:40:54 +0000",
    "time_fixed": "2015-02-20 16:18:00 +0000",
    "bug_description": "Bug Description:\n\nBug ID: 30 in the \"Compress\" project is of the type \"SH SF\" which signifies the omission of a case or condition in the flow control of a program, most often linked to conditional statements.\n\nIn the initial buggy code, the 'read' method returns '-1' when the length 'len' of the byte array 'dest' is set to zero, though, logically, the expected output would be '0'. This is because the code fails to account for the condition when the length 'len' is set to zero and thus the loop 'while(destOffs < hi && ((b = read0()) >= 0))' is not entered, leading the index 'destOffs' to remain equal to 'offs'. This mismatch triggers the 'junit.framework.AssertionFailedError', as the testcase was expecting to receive '0' but got '-1' instead. \n\nThe bug has thus been located in the conditional flow control where the case of length 'len' being zero has been overlooked.\n\nSteps to Replicate:\n\n1. Invoke the 'read' method in the 'Compress' project using a byte array 'dest', an offset 'offs' and a length 'len' set to zero. \n2. The expected output would be '0', however, due to the bug, the method returns '-1'.\n\nFix:\n\nThe bug has been rectified in the fixed code by adding an if statement 'if (len == 0) {return 0;}' that checks for the condition of 'len' being zero, and if so, returns '0', thereby preventing the 'junit.framework.AssertionFailedError'. This prevents 'destOffs' equal to 'offs' and thus returning '-1' when 'len' is zero. \n\nThrough this added flow control, the 'read' method now adequately handles all cases and conditions, which rectifies the bug."
}