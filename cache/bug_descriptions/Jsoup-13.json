{
    "bug_id": 13,
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "    public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        return attributes.hasKey(attributeKey);\n    }",
    "fixed_code": "    public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n        if (attributeKey.toLowerCase().startsWith(\"abs:\")) {\n            String key = attributeKey.substring(\"abs:\".length());\n            if (attributes.hasKey(key) && !absUrl(key).equals(\"\"))\n                return true;\n        }\n        return attributes.hasKey(attributeKey);\n    }",
    "fixed_lines": "        if (attributeKey.toLowerCase().startsWith(\"abs:\")) {\n            String key = attributeKey.substring(\"abs:\".length());\n            if (attributes.hasKey(key) && !absUrl(key).equals(\"\"))\n                return true;\n        }",
    "masked_code": "    public boolean hasAttr(String attributeKey) {\n        Validate.notNull(attributeKey);\n\n>>> [ INFILL ] <<<\n        return attributes.hasKey(attributeKey);\n    }",
    "project": "Jsoup",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "        assertTrue(two.hasAttr(\"abs:href\"));",
    "test_name": "handlesAbsPrefixOnHasAttr",
    "test_suite": "org.jsoup.nodes.NodeTest",
    "time_buggy": "2011-07-02 21:12:08 +1000",
    "time_fixed": "2011-07-02 21:12:08 +1000",
    "bug_description": "Bug ID: 13\nProject: Jsoup\nBug Type: Symbol Hiding/Shadowing Field (SH SF)\n\nDescription:\n\nThe issue with the code lays in the 'hasAttr' function present in the Jsoup project. \n\nBug Description:\n\nThe original function took an 'attributeKey' as a parameter, then it called 'Validate.notNull(attributeKey);' to ensure that the passed key is not null. Then in the next line 'attributes.hasKey(attributeKey);', it returned whether the attribute had the key mentioned.\n\nThe problem here is that it doesn't consider cases where the attribute key starts with \"abs:\". In the context of this project, Jsoup, the \"abs:\" prefix indicates an absolute URL. The function was potentially returning incorrect results for keys prefixed with \"abs:\", thus causing the 'junit.framework.AssertionFailedError'. \n\nBug Fix:\n\nThe fixed function still takes 'attributeKey' as a parameter and checks if it is not null. However, it then proceeds to check if the attribute key starts with \"abs:\". If it does, it removes the \"abs:\" from the key and checks if the attribute contains this updated key, and if the absolute URL is not empty. If both conditions are satisfied it returns true meaning that the attributeKey does exist. If not, it continues with the original function and checks if the attribute contains the original attributeKey.\n\nTo put this issue into perspective, let's assume that we have an attribute called \"abs:href\". Initially, the function would only return true if the attribute key was exactly \"abs:href\". With the updated function, it will return true even if the passed attributeKey is \"href\", because \"abs:href\" contains \"href\" and is not an empty string.\n\nThis bug appears to have been the result of not considering all use cases when designing the function. Future developers, to avoid this type of bugs, should carefully consider all possible inputs and scenarios when writing code and create appropriate unit tests. The presence of unit tests can help identify these bugs before the code is released."
}