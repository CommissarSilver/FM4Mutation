{
    "bug_id": 19,
    "bug_type": "SL SH SF",
    "buggy_lines": "            if (rawCentralDirectoryData.length != expectedLength) {",
    "code": "    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            int expectedLength = (hasUncompressedSize ? DWORD : 0)\n                + (hasCompressedSize ? DWORD : 0)\n                + (hasRelativeHeaderOffset ? DWORD : 0)\n                + (hasDiskStart ? WORD : 0);\n            if (rawCentralDirectoryData.length != expectedLength) {\n                throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" doesn't match central directory\"\n                                       + \" data.  Expected length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);\n            }\n            int offset = 0;\n            if (hasUncompressedSize) {\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasCompressedSize) {\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);\n                offset += DWORD;\n            }\n            if (hasRelativeHeaderOffset) {\n                relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasDiskStart) {\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                offset += WORD;\n            }\n        }\n    }",
    "fixed_code": "    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            int expectedLength = (hasUncompressedSize ? DWORD : 0)\n                + (hasCompressedSize ? DWORD : 0)\n                + (hasRelativeHeaderOffset ? DWORD : 0)\n                + (hasDiskStart ? WORD : 0);\n            if (rawCentralDirectoryData.length < expectedLength) {\n                throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" doesn't match central directory\"\n                                       + \" data.  Expected length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);\n            }\n            int offset = 0;\n            if (hasUncompressedSize) {\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasCompressedSize) {\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);\n                offset += DWORD;\n            }\n            if (hasRelativeHeaderOffset) {\n                relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasDiskStart) {\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                offset += WORD;\n            }\n        }\n    }",
    "fixed_lines": "            if (rawCentralDirectoryData.length < expectedLength) {",
    "masked_code": "    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            int expectedLength = (hasUncompressedSize ? DWORD : 0)\n                + (hasCompressedSize ? DWORD : 0)\n                + (hasRelativeHeaderOffset ? DWORD : 0)\n                + (hasDiskStart ? WORD : 0);\n>>> [ INFILL ] <<<\n                throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" doesn't match central directory\"\n                                       + \" data.  Expected length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);\n            }\n            int offset = 0;\n            if (hasUncompressedSize) {\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasCompressedSize) {\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);\n                offset += DWORD;\n            }\n            if (hasRelativeHeaderOffset) {\n                relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += DWORD;\n            }\n            if (hasDiskStart) {\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                offset += WORD;\n            }\n        }\n    }",
    "project": "Compress",
    "test_error_message": "java.util.zip.ZipException: central directory zip64 extended information extra field's length doesn't match central directory data. Expected length 16 but is 28",
    "test_framework": "defects4j",
    "test_line": "        zf = new ZipFile(archive);",
    "test_name": "testExcessDataInZip64ExtraField",
    "test_suite": "org.apache.commons.compress.archivers.zip.ZipFileTest",
    "time_buggy": "2013-05-26 17:28:17 +0000",
    "time_fixed": "2013-05-26 17:36:35 +0000",
    "bug_description": "Bug ID: 19\n\nTitle: Length mismatch between Raw Central Directory Data and Expected Length in 'compress' Project\n\nDescription:\n\nThe bug occurs in the 'Compress' project, specifically in the method 'reparseCentralDirectoryData'. The issue arises when the length of the raw central directory data does not match the expected length. Originally, when the length of rawCentralDirectoryData did not exactly match the calculated 'expectedLength', a ZipException was thrown with a message indicating so. However, the length of rawCentralDirectoryData can be longer than 'expectedLength' without causing any issues.\n\nThe Bug appears to be a Semantic Bug (SL), Syntax bug (SH) and Simple bug (SF) where the conditional statement for checking the length of rawCentralDirectoryData against the expected length is incorrect, while the syntax and variables used appear to be correct, the logic of the condition is flawed.\n\nSteps to reproduce:\nThis bug cannot be reproduced by a particular set of user interactions as it is a part of core code logic. The issue lies in the below line of the code:\n```java\n    if (rawCentralDirectoryData.length != expectedLength) {\n```\n\nHere the length of rawCentralDirectoryData is checked against expectedLength. If the lengths do not match, an exception is thrown. However, the bug is that this exception is also thrown when the rawCentralDirectoryData length is greater than expectedLength, which should not happen as rawCentralDirectoryData can be greater than expectedLength.\n\nSteps to Generate Similar Bug:\n1. Define a method with parameter as an array or a list.\n2. Calculate an expected length of the array or a list based on certain conditions.\n3. Include an if condition to throw an exception when the actual length is not equal to the expected length.\n\nFix:\nThe fixed code modifies the if condition to only throw an exception if the actual length is less than the expected length:\n```java\n    if (rawCentralDirectoryData.length < expectedLength) {\n```\n\nThis way, cases where the actual length is greater than the expected length is accounted for and no exception is thrown unnecessarily."
}