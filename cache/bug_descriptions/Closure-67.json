{
    "bug_id": 67,
    "bug_type": "SL SH SF",
    "buggy_lines": "          ) {",
    "code": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP\n          ) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "fixed_code": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP\n          && assign.getParent().getType() == Token.EXPR_RESULT) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "fixed_lines": "          && assign.getParent().getType() == Token.EXPR_RESULT) {",
    "masked_code": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP\n>>> [ INFILL ] <<<\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError:",
    "test_framework": "defects4j",
    "test_line": "    testSame(\"function e(){}\" +",
    "test_name": "testAliasing7",
    "test_suite": "com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest",
    "time_buggy": "2011-06-06 15:05:46 +0000",
    "time_fixed": "2011-06-06 22:36:17 +0000",
    "bug_description": "Bug Description:\n\nID: 67\nProject: Closure\nBug Type: Single Line, Single Hunk, Single File (SL SH SF)\nAffected Files: N/A \n\n# Description\nThe bug resides in the 'isPrototypePropertyAssign' method in an unidentified file. During the execution of JUnit test cases, an AssertionFailedError was encountered.\n\nThe problematic code is part of a complex boolean method that checks if a node has the type of Token.GETPROP and satisfies other conditions. \n\nThe bug was detected at the line, \") {\". According to the given code snippet, this line ends an if-block which checks multiple conditions. However, the missing condition to verify whether the parent type of the 'assign' is Token.EXPR_RESULT led to the AssertionFailedError. \n\n# Steps to Reproduce \nStep 1: Navigate to the described method 'isPrototypePropertyAssign' in the respective java file.\n\nStep 2: Execute a JUnit test which can trigger this method with specific inputs where 'assign.getParent().getType()' is not Token.EXPR_RESULT\n\nStep 3: Observe the test error message: junit.framework.AssertionFailedError \n\n# Expected Behaviour\nWhen the 'assign' node's parent type is not of type Token.EXPR_RESULT, it should return false. \n\n# Observed Behavior\nThe method did not correctly identify these cases, compromising its validity and causing junit.framework.AssertionFailedError during the test phase.\n\n# Solution\nThe bug was fixed by including an additional condition check inside the if statement for 'assign.getParent().getType() == Token.EXPR_RESULT'. \n\nThe fixed code ensures that the 'isPrototypePropertyAssign' method only considers assignments where the parent type of the 'assign' node is Token.EXPR_RESULT, thereby eliminating the AssertionError and improving the overall reliability of the method.\n\n# Notes for Creating Artificial Java Bugs \nWhen generating artificial java bugs, consider misconfiguring conditional checks, especially in complex boolean methods. These could include missing or incorrect conditional checks, and misconfigured logic inside if-else blocks. Programming these bugs could involve removing conditions or ignoring essential checks. In this case, removing a required identity check led to the bug. Explanation should specify the step-by-step process of reproducing, observed and expected behavior, as well as the solution."
}