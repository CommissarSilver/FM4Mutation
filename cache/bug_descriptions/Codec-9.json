{
    "bug_id": 9,
    "bug_type": "SL SH SF",
    "buggy_lines": "        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
    "code": "    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if (binaryData == null || binaryData.length == 0) {\n            return binaryData;\n        }\n\n        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n        if (len > maxResultSize) {\n            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n        }\n                \n        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n        return b64.encode(binaryData);\n    }",
    "fixed_code": "    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if (binaryData == null || binaryData.length == 0) {\n            return binaryData;\n        }\n\n        long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);\n        if (len > maxResultSize) {\n            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n        }\n                \n        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n        return b64.encode(binaryData);\n    }",
    "fixed_lines": "        long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);",
    "masked_code": "    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if (binaryData == null || binaryData.length == 0) {\n            return binaryData;\n        }\n\n>>> [ INFILL ] <<<\n        if (len > maxResultSize) {\n            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n        }\n                \n        Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n        return b64.encode(binaryData);\n    }",
    "project": "Codec",
    "test_error_message": "java.lang.IllegalArgumentException: Input array too big, the output array would be bigger (6) than the specified maxium size of 4",
    "test_framework": "defects4j",
    "test_line": "        Base64.encodeBase64(in, false, false, out.length);",
    "test_name": "testCodec112",
    "test_suite": "org.apache.commons.codec.binary.Base64Test",
    "time_buggy": "2011-01-26 19:09:00 +0000",
    "time_fixed": "2011-01-26 23:40:25 +0000",
    "bug_description": "Bug Description:\n\n1. ID: The bug is identified by the number 9.\n\n2. Project: The bug is found in the 'Codec' project.\n\n3. Bug Type: The bug is categorized as an SL SH SF type.\n\n4. Error message: The program throws a java.lang.IllegalArgumentException with the message \"Input array too big, the output array would be bigger (6) than the specified maximum size of 4\". This is because the length of the data array to be encoded ('binaryData') is larger than the specified maximum size.\n\n5. Buggy Line: The error is thrown at the line where the length of the encoded data is calculated. Here, the length of the given input array is found to be larger than the maximum allowable size. \n                \n        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n   \n6. Code Details: The function encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) is used to encode a byte array into Base64 format. It first checks if the input array is null or of zero length. It then calculates the length of the resultant encoded data, and if this is larger than the specified maximum size, it throws an IllegalArgumentException. If the size is within the permitted limit, it creates a new Base64 instance and uses it to encode the data.\n\n7. Bug Fix: The bug is fixed by tweaking the line which calculates the encoded data length. The MIME_CHUNK_SIZE is no longer used when the data is not intended to be chunked, instead, a zero is used. This change helps to avoid the possible IllegalArgumentException by reducing the size of the chunk whenever 'isChunked' is false. \n\n8. Bug Fix Code Line:\n   \n        long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);\n\n9. Developers can generate artificial java bugs similar to this one by intentionally setting the maximum output array size to a smaller value than the length of the encoded data array, or by setting the chunk size to a large value while 'isChunked' remains false."
}