{
    "bug_id": "traccar-traccar-1a1126d2d392",
    "bug_type": "SF",
    "buggy_lines": "\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        position.setTime(dateFormat.parse(values[index++] + values[index++]));\n        position.setLatitude(Double.parseDouble(values[index++]));\n        position.setLongitude(Double.parseDouble(values[index++]));\n        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n        position.setCourse(Double.parseDouble(values[index++]));\n        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n        position.setValid(values[index++].equals(\"1\"));",
    "code": "    private Position decode4(\n            Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n        int index = 0;\n\n        String type = values[index++].substring(5);\n\n        if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_TYPE, type);\n\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        index += 1; // model\n\n        Network network = new Network();\n\n        for (int i = 0; i < 7; i++) {\n            int cid = Integer.parseInt(values[index++]);\n            int mcc = Integer.parseInt(values[index++]);\n            int mnc = Integer.parseInt(values[index++]);\n            int lac, rssi;\n            if (i == 0) {\n                rssi = Integer.parseInt(values[index++]);\n                lac = Integer.parseInt(values[index++]);\n            } else {\n                lac = Integer.parseInt(values[index++]);\n                rssi = Integer.parseInt(values[index++]);\n            }\n            index += 1; // timing advance\n            if (cid > 0) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n        }\n\n        position.setNetwork(network);\n\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n        position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n        if (values[index].length() == 3) {\n            index += 1; // collaborative network\n        }\n\n-        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n-        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-        position.setTime(dateFormat.parse(values[index +] + values[index++]));\n\n-        position.setLatitude(Double.parseDouble(values[index +]));\n-        position.setLongitude(Double.parseDouble(values[index +]));\n-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index +])));\n-        position.setCourse(Double.parseDouble(values[index +]));\n\n-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index +]));\n\n-        position.setValid(values[index +].equals(\"1\"));\n\n        return position;\n    }",
    "fixed_code": "    private Position decode4(\n            Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n        int index = 0;\n\n        String type = values[index++].substring(5);\n\n        if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_TYPE, type);\n\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        index += 1; // model\n\n        Network network = new Network();\n\n        for (int i = 0; i < 7; i++) {\n            int cid = Integer.parseInt(values[index++]);\n            int mcc = Integer.parseInt(values[index++]);\n            int mnc = Integer.parseInt(values[index++]);\n            int lac, rssi;\n            if (i == 0) {\n                rssi = Integer.parseInt(values[index++]);\n                lac = Integer.parseInt(values[index++]);\n            } else {\n                lac = Integer.parseInt(values[index++]);\n                rssi = Integer.parseInt(values[index++]);\n            }\n            index += 1; // timing advance\n            if (cid > 0) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n        }\n\n        position.setNetwork(network);\n\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n        position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n        if (values[index].length() == 3) {\n            index += 1; // collaborative network\n        }\n\n+        if (values[index].isEmpty()) {\n\n+            getLastLocation(position, null);\n\n+        } else {\n\n+            DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n+            dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+            position.setTime(dateFormat.parse(values[index++] + values[index++]));\n+\n+            position.setLatitude(Double.parseDouble(values[index++]));\n+            position.setLongitude(Double.parseDouble(values[index++]));\n+            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n+            position.setCourse(Double.parseDouble(values[index++]));\n+\n+            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n+\n+            position.setValid(values[index++].equals(\"1\"));\n+\n+        }\n\n        return position;\n    }",
    "fixed_lines": "\n        if (values[index].isEmpty()) {\n            getLastLocation(position, null);\n        } else {\n            DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n            dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n            position.setTime(dateFormat.parse(values[index++] + values[index++]));\n\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Double.parseDouble(values[index++]));\n\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n\n            position.setValid(values[index++].equals(\"1\"));\n\n        }",
    "masked_code": "    private Position decode4(\n            Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n        int index = 0;\n\n        String type = values[index++].substring(5);\n\n        if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_TYPE, type);\n\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        index += 1; // model\n\n        Network network = new Network();\n\n        for (int i = 0; i < 7; i++) {\n            int cid = Integer.parseInt(values[index++]);\n            int mcc = Integer.parseInt(values[index++]);\n            int mnc = Integer.parseInt(values[index++]);\n            int lac, rssi;\n            if (i == 0) {\n                rssi = Integer.parseInt(values[index++]);\n                lac = Integer.parseInt(values[index++]);\n            } else {\n                lac = Integer.parseInt(values[index++]);\n                rssi = Integer.parseInt(values[index++]);\n            }\n            index += 1; // timing advance\n            if (cid > 0) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n        }\n\n        position.setNetwork(network);\n\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n        position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n\n        if (values[index].length() == 3) {\n            index += 1; // collaborative network\n        }\n\n\n\n\n>>> [ INFILL ] <<<\n\n        return position;\n    }",
    "project": "traccar-traccar",
    "test_error_message": "    java.text.ParseException at SuntechProtocolDecoderTest.java:15",
    "test_framework": "gitbugjava",
    "test_line": "",
    "test_name": "testDecode()",
    "test_suite": "org.traccar.protocol.SuntechProtocolDecoderTest",
    "time_buggy": "2023-07-24 07:26:18 -0700",
    "time_fixed": "2023-07-25 05:15:18 -0700"
}