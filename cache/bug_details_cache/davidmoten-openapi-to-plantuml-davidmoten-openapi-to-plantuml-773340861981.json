{
    "bug_id": "davidmoten-openapi-to-plantuml-773340861981",
    "bug_type": "SH SF",
    "buggy_lines": "\n                + \"\\nBorderColor<<Path>> Tomato\"\n                + \"}\"",
    "code": "                + \"\\nskinparam class {\"\n                + \"\\nBackgroundColor<<Path>> Wheat\"\n-                  \"\\nBorderColor<<Path>> Tomato\"\n-                  \"}\"\n                // make sure that periods in class names aren't interpreted as namespace\n                // separators (which results in recursive boxing)\n                + \"\\nset namespaceSeparator none\" //\n                + toPlantUmlInner(model) //\n                + \"\\n\\n@enduml\";\n    }\n\n    private static String toPlantUmlInner(Model model) {\n////        model = new ModelConverterLinksThreshold(10).apply(model);\n//        model = new ModelConverterExtract(Collections.singleton(\"GET.*athletes.*routes\"), true).apply(model);\n        int anonNumber = 0;\n        StringBuilder b = new StringBuilder();\n        for (Class cls : model.classes()) {\n            if (cls.isEnum()) {\n                b.append(\"\\n\\nenum \" + Util.quote(cls.name())\n                        + toStereotype(cls.type()).map(x -> \" <<\" + x + \">>\").orElse(\"\") + \" {\");\n                cls.fields().stream().forEach(f -> {\n                    b.append(\"\\n  \" + f.name());\n                });",
    "fixed_code": "                + \"\\nskinparam class {\"\n                + \"\\nBackgroundColor<<Path>> Wheat\"\n+                + \"\\n}\"\n                // make sure that periods in class names aren't interpreted as namespace\n                // separators (which results in recursive boxing)\n                + \"\\nset namespaceSeparator none\" //\n                + toPlantUmlInner(model) //\n                + \"\\n\\n@enduml\";\n    }\n\n    private static String toPlantUmlInner(Model model) {\n////        model = new ModelConverterLinksThreshold(10).apply(model);\n//        model = new ModelConverterExtract(Collections.singleton(\"GET.*athletes.*routes\"), true).apply(model);\n        int anonNumber = 0;\n        StringBuilder b = new StringBuilder();\n        for (Class cls : model.classes()) {\n            if (cls.isEnum()) {\n                b.append(\"\\n\\nenum \" + Util.quote(cls.name())\n                        + toStereotype(cls.type()).map(x -> \" <<\" + x + \">>\").orElse(\"\") + \" {\");\n                cls.fields().stream().forEach(f -> {\n                    b.append(\"\\n  \" + f.name());\n                });",
    "fixed_lines": "\n                + \"\\n}\"",
    "masked_code": "                + \"\\nskinparam class {\"\n                + \"\\nBackgroundColor<<Path>> Wheat\"\n>>> [ INFILL ] <<<\n                // make sure that periods in class names aren't interpreted as namespace\n                // separators (which results in recursive boxing)\n                + \"\\nset namespaceSeparator none\" //\n                + toPlantUmlInner(model) //\n                + \"\\n\\n@enduml\";\n    }\n\n    private static String toPlantUmlInner(Model model) {\n////        model = new ModelConverterLinksThreshold(10).apply(model);\n//        model = new ModelConverterExtract(Collections.singleton(\"GET.*athletes.*routes\"), true).apply(model);\n        int anonNumber = 0;\n        StringBuilder b = new StringBuilder();\n        for (Class cls : model.classes()) {\n            if (cls.isEnum()) {\n                b.append(\"\\n\\nenum \" + Util.quote(cls.name())\n                        + toStereotype(cls.type()).map(x -> \" <<\" + x + \">>\").orElse(\"\") + \" {\");\n                cls.fields().stream().forEach(f -> {\n                    b.append(\"\\n  \" + f.name());\n                });",
    "project": "davidmoten-openapi-to-plantuml",
    "test_error_message": "No match found or invalid line number.",
    "test_framework": "gitbugjava",
    "test_line": "            assertEquals(expected, puml);",
    "test_name": "test[src/test/resources/inputs/additional-properties-complex.yml]",
    "test_suite": "com.github.davidmoten.oas3.puml.ConverterBatchTest",
    "time_buggy": "2023-10-29 14:29:35 +1100",
    "time_fixed": "2023-10-29 14:46:14 +1100"
}