{
    "bug_id": "traccar-traccar-105873ab5256",
    "bug_type": "SH SF",
    "buggy_lines": "",
    "code": "public class Minifinder2ProtocolDecoder extends BaseProtocolDecoder {\n\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        if (deviceSession == null) {\n                            return null;\n                        }\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); // flags\n                        buf.skipBytes(6); // mac\n                        buf.readUnsignedByte(); // rssi\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); // timestamp\n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); // timestamp\n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); // timestamp\n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n\n            return positions;\n\n        }\n\n        return null;\n    }\n\n}",
    "fixed_code": "public class Minifinder2ProtocolDecoder extends BaseProtocolDecoder {\n\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        if (deviceSession == null) {\n                            return null;\n                        }\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); // flags\n                        buf.skipBytes(6); // mac\n                        buf.readUnsignedByte(); // rssi\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); // timestamp\n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); // timestamp\n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); // timestamp\n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n\n            return positions;\n\n+        } else if (type == MSG_RESPONSE) {\n+\n+            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n+            if (deviceSession == null) {\n+                return null;\n+            }\n+\n+            Position position = new Position(getProtocolName());\n+            position.setDeviceId(deviceSession.getDeviceId());\n+\n+            getLastLocation(position, null);\n+\n+            buf.readUnsignedByte(); // length\n+            position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n+\n+            return position;\n+\n        }\n\n        return null;\n    }\n\n}",
    "fixed_lines": "\n        } else if (type == MSG_RESPONSE) {\n\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n\n            getLastLocation(position, null);\n\n            buf.readUnsignedByte(); // length\n            position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n\n            return position;",
    "masked_code": "public class Minifinder2ProtocolDecoder extends BaseProtocolDecoder {\n\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        if (deviceSession == null) {\n                            return null;\n                        }\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); // flags\n                        buf.skipBytes(6); // mac\n                        buf.readUnsignedByte(); // rssi\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); // timestamp\n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); // timestamp\n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); // timestamp\n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n\n            return positions;\n\n>>> [ INFILL ] <<<\n        }\n\n        return null;\n    }\n\n}",
    "project": "traccar-traccar",
    "test_error_message": "    java.lang.NullPointerException at Minifinder2ProtocolDecoderTest.java:18",
    "test_framework": "gitbugjava",
    "test_line": "",
    "test_name": "testDecode()",
    "test_suite": "org.traccar.protocol.Minifinder2ProtocolDecoderTest",
    "time_buggy": "2023-07-12 07:44:58 -0700",
    "time_fixed": "2023-07-13 07:00:51 -0700"
}