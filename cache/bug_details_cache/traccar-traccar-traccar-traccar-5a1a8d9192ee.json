{
    "bug_id": "traccar-traccar-5a1a8d9192ee",
    "bug_type": "SL SH SF",
    "buggy_lines": "\n                    position.setTime(new Date((buf.readUnsignedIntLE() + 946713600) * 1000));",
    "code": "    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // protocol revision\n        buf.readUnsignedShort(); // length\n        buf.readUnsignedByte(); // header indicator\n        buf.readUnsignedShort(); // header length\n        buf.readUnsignedInt(); // reference\n\n        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedByte(); // session status\n        buf.readUnsignedShort(); // originator index\n        buf.readUnsignedShort(); // transfer index\n        buf.readUnsignedInt(); // session time\n        buf.readUnsignedByte(); // payload indicator\n        buf.readUnsignedShort(); // payload length\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        List<Integer> parameters = getParameters(deviceSession.getDeviceId());\n\n        for (int parameter : parameters) {\n            switch (parameter) {\n                case 0x01:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x04:\n-                    position.setTime(new Date((buf.readUnsignedIntLE()   946713600) * 1000));\n                    break;\n                case 0x05:\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    break;\n                case 0x06:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x08:\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09:\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                case 0x0A:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                    break;\n                case 0x0B:\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x0C:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x0D:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x19:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1A:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1B:\n                    buf.readUnsignedByte(); // geofence\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return position;\n    }",
    "fixed_code": "    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // protocol revision\n        buf.readUnsignedShort(); // length\n        buf.readUnsignedByte(); // header indicator\n        buf.readUnsignedShort(); // header length\n        buf.readUnsignedInt(); // reference\n\n        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedByte(); // session status\n        buf.readUnsignedShort(); // originator index\n        buf.readUnsignedShort(); // transfer index\n        buf.readUnsignedInt(); // session time\n        buf.readUnsignedByte(); // payload indicator\n        buf.readUnsignedShort(); // payload length\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        List<Integer> parameters = getParameters(deviceSession.getDeviceId());\n\n        for (int parameter : parameters) {\n            switch (parameter) {\n                case 0x01:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x04:\n+                    position.setTime(new Date((buf.readUnsignedIntLE() + 946684800) * 1000));\n                    break;\n                case 0x05:\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    break;\n                case 0x06:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x08:\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09:\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                case 0x0A:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                    break;\n                case 0x0B:\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x0C:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x0D:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x19:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1A:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1B:\n                    buf.readUnsignedByte(); // geofence\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return position;\n    }",
    "fixed_lines": "\n                    position.setTime(new Date((buf.readUnsignedIntLE() + 946684800) * 1000));",
    "masked_code": "    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n\n        buf.readUnsignedByte(); // protocol revision\n        buf.readUnsignedShort(); // length\n        buf.readUnsignedByte(); // header indicator\n        buf.readUnsignedShort(); // header length\n        buf.readUnsignedInt(); // reference\n\n        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n\n        buf.readUnsignedByte(); // session status\n        buf.readUnsignedShort(); // originator index\n        buf.readUnsignedShort(); // transfer index\n        buf.readUnsignedInt(); // session time\n        buf.readUnsignedByte(); // payload indicator\n        buf.readUnsignedShort(); // payload length\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        List<Integer> parameters = getParameters(deviceSession.getDeviceId());\n\n        for (int parameter : parameters) {\n            switch (parameter) {\n                case 0x01:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x04:\n>>> [ INFILL ] <<<\n                    break;\n                case 0x05:\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    break;\n                case 0x06:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x08:\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09:\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                case 0x0A:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                    break;\n                case 0x0B:\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x0C:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x0D:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x19:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1A:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1B:\n                    buf.readUnsignedByte(); // geofence\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return position;\n    }",
    "project": "traccar-traccar",
    "test_error_message": "    org.opentest4j.AssertionFailedError at T622IridiumProtocolDecoderTest.java:15",
    "test_framework": "gitbugjava",
    "test_line": "",
    "test_name": "testDecode()",
    "test_suite": "org.traccar.protocol.T622IridiumProtocolDecoderTest",
    "time_buggy": "2023-07-18 21:11:38 -0700",
    "time_fixed": "2023-07-19 06:26:26 -0700"
}