{
    "bug_id": "traccar-traccar-8b4d3ee0b964",
    "bug_type": "SF",
    "buggy_lines": "\n        if (deviceSession == null || !sentence.matches(\"![35A-D],.*\")) {",
    "code": "    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n\n        if (sentence.startsWith(\"!1,\")) {\n            int index = sentence.indexOf(',', 3);\n            if (index < 0) {\n                index = sentence.length();\n            }\n            getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n-        if (deviceSession == null || !sentence.matches(\"![35A-D],.*\")) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        String type = sentence.substring(1, 2);\n        position.set(Position.KEY_TYPE, type);\n\n        if (type.equals(\"3\")) {\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_RESULT, sentence.substring(3));\n\n            return position;\n\n        } else if (type.equals(\"5\")) {\n\n            String[] values = sentence.split(\",\");\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n            if (values.length >= 4) {\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n            }\n\n            return position;\n\n        } else if (type.equals(\"B\") || type.equals(\"D\")) {\n\n            Parser parser = new Parser(PATTERN_BD, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n            decodeState(position, parser);\n\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n\n            return position;\n\n        } else if (type.equals(\"C\")) {\n\n            Parser parser = new Parser(PATTERN_C, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n            decodeState(position, parser);\n\n            return position;\n\n        } else if (type.equals(\"A\")) {\n\n            Parser parser = new Parser(PATTERN_A, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n\n            return position;\n\n        }\n\n        return null;\n    }",
    "fixed_code": "    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n\n        if (sentence.startsWith(\"!1,\")) {\n            int index = sentence.indexOf(',', 3);\n            if (index < 0) {\n                index = sentence.length();\n            }\n            getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n+        if (deviceSession == null || !sentence.matches(\"![345A D],.*\")) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        String type = sentence.substring(1, 2);\n        position.set(Position.KEY_TYPE, type);\n\n        if (type.equals(\"3\")) {\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_RESULT, sentence.substring(3));\n\n            return position;\n\n+        } else if (type.equals(\"4\")) {\n+\n+            String[] values = sentence.split(\",\");\n+\n+            getLastLocation(position, null);\n+\n+            for (int i = 1; i <= 3; i++) {\n+                if (!values[i + 1].isEmpty()) {\n+                    position.set(\"phone\" + i, values[i + 1]);\n+                }\n+            }\n+\n+            return position;\n+\n        } else if (type.equals(\"5\")) {\n\n            String[] values = sentence.split(\",\");\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n            if (values.length >= 4) {\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n            }\n\n            return position;\n\n        } else if (type.equals(\"B\") || type.equals(\"D\")) {\n\n            Parser parser = new Parser(PATTERN_BD, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n            decodeState(position, parser);\n\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n\n            return position;\n\n        } else if (type.equals(\"C\")) {\n\n            Parser parser = new Parser(PATTERN_C, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n            decodeState(position, parser);\n\n            return position;\n\n        } else if (type.equals(\"A\")) {\n\n            Parser parser = new Parser(PATTERN_A, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n\n            return position;\n\n        }\n\n        return null;\n    }",
    "fixed_lines": "\n        if (deviceSession == null || !sentence.matches(\"![345A-D],.*\")) {\n        } else if (type.equals(\"4\")) {\n\n            String[] values = sentence.split(\",\");\n\n            getLastLocation(position, null);\n\n            for (int i = 1; i <= 3; i++) {\n                if (!values[i + 1].isEmpty()) {\n                    position.set(\"phone\" + i, values[i + 1]);\n                }\n            }\n\n            return position;",
    "masked_code": "    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        String sentence = (String) msg;\n\n        if (sentence.startsWith(\"!1,\")) {\n            int index = sentence.indexOf(',', 3);\n            if (index < 0) {\n                index = sentence.length();\n            }\n            getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n            return null;\n        }\n\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        String type = sentence.substring(1, 2);\n        position.set(Position.KEY_TYPE, type);\n\n        if (type.equals(\"3\")) {\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_RESULT, sentence.substring(3));\n\n            return position;\n\n>>> [ INFILL ] <<<\n        } else if (type.equals(\"5\")) {\n\n            String[] values = sentence.split(\",\");\n\n            getLastLocation(position, null);\n\n            position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n            if (values.length >= 4) {\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n            }\n\n            return position;\n\n        } else if (type.equals(\"B\") || type.equals(\"D\")) {\n\n            Parser parser = new Parser(PATTERN_BD, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n            decodeState(position, parser);\n\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n\n            return position;\n\n        } else if (type.equals(\"C\")) {\n\n            Parser parser = new Parser(PATTERN_C, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n            decodeState(position, parser);\n\n            return position;\n\n        } else if (type.equals(\"A\")) {\n\n            Parser parser = new Parser(PATTERN_A, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n\n            decodeFix(position, parser);\n\n            return position;\n\n        }\n\n        return null;\n    }",
    "project": "traccar-traccar",
    "test_error_message": "    java.lang.NullPointerException at MiniFinderProtocolDecoderTest.java:23",
    "test_framework": "gitbugjava",
    "test_line": "",
    "test_name": "testDecode()",
    "test_suite": "org.traccar.protocol.MiniFinderProtocolDecoderTest",
    "time_buggy": "2023-07-03 21:21:38 -0700",
    "time_fixed": "2023-07-04 07:25:53 -0700"
}