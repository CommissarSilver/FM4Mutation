{
    "bug_id": "traccar-traccar-4722f9b6b648",
    "bug_type": "SF",
    "buggy_lines": "\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedIntLE(); // index\n        buf.readUnsignedIntLE(); // date and time\n\n        buf.skipBytes(23); // coordinates block\n\n        buf.skipBytes(3); // data tag header\n        decodeMinimalDataSet(position, buf);",
    "code": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n-        buf.readUnsignedShortLE(); // length\n\n        buf.skipBytes(3); // identification header\n-        buf.readUnsignedIntLE(); // index\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n-        buf.readUnsignedIntLE(); // date and time\n-\n-        buf.skipBytes(23); // coordinates block\n-\n-        buf.skipBytes(3); // data tag header\n-        decodeMinimalDataSet(position, buf);\n\n        return position;\n    }",
    "fixed_code": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n+        buf.readUnsignedShort(); // length\n\n        buf.skipBytes(3); // identification header\n+        buf.readUnsignedInt(); // index\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n+        position.setTime(new Date(buf.readUnsignedInt() * 1000));\n+\n+        buf.skipBytes(3); // coordinates header\n+        int flags = buf.readUnsignedByte();\n+        double latitude = buf.readUnsignedByte() + buf.readUnsignedShort() / 60000.0;\n+        double longitude = buf.readUnsignedByte() + buf.readUnsignedShort() / 60000.0;\n+        position.setLatitude(BitUtil.check(flags, 1) ?  latitude : latitude);\n+        position.setLongitude(BitUtil.check(flags, 0) ?  longitude : longitude);\n+        buf.readUnsignedInt(); // accuracy\n+\n+        buf.readUnsignedByte(); // data tag header\n+        // ByteBuf data = buf.readSlice(buf.readUnsignedShort());\n+        // decodeMinimalDataSet(position, data);\n\n        return position;\n    }",
    "fixed_lines": "\n        buf.readUnsignedShort(); // length\n        buf.readUnsignedInt(); // index\n        position.setTime(new Date(buf.readUnsignedInt() * 1000));\n\n        buf.skipBytes(3); // coordinates header\n        int flags = buf.readUnsignedByte();\n        double latitude = buf.readUnsignedByte() + buf.readUnsignedShort() / 60000.0;\n        double longitude = buf.readUnsignedByte() + buf.readUnsignedShort() / 60000.0;\n        position.setLatitude(BitUtil.check(flags, 1) ? -latitude : latitude);\n        position.setLongitude(BitUtil.check(flags, 0) ? -longitude : longitude);\n        buf.readUnsignedInt(); // accuracy\n\n        buf.readUnsignedByte(); // data tag header\n        // ByteBuf data = buf.readSlice(buf.readUnsignedShort());\n        // decodeMinimalDataSet(position, data);",
    "masked_code": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n\n\n        buf.skipBytes(3); // identification header\n\n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n\n        buf.readUnsignedByte(); // session status\n        buf.skipBytes(4); // reserved\n>>> [ INFILL ] <<<\n\n        return position;\n    }",
    "project": "traccar-traccar",
    "test_error_message": "    java.lang.AssertionError at GalileoProtocolDecoderTest.java:13",
    "test_framework": "gitbugjava",
    "test_line": "",
    "test_name": "testDecode",
    "test_suite": "org.traccar.protocol.GalileoProtocolDecoderTest",
    "time_buggy": "2023-01-23 09:16:10 -0800",
    "time_fixed": "2023-01-23 16:34:40 -0800"
}