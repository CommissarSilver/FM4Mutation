{
    "bug_id": "retel-io-ari-proxy-610e9b6725e1",
    "bug_type": "SH SF",
    "buggy_lines": "\n    if (!ariCommand.extractCommandType().isCreationCommand()) {",
    "code": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n\n-    if (!ariCommand.extractCommandType().isCreationCommand()) {\n      return Try.success(Done.done());\n    }\n\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }",
    "fixed_code": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n\n+    if (!(ariCommand.extractCommandType().isCreationCommand()\n+        && \"POST\".equals(ariCommand.getMethod()))) {\n      return Try.success(Done.done());\n    }\n\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }",
    "fixed_lines": "\n    if (!(ariCommand.extractCommandType().isCreationCommand()\n        && \"POST\".equals(ariCommand.getMethod()))) {",
    "masked_code": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n\n>>> [ INFILL ] <<<\n      return Try.success(Done.done());\n    }\n\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n\n    if (maybeResource.isEmpty()) {\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n\n    final AriResource resource = maybeResource.get();\n\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }",
    "project": "retel-io-ari-proxy",
    "test_error_message": "java.lang.AssertionError: Received unexpected message RegisterCallContext[callContext=theCallContext,resourceId=CHANNEL_ID]",
    "test_framework": "gitbugjava",
    "test_line": "    callContextProvider.probe().expectNoMessage();",
    "test_name": "doesNotTryToRegisterACallContextForDeleteRequests",
    "test_suite": "io.retel.ariproxy.boundary.commandsandresponses.AriCommandResponseProcessingTest",
    "time_buggy": "2023-02-21 14:24:19 +0100",
    "time_fixed": "2023-03-31 12:55:45 +0200"
}