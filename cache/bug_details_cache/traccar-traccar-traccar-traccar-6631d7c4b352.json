{
    "bug_id": "traccar-traccar-6631d7c4b352",
    "bug_type": "SF",
    "buggy_lines": "\n        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {\n            if (buf.getByte(i) == ']') {",
    "code": "    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n        int endIndex = -1;\n-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {\n-            if (buf.getByte(i) == ']') {\n                endIndex = i + 1;\n                break;\n            }\n        }\n\n        if (endIndex > 0) {\n            ByteBuf frame = Unpooled.buffer();\n            while (buf.readerIndex() < endIndex) {\n                byte b1 = buf.readByte();\n                if (b1 == '}') {\n                    byte b2 = buf.readByte();\n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    frame.writeByte(b1);\n                }\n            }\n            return frame;\n        }\n\n        return null;\n    }",
    "fixed_code": "    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n+        int brackets = 0;\n        int endIndex = -1;\n+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n+            byte b = buf.getByte(i);\n+            switch (b) {\n+                case '[':\n+                    brackets += 1;\n+                    break;\n+                case ']':\n+                    brackets  = 1;\n+                    break;\n+                default:\n+                    break;\n+            }\n+            if (brackets == 0 && i > buf.readerIndex()) {\n                endIndex = i + 1;\n                break;\n            }\n        }\n\n        if (endIndex > 0) {\n            ByteBuf frame = Unpooled.buffer();\n            while (buf.readerIndex() < endIndex) {\n                byte b1 = buf.readByte();\n                if (b1 == '}') {\n                    byte b2 = buf.readByte();\n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    frame.writeByte(b1);\n                }\n            }\n            return frame;\n        }\n\n        return null;\n    }",
    "fixed_lines": "\n        int brackets = 0;\n        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n            byte b = buf.getByte(i);\n            switch (b) {\n                case '[':\n                    brackets += 1;\n                    break;\n                case ']':\n                    brackets -= 1;\n                    break;\n                default:\n                    break;\n            }\n            if (brackets == 0 && i > buf.readerIndex()) {",
    "masked_code": "    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n\n        int endIndex = -1;\n>>> [ INFILL ] <<<\n                endIndex = i + 1;\n                break;\n            }\n        }\n\n        if (endIndex > 0) {\n            ByteBuf frame = Unpooled.buffer();\n            while (buf.readerIndex() < endIndex) {\n                byte b1 = buf.readByte();\n                if (b1 == '}') {\n                    byte b2 = buf.readByte();\n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    frame.writeByte(b1);\n                }\n            }\n            return frame;\n        }\n\n        return null;\n    }",
    "project": "traccar-traccar",
    "test_error_message": "    org.opentest4j.AssertionFailedError at WatchFrameDecoderTest.java:13",
    "test_framework": "gitbugjava",
    "test_line": "",
    "test_name": "testDecode()",
    "test_suite": "org.traccar.protocol.WatchFrameDecoderTest",
    "time_buggy": "2023-07-19 22:13:19 -0700",
    "time_fixed": "2023-07-20 06:55:36 -0700"
}