{
    "bug_id": "semver4j-semver4j-beb7e5d466c7",
    "bug_type": "SF",
    "buggy_lines": "\n                    if (isX(minor)) {\n                        minor = 0;\n                    }",
    "code": "    public String process(String range) {\n        String[] rangeVersions = range.split(\"\\\\s+\");\n\n        List<String> objects = new ArrayList<>();\n        for (String rangeVersion : rangeVersions) {\n            Matcher matcher = pattern.matcher(rangeVersion);\n\n            if (matcher.matches()) {\n                // Left unused variables for brevity.\n\n                String fullRange = matcher.group(0);\n\n                String compareSign = matcher.group(1);\n\n                int major = parseIntWithXSupport(matcher.group(2));\n                int minor = parseIntWithXSupport(matcher.group(3));\n                int patch = parseIntWithXSupport(matcher.group(4));\n                String preRelease = matcher.group(5);\n                String build = matcher.group(6);\n\n                if (compareSign.equals(EQ.asString()) && isX(patch)) {\n                    compareSign = EMPTY;\n                }\n\n                if (!compareSign.isEmpty() && isX(patch)) {\n-                    if (isX(minor)) {\n-                        minor = 0;\n-                    }\n                    patch = 0;\n                    if (compareSign.equals(GT.asString())) {\n                        compareSign = GTE.asString();\n\n                        if (isX(minor)) {\n                            major = major + 1;\n                            minor = 0;\n                        } else {\n                            minor = minor + 1;\n                        }\n                    } else if (compareSign.equals(LTE.asString())) {\n                        compareSign = LT.asString();\n                        if (isX(minor)) {\n                            major = major + 1;\n                        } else {\n                            minor = minor + 1;\n                        }\n                    }\n\n                    String from = format(Locale.ROOT, \"%s%d.%d.%d\", compareSign, major, minor, patch);\n                    objects.add(from);\n                } else if (isX(minor)) {\n                    String from = format(Locale.ROOT, \"%s%d.0.0\", GTE.asString(), major);\n                    String to = format(Locale.ROOT, \"%s%d.0.0\", LT.asString(), (major + 1));\n                    objects.add(from);\n                    objects.add(to);\n                } else if (isX(patch)) {\n                    String from = format(Locale.ROOT, \"%s%d.%d.0\", GTE.asString(), major, minor);\n                    String to = format(Locale.ROOT, \"%s%d.%d.0\", LT.asString(), major, (minor + 1));\n                    objects.add(from);\n                    objects.add(to);\n                } else {\n                    objects.add(fullRange);\n                }\n            }\n        }\n\n        if (objects.isEmpty()) {\n            return range;\n        }\n\n        return join(SPACE, objects);\n    }",
    "fixed_code": "    public String process(String range) {\n        String[] rangeVersions = range.split(\"\\\\s+\");\n\n        List<String> objects = new ArrayList<>();\n        for (String rangeVersion : rangeVersions) {\n            Matcher matcher = pattern.matcher(rangeVersion);\n\n            if (matcher.matches()) {\n                // Left unused variables for brevity.\n\n                String fullRange = matcher.group(0);\n\n                String compareSign = matcher.group(1);\n\n                int major = parseIntWithXSupport(matcher.group(2));\n                int minor = parseIntWithXSupport(matcher.group(3));\n                int patch = parseIntWithXSupport(matcher.group(4));\n                String preRelease = matcher.group(5);\n                String build = matcher.group(6);\n\n                if (compareSign.equals(EQ.asString()) && isX(patch)) {\n                    compareSign = EMPTY;\n                }\n\n                if (!compareSign.isEmpty() && isX(patch)) {\n                    patch = 0;\n                    if (compareSign.equals(GT.asString())) {\n                        compareSign = GTE.asString();\n\n                        if (isX(minor)) {\n                            major = major + 1;\n                            minor = 0;\n                        } else {\n                            minor = minor + 1;\n                        }\n                    } else if (compareSign.equals(LTE.asString())) {\n                        compareSign = LT.asString();\n                        if (isX(minor)) {\n                            major = major + 1;\n+                            minor = 0;\n                        } else {\n                            minor = minor + 1;\n                        }\n+                    } else if (isX(minor)) {\n+                        minor = 0;\n                    }\n\n                    String from = format(Locale.ROOT, \"%s%d.%d.%d\", compareSign, major, minor, patch);\n                    objects.add(from);\n                } else if (isX(minor)) {\n                    String from = format(Locale.ROOT, \"%s%d.0.0\", GTE.asString(), major);\n                    String to = format(Locale.ROOT, \"%s%d.0.0\", LT.asString(), (major + 1));\n                    objects.add(from);\n                    objects.add(to);\n                } else if (isX(patch)) {\n                    String from = format(Locale.ROOT, \"%s%d.%d.0\", GTE.asString(), major, minor);\n                    String to = format(Locale.ROOT, \"%s%d.%d.0\", LT.asString(), major, (minor + 1));\n                    objects.add(from);\n                    objects.add(to);\n                } else {\n                    objects.add(fullRange);\n                }\n            }\n        }\n\n        if (objects.isEmpty()) {\n            return range;\n        }\n\n        return join(SPACE, objects);\n    }",
    "fixed_lines": "\n                            minor = 0;\n                    } else if (isX(minor)) {\n                        minor = 0;",
    "masked_code": "    public String process(String range) {\n        String[] rangeVersions = range.split(\"\\\\s+\");\n\n        List<String> objects = new ArrayList<>();\n        for (String rangeVersion : rangeVersions) {\n            Matcher matcher = pattern.matcher(rangeVersion);\n\n            if (matcher.matches()) {\n                // Left unused variables for brevity.\n\n                String fullRange = matcher.group(0);\n\n                String compareSign = matcher.group(1);\n\n                int major = parseIntWithXSupport(matcher.group(2));\n                int minor = parseIntWithXSupport(matcher.group(3));\n                int patch = parseIntWithXSupport(matcher.group(4));\n                String preRelease = matcher.group(5);\n                String build = matcher.group(6);\n\n                if (compareSign.equals(EQ.asString()) && isX(patch)) {\n                    compareSign = EMPTY;\n                }\n\n                if (!compareSign.isEmpty() && isX(patch)) {\n                    patch = 0;\n                    if (compareSign.equals(GT.asString())) {\n                        compareSign = GTE.asString();\n\n                        if (isX(minor)) {\n                            major = major + 1;\n                            minor = 0;\n                        } else {\n                            minor = minor + 1;\n                        }\n                    } else if (compareSign.equals(LTE.asString())) {\n                        compareSign = LT.asString();\n                        if (isX(minor)) {\n                            major = major + 1;\n                        } else {\n                            minor = minor + 1;\n                        }\n>>> [ INFILL ] <<<\n                    }\n\n                    String from = format(Locale.ROOT, \"%s%d.%d.%d\", compareSign, major, minor, patch);\n                    objects.add(from);\n                } else if (isX(minor)) {\n                    String from = format(Locale.ROOT, \"%s%d.0.0\", GTE.asString(), major);\n                    String to = format(Locale.ROOT, \"%s%d.0.0\", LT.asString(), (major + 1));\n                    objects.add(from);\n                    objects.add(to);\n                } else if (isX(patch)) {\n                    String from = format(Locale.ROOT, \"%s%d.%d.0\", GTE.asString(), major, minor);\n                    String to = format(Locale.ROOT, \"%s%d.%d.0\", LT.asString(), major, (minor + 1));\n                    objects.add(from);\n                    objects.add(to);\n                } else {\n                    objects.add(fullRange);\n                }\n            }\n        }\n\n        if (objects.isEmpty()) {\n            return range;\n        }\n\n        return join(SPACE, objects);\n    }",
    "project": "semver4j-semver4j",
    "test_error_message": "No match found or invalid line number.",
    "test_framework": "gitbugjava",
    "test_line": "        assertThat(satisfies).isEqualTo(expected);",
    "test_name": "shouldCheckSatisfies{String, String, boolean}[134]",
    "test_suite": "org.semver4j.SemverTest",
    "time_buggy": "2023-02-16 08:19:55 +0100",
    "time_fixed": "2023-02-16 10:10:29 +0100"
}