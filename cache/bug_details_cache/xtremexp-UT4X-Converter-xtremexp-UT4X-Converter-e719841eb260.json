{
    "bug_id": "xtremexp-UT4X-Converter-e719841eb260",
    "bug_type": "SH SF",
    "buggy_lines": "\t\treturn \"Begin Map\\nBegin Level\\n\" + toT3d() + \"End Level\\nEnd Map\";",
    "code": "\tprotected String convertScaleAndToT3D(double scaleFactor) {\n\t\tthis.convert();\n\t\tthis.scale(scaleFactor);\n\n-\t\treturn \"Begin Map\\nBegin Level\\n\"   toT3d() + \"End Level\\nEnd Map\";\n\t}\n\n\tprotected void addComponent(final Component... components){\n\t\tthis.components.addAll(Arrays.asList(components));\n\t}\n\n\tprotected void addConvProperty(String key, Object value){\n\t\tthis.convProperties.put(key, value);\n\t}\n\n\t/**\n\t * Export current actor to unreal text format.\n\t * @return Actor exported in unreal text format\n\t */\n\tpublic abstract String toT3d();\n\n\t/**\n\t * Write actor. New version using component class to make easier to convert UT3/UT4 actors\n\t *\n\t */\n\tpublic String toT3dNew() {\n\n\t\tint ueVersion = this.getMapConverter().getOutputGame().getUeVersion();\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tsb.append(\"\\tBegin Actor Class=\").append(this.t3dClass).append(\" Name=\").append(this.name);\n\n\t\t// Archetype=StaticMeshActor'Engine.Default__StaticMeshActor'\n\t\tif (this.archetype != null) {\n\t\t\tsb.append(\" Archetype=\").append(this.archetype);\n\t\t} else if (ueVersion == 3) {\n\t\t\tsb.append(\" Archetype=\").append(this.t3dClass).append(\"'Engine.Default__\").append(this.t3dClass).append(\"'\");\n\t\t}\n\t\tsb.append(\"\\n\");\n\n\t\tfor (final Component comp : components) {\n\t\t\tsb.append(comp.toT3D(ueVersion));\n\t\t}\n\n\t\tint idx = 0;\n\n\t\tfor (final Component comp : components) {\n\n\t\t\tif (ueVersion == 3) {\n\t\t\t\tsb.append(\"\\t\\t\").append(comp.getComponentClass()).append(\"=\").append(comp.getReference(ueVersion)).append(\"\\n\");\n\t\t\t\tif(!comp.noListInActorComponends) {\n\t\t\t\t\tsb.append(\"\\t\\tComponents(\").append(idx).append(\")=\").append(comp.getReference(ueVersion)).append(\"\\n\");\n\t\t\t\t}\n\t\t\t} else if (ueVersion == 4) {\n\t\t\t\tif (idx == 0) {\n\t\t\t\t\tsb.append(\"\\t\\t\").append(comp.getComponentClass()).append(\"=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t\tsb.append(\"\\t\\tRootComponent=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tsb.append(\"\\t\\tInstanceComponents(\").append(idx - 1).append(\")=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tidx++;\n\t\t}\n\n\t\t// actor specific properties\n\t\tfor (Map.Entry<String, Object> entry : convProperties.entrySet()) {\n\t\t\tsb.append(\"\\t\\t\").append(entry.getKey()).append(\"=\").append(entry.getValue() != null ? entry.getValue().toString() : \"None\").append(\"\\n\");\n\t\t}\n\n\t\tif (ueVersion <= 3) {\n\t\t\tsb.append(writeLocRotAndScaleAsString());\n\t\t}\n\n\t\tif (ueVersion == 3) {\n\t\t\tsb.append(\"\\t\\tObjectArchetype=\").append(this.t3dClass).append(\"'Engine.Default__\").append(this.t3dClass).append(\"'\\n\");\n\t\t}\n\n\t\twriteSimpleProperties(sb);\n\n\t\tsb.append(writeEndActorAsString());\n\n\t\treturn sb.toString();\n\t}\n}",
    "fixed_code": "\tprotected String convertScaleAndToT3D(double scaleFactor) {\n\t\tthis.convert();\n\t\tthis.scale(scaleFactor);\n\n+\t\tString convT3d = toT3d();\n+\n+\t\tif (convT3d == null) {\n+\t\t\tconvT3d = \"\";\n+\n+\t\t\tfor (T3DActor repActor : this.children) {\n+\t\t\t\tconvT3d += repActor.toT3d();\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn \"Begin Map\\nBegin Level\\n\" + convT3d + \"End Level\\nEnd Map\";\n\t}\n\n\tprotected void addComponent(final Component... components){\n\t\tthis.components.addAll(Arrays.asList(components));\n\t}\n\n\tprotected void addConvProperty(String key, Object value){\n\t\tthis.convProperties.put(key, value);\n\t}\n\n\t/**\n\t * Export current actor to unreal text format.\n\t * @return Actor exported in unreal text format\n\t */\n\tpublic abstract String toT3d();\n\n\t/**\n\t * Write actor. New version using component class to make easier to convert UT3/UT4 actors\n\t *\n\t */\n\tpublic String toT3dNew() {\n\n\t\tint ueVersion = this.getMapConverter().getOutputGame().getUeVersion();\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tsb.append(\"\\tBegin Actor Class=\").append(this.t3dClass).append(\" Name=\").append(this.name);\n\n\t\t// Archetype=StaticMeshActor'Engine.Default__StaticMeshActor'\n\t\tif (this.archetype != null) {\n\t\t\tsb.append(\" Archetype=\").append(this.archetype);\n\t\t} else if (ueVersion == 3) {\n\t\t\tsb.append(\" Archetype=\").append(this.t3dClass).append(\"'Engine.Default__\").append(this.t3dClass).append(\"'\");\n\t\t}\n\t\tsb.append(\"\\n\");\n\n\t\tfor (final Component comp : components) {\n\t\t\tsb.append(comp.toT3D(ueVersion));\n\t\t}\n\n\t\tint idx = 0;\n\n\t\tfor (final Component comp : components) {\n\n\t\t\tif (ueVersion == 3) {\n\t\t\t\tsb.append(\"\\t\\t\").append(comp.getComponentClass()).append(\"=\").append(comp.getReference(ueVersion)).append(\"\\n\");\n\t\t\t\tif(!comp.noListInActorComponends) {\n\t\t\t\t\tsb.append(\"\\t\\tComponents(\").append(idx).append(\")=\").append(comp.getReference(ueVersion)).append(\"\\n\");\n\t\t\t\t}\n\t\t\t} else if (ueVersion == 4) {\n\t\t\t\tif (idx == 0) {\n\t\t\t\t\tsb.append(\"\\t\\t\").append(comp.getComponentClass()).append(\"=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t\tsb.append(\"\\t\\tRootComponent=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tsb.append(\"\\t\\tInstanceComponents(\").append(idx - 1).append(\")=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tidx++;\n\t\t}\n\n\t\t// actor specific properties\n\t\tfor (Map.Entry<String, Object> entry : convProperties.entrySet()) {\n\t\t\tsb.append(\"\\t\\t\").append(entry.getKey()).append(\"=\").append(entry.getValue() != null ? entry.getValue().toString() : \"None\").append(\"\\n\");\n\t\t}\n\n\t\tif (ueVersion <= 3) {\n\t\t\tsb.append(writeLocRotAndScaleAsString());\n\t\t}\n\n\t\tif (ueVersion == 3) {\n\t\t\tsb.append(\"\\t\\tObjectArchetype=\").append(this.t3dClass).append(\"'Engine.Default__\").append(this.t3dClass).append(\"'\\n\");\n\t\t}\n\n\t\twriteSimpleProperties(sb);\n\n\t\tsb.append(writeEndActorAsString());\n\n\t\treturn sb.toString();\n\t}\n}",
    "fixed_lines": "\t\tString convT3d = toT3d();\n\n\t\tif (convT3d == null) {\n\t\t\tconvT3d = \"\";\n\n\t\t\tfor (T3DActor repActor : this.children) {\n\t\t\t\tconvT3d += repActor.toT3d();\n\t\t\t}\n\t\t}\n\n\t\treturn \"Begin Map\\nBegin Level\\n\" + convT3d + \"End Level\\nEnd Map\";",
    "masked_code": "\tprotected String convertScaleAndToT3D(double scaleFactor) {\n\t\tthis.convert();\n\t\tthis.scale(scaleFactor);\n\n>>> [ INFILL ] <<<\n\t}\n\n\tprotected void addComponent(final Component... components){\n\t\tthis.components.addAll(Arrays.asList(components));\n\t}\n\n\tprotected void addConvProperty(String key, Object value){\n\t\tthis.convProperties.put(key, value);\n\t}\n\n\t/**\n\t * Export current actor to unreal text format.\n\t * @return Actor exported in unreal text format\n\t */\n\tpublic abstract String toT3d();\n\n\t/**\n\t * Write actor. New version using component class to make easier to convert UT3/UT4 actors\n\t *\n\t */\n\tpublic String toT3dNew() {\n\n\t\tint ueVersion = this.getMapConverter().getOutputGame().getUeVersion();\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tsb.append(\"\\tBegin Actor Class=\").append(this.t3dClass).append(\" Name=\").append(this.name);\n\n\t\t// Archetype=StaticMeshActor'Engine.Default__StaticMeshActor'\n\t\tif (this.archetype != null) {\n\t\t\tsb.append(\" Archetype=\").append(this.archetype);\n\t\t} else if (ueVersion == 3) {\n\t\t\tsb.append(\" Archetype=\").append(this.t3dClass).append(\"'Engine.Default__\").append(this.t3dClass).append(\"'\");\n\t\t}\n\t\tsb.append(\"\\n\");\n\n\t\tfor (final Component comp : components) {\n\t\t\tsb.append(comp.toT3D(ueVersion));\n\t\t}\n\n\t\tint idx = 0;\n\n\t\tfor (final Component comp : components) {\n\n\t\t\tif (ueVersion == 3) {\n\t\t\t\tsb.append(\"\\t\\t\").append(comp.getComponentClass()).append(\"=\").append(comp.getReference(ueVersion)).append(\"\\n\");\n\t\t\t\tif(!comp.noListInActorComponends) {\n\t\t\t\t\tsb.append(\"\\t\\tComponents(\").append(idx).append(\")=\").append(comp.getReference(ueVersion)).append(\"\\n\");\n\t\t\t\t}\n\t\t\t} else if (ueVersion == 4) {\n\t\t\t\tif (idx == 0) {\n\t\t\t\t\tsb.append(\"\\t\\t\").append(comp.getComponentClass()).append(\"=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t\tsb.append(\"\\t\\tRootComponent=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tsb.append(\"\\t\\tInstanceComponents(\").append(idx - 1).append(\")=\").append(comp.getName()).append(\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tidx++;\n\t\t}\n\n\t\t// actor specific properties\n\t\tfor (Map.Entry<String, Object> entry : convProperties.entrySet()) {\n\t\t\tsb.append(\"\\t\\t\").append(entry.getKey()).append(\"=\").append(entry.getValue() != null ? entry.getValue().toString() : \"None\").append(\"\\n\");\n\t\t}\n\n\t\tif (ueVersion <= 3) {\n\t\t\tsb.append(writeLocRotAndScaleAsString());\n\t\t}\n\n\t\tif (ueVersion == 3) {\n\t\t\tsb.append(\"\\t\\tObjectArchetype=\").append(this.t3dClass).append(\"'Engine.Default__\").append(this.t3dClass).append(\"'\\n\");\n\t\t}\n\n\t\twriteSimpleProperties(sb);\n\n\t\tsb.append(writeEndActorAsString());\n\n\t\treturn sb.toString();\n\t}\n}",
    "project": "xtremexp-UT4X-Converter",
    "test_error_message": "org.opentest4j.AssertionFailedError: expected: <true> but was: <false>",
    "test_framework": "gitbugjava",
    "test_line": "        Assertions.assertTrue(convT3d.contains(\"Begin Actor Class=AtmosphericFog\"));",
    "test_name": "testZoneInfoConversionUT2004ToUT4",
    "test_suite": "org.xtx.ut4converter.t3d.T3DZoneInfoTest",
    "time_buggy": "2023-01-29 08:08:51 +0100",
    "time_fixed": "2023-01-29 08:24:09 +0100"
}