{
    "bug_id": "traccar-traccar-782fd787d14b",
    "bug_type": "SF",
    "buggy_lines": "\n                    position.setLatitude(buf.readInt() * 0.00001);\n                    position.setLongitude(buf.readInt() * 0.00001);\n                    buf.skipBytes(buf.readUnsignedShortLE()); // landmark\n                    buf.skipBytes(buf.readUnsignedShortLE()); // console",
    "code": "    private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {\n\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n\n        String id = String.format(\"%08d%07d\", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, index);\n\n        position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));\n\n        while (buf.isReadable()) {\n            int type = buf.readUnsignedByte();\n            switch (type) {\n                case 0:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    buf.readUnsignedIntLE(); // event data\n\n                    int status = buf.readUnsignedShortLE();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));\n                    position.set(Position.KEY_STATUS, status);\n\n                    position.setValid(true);\n-                    position.setLatitude(buf.readInt() * 0.00001);\n-                    position.setLongitude(buf.readInt() * 0.00001);\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    position.setCourse(buf.readUnsignedShortLE());\n\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_GPS, buf.readUnsignedByte());\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShortLE());\n                    position.set(\"maxAcceleration\", buf.readUnsignedShortLE() * 0.001);\n                    position.set(\"maxDeceleration\", buf.readUnsignedShortLE() * 0.001);\n                    buf.readUnsignedShortLE(); // bearing to landmark\n                    buf.readUnsignedIntLE(); // distance to landmark\n\n                    position.setFixTime(new Date(buf.readUnsignedIntLE() * 1000));\n\n                    buf.readUnsignedByte(); // reserved\n                    break;\n                case 1:\n-                    buf.skipBytes(buf.readUnsignedShortLE()); // landmark\n                    break;\n                case 4:\n                    buf.skipBytes(53); // trip\n                    break;\n                case 20:\n                    buf.skipBytes(32); // extended\n                    break;\n                case 22:\n                    buf.readUnsignedByte(); // zone flag\n                    buf.skipBytes(buf.readUnsignedShortLE()); // zone name\n                    break;\n                case 30:\n                    buf.skipBytes(79); // system status\n                    break;\n                case 40:\n                    buf.skipBytes(40); // analog\n                    break;\n                case 50:\n-                    buf.skipBytes(buf.readUnsignedShortLE()); // console\n                    break;\n                case 255:\n                    buf.skipBytes(4); // acknowledgement\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\"Unknown type %d\", type));\n            }\n        }\n\n        return position.getValid() ? position : null;\n\n    }",
    "fixed_code": "    private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {\n\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n\n        String id = String.format(\"%08d%07d\", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, index);\n\n        position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));\n\n        while (buf.isReadable()) {\n            int type = buf.readUnsignedByte();\n            switch (type) {\n                case 0:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    buf.readUnsignedIntLE(); // event data\n\n                    int status = buf.readUnsignedShortLE();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));\n                    position.set(Position.KEY_STATUS, status);\n\n                    position.setValid(true);\n+                    position.setLatitude(buf.readIntLE() * 0.00001);\n+                    position.setLongitude(buf.readIntLE() * 0.00001);\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    position.setCourse(buf.readUnsignedShortLE());\n\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_GPS, buf.readUnsignedByte());\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShortLE());\n                    position.set(\"maxAcceleration\", buf.readUnsignedShortLE() * 0.001);\n                    position.set(\"maxDeceleration\", buf.readUnsignedShortLE() * 0.001);\n                    buf.readUnsignedShortLE(); // bearing to landmark\n                    buf.readUnsignedIntLE(); // distance to landmark\n\n                    position.setFixTime(new Date(buf.readUnsignedIntLE() * 1000));\n\n                    buf.readUnsignedByte(); // reserved\n                    break;\n                case 1:\n+                    buf.skipBytes(buf.readUnsignedShortLE()   3); // landmark\n                    break;\n                case 4:\n                    buf.skipBytes(53); // trip\n                    break;\n                case 20:\n                    buf.skipBytes(32); // extended\n                    break;\n                case 22:\n                    buf.readUnsignedByte(); // zone flag\n                    buf.skipBytes(buf.readUnsignedShortLE()); // zone name\n                    break;\n                case 30:\n                    buf.skipBytes(79); // system status\n                    break;\n                case 40:\n                    buf.skipBytes(40); // analog\n                    break;\n                case 50:\n+                    buf.skipBytes(buf.readUnsignedShortLE()   3); // console\n                    break;\n                case 255:\n                    buf.skipBytes(4); // acknowledgement\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\"Unknown type %d\", type));\n            }\n        }\n\n        return position.getValid() ? position : null;\n\n    }",
    "fixed_lines": "\n                    position.setLatitude(buf.readIntLE() * 0.00001);\n                    position.setLongitude(buf.readIntLE() * 0.00001);\n                    buf.skipBytes(buf.readUnsignedShortLE() - 3); // landmark\n                    buf.skipBytes(buf.readUnsignedShortLE() - 3); // console",
    "masked_code": "    private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {\n\n        buf.readUnsignedShortLE(); // length\n        buf.readUnsignedShortLE(); // checksum\n        int index = buf.readUnsignedShortLE();\n\n        String id = String.format(\"%08d%07d\", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));\n        if (deviceSession == null) {\n            return null;\n        }\n\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, index);\n\n        position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));\n\n        while (buf.isReadable()) {\n            int type = buf.readUnsignedByte();\n            switch (type) {\n                case 0:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    buf.readUnsignedIntLE(); // event data\n\n                    int status = buf.readUnsignedShortLE();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));\n                    position.set(Position.KEY_STATUS, status);\n\n                    position.setValid(true);\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    position.setCourse(buf.readUnsignedShortLE());\n\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_GPS, buf.readUnsignedByte());\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShortLE());\n                    position.set(\"maxAcceleration\", buf.readUnsignedShortLE() * 0.001);\n                    position.set(\"maxDeceleration\", buf.readUnsignedShortLE() * 0.001);\n                    buf.readUnsignedShortLE(); // bearing to landmark\n                    buf.readUnsignedIntLE(); // distance to landmark\n\n                    position.setFixTime(new Date(buf.readUnsignedIntLE() * 1000));\n\n                    buf.readUnsignedByte(); // reserved\n                    break;\n                case 1:\n                    break;\n                case 4:\n                    buf.skipBytes(53); // trip\n                    break;\n                case 20:\n                    buf.skipBytes(32); // extended\n                    break;\n                case 22:\n                    buf.readUnsignedByte(); // zone flag\n                    buf.skipBytes(buf.readUnsignedShortLE()); // zone name\n                    break;\n                case 30:\n                    buf.skipBytes(79); // system status\n                    break;\n                case 40:\n                    buf.skipBytes(40); // analog\n                    break;\n                case 50:\n>>> [ INFILL ] <<<\n                    break;\n                case 255:\n                    buf.skipBytes(4); // acknowledgement\n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\"Unknown type %d\", type));\n            }\n        }\n\n        return position.getValid() ? position : null;\n\n    }",
    "project": "traccar-traccar",
    "test_error_message": "    java.lang.IllegalArgumentException at TramigoProtocolDecoderTest.java:13",
    "test_framework": "gitbugjava",
    "test_line": "",
    "test_name": "testDecode",
    "test_suite": "org.traccar.protocol.TramigoProtocolDecoderTest",
    "time_buggy": "2023-02-13 17:20:39 -0800",
    "time_fixed": "2023-02-14 09:08:14 -0800"
}