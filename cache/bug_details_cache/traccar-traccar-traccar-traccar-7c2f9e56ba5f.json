{
    "bug_id": "traccar-traccar-7c2f9e56ba5f",
    "bug_type": "SF",
    "buggy_lines": "\n            .expression(\"(?:NA|(.*))\")           // params",
    "code": "    private static final Pattern PATTERN = new PatternBuilder()\n            .number(\"(?:NA|(dd)(dd)(dd));\")      // date (ddmmyy)\n            .number(\"(?:NA|(dd)(dd)(dd));\")      // time (hhmmss)\n            .number(\"(?:NA|(dd)(dd.d+));\")       // latitude\n            .expression(\"(?:NA|([NS]));\")\n            .number(\"(?:NA|(ddd)(dd.d+));\")      // longitude\n            .expression(\"(?:NA|([EW]));\")\n            .number(\"(?:NA|(d+.?d*))?;\")         // speed\n            .number(\"(?:NA|(d+.?d*))?;\")         // course\n            .number(\"(?:NA|(-?d+.?d*));\")        // altitude\n            .number(\"(?:NA|(d+))\")               // satellites\n            .groupBegin().text(\";\")\n            .number(\"(?:NA|(d+.?d*));\")          // hdop\n            .number(\"(?:NA|(d+));\")              // inputs\n            .number(\"(?:NA|(d+));\")              // outputs\n            .expression(\"(?:NA|([^;]*));\")       // adc\n            .expression(\"(?:NA|([^;]*));\")       // ibutton\n-            .expression(\"(?:NA|(.*))\")           // params\n            .groupEnd(\"?\")\n            .compile();\n\n    private void sendResponse(Channel channel, SocketAddress remoteAddress, String type, Integer number) {\n        if (channel != null) {\n            StringBuilder response = new StringBuilder(\"#A\");\n            response.append(type);\n            response.append(\"#\");\n            if (number != null) {\n                response.append(number);\n            }\n            response.append(\"\\r\\n\");\n            channel.writeAndFlush(new NetworkMessage(response.toString(), remoteAddress));\n        }\n    }",
    "fixed_code": "    private static final Pattern PATTERN = new PatternBuilder()\n            .number(\"(?:NA|(dd)(dd)(dd));\")      // date (ddmmyy)\n            .number(\"(?:NA|(dd)(dd)(dd));\")      // time (hhmmss)\n            .number(\"(?:NA|(dd)(dd.d+));\")       // latitude\n            .expression(\"(?:NA|([NS]));\")\n            .number(\"(?:NA|(ddd)(dd.d+));\")      // longitude\n            .expression(\"(?:NA|([EW]));\")\n            .number(\"(?:NA|(d+.?d*))?;\")         // speed\n            .number(\"(?:NA|(d+.?d*))?;\")         // course\n            .number(\"(?:NA|(-?d+.?d*));\")        // altitude\n            .number(\"(?:NA|(d+))\")               // satellites\n            .groupBegin().text(\";\")\n            .number(\"(?:NA|(d+.?d*));\")          // hdop\n            .number(\"(?:NA|(d+));\")              // inputs\n            .number(\"(?:NA|(d+));\")              // outputs\n            .expression(\"(?:NA|([^;]*));\")       // adc\n            .expression(\"(?:NA|([^;]*));\")       // ibutton\n+            .expression(\"(?:NA|([^;]*))\")        // params\n            .groupEnd(\"?\")\n+            .any()\n            .compile();\n\n    private void sendResponse(Channel channel, SocketAddress remoteAddress, String type, Integer number) {\n        if (channel != null) {\n            StringBuilder response = new StringBuilder(\"#A\");\n            response.append(type);\n            response.append(\"#\");\n            if (number != null) {\n                response.append(number);\n            }\n            response.append(\"\\r\\n\");\n            channel.writeAndFlush(new NetworkMessage(response.toString(), remoteAddress));\n        }\n    }",
    "fixed_lines": "\n            .expression(\"(?:NA|([^;]*))\")        // params\n            .any()",
    "masked_code": "    private static final Pattern PATTERN = new PatternBuilder()\n            .number(\"(?:NA|(dd)(dd)(dd));\")      // date (ddmmyy)\n            .number(\"(?:NA|(dd)(dd)(dd));\")      // time (hhmmss)\n            .number(\"(?:NA|(dd)(dd.d+));\")       // latitude\n            .expression(\"(?:NA|([NS]));\")\n            .number(\"(?:NA|(ddd)(dd.d+));\")      // longitude\n            .expression(\"(?:NA|([EW]));\")\n            .number(\"(?:NA|(d+.?d*))?;\")         // speed\n            .number(\"(?:NA|(d+.?d*))?;\")         // course\n            .number(\"(?:NA|(-?d+.?d*));\")        // altitude\n            .number(\"(?:NA|(d+))\")               // satellites\n            .groupBegin().text(\";\")\n            .number(\"(?:NA|(d+.?d*));\")          // hdop\n            .number(\"(?:NA|(d+));\")              // inputs\n            .number(\"(?:NA|(d+));\")              // outputs\n            .expression(\"(?:NA|([^;]*));\")       // adc\n            .expression(\"(?:NA|([^;]*));\")       // ibutton\n            .groupEnd(\"?\")\n>>> [ INFILL ] <<<\n            .compile();\n\n    private void sendResponse(Channel channel, SocketAddress remoteAddress, String type, Integer number) {\n        if (channel != null) {\n            StringBuilder response = new StringBuilder(\"#A\");\n            response.append(type);\n            response.append(\"#\");\n            if (number != null) {\n                response.append(number);\n            }\n            response.append(\"\\r\\n\");\n            channel.writeAndFlush(new NetworkMessage(response.toString(), remoteAddress));\n        }\n    }",
    "project": "traccar-traccar",
    "test_error_message": "    org.opentest4j.AssertionFailedError at WialonProtocolDecoderTest.java:16",
    "test_framework": "gitbugjava",
    "test_line": "",
    "test_name": "testDecode()",
    "test_suite": "org.traccar.protocol.WialonProtocolDecoderTest",
    "time_buggy": "2023-03-23 09:17:25 -0700",
    "time_fixed": "2023-03-23 09:38:30 -0700"
}